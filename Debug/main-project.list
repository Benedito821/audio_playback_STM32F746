
main-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010a90  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  08010c58  08010c58  00020c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011118  08011118  000300b4  2**0
                  CONTENTS
  4 .ARM          00000008  08011118  08011118  00021118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011120  08011120  000300b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011120  08011120  00021120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011124  08011124  00021124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08011128  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003608  200000b4  080111dc  000300b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200036bc  080111dc  000336bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021427  00000000  00000000  00030127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005c85  00000000  00000000  0005154e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001830  00000000  00000000  000571d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001236  00000000  00000000  00058a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c246  00000000  00000000  00059c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025e68  00000000  00000000  00085e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee68c  00000000  00000000  000abcec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000063a0  00000000  00000000  0019a378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001a0718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000b4 	.word	0x200000b4
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08010c40 	.word	0x08010c40

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000b8 	.word	0x200000b8
 8000204:	08010c40 	.word	0x08010c40

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800050a:	4b0c      	ldr	r3, [pc, #48]	; (800053c <MX_DMA_Init+0x38>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a0b      	ldr	r2, [pc, #44]	; (800053c <MX_DMA_Init+0x38>)
 8000510:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <MX_DMA_Init+0x38>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	2100      	movs	r1, #0
 8000526:	203c      	movs	r0, #60	; 0x3c
 8000528:	f002 ffe7 	bl	80034fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800052c:	203c      	movs	r0, #60	; 0x3c
 800052e:	f003 f800 	bl	8003532 <HAL_NVIC_EnableIRQ>

}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40023800 	.word	0x40023800

08000540 <AUDIO_StorageParse>:
  * @brief  Copies disk content in the explorer list.
  * @param  None
  * @retval Operation result
  */
FRESULT AUDIO_StorageParse(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b0d6      	sub	sp, #344	; 0x158
 8000544:	af00      	add	r7, sp, #0
  FRESULT res = FR_OK;
 8000546:	2300      	movs	r3, #0
 8000548:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  FILINFO fno;
  DIR dir;
  char *fn;
  
  res = f_opendir(&dir, USBHPath);
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	4946      	ldr	r1, [pc, #280]	; (8000668 <AUDIO_StorageParse+0x128>)
 8000550:	4618      	mov	r0, r3
 8000552:	f00f fcbf 	bl	800fed4 <f_opendir>
 8000556:	4603      	mov	r3, r0
 8000558:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  FileList.ptr = 0;
 800055c:	4b43      	ldr	r3, [pc, #268]	; (800066c <AUDIO_StorageParse+0x12c>)
 800055e:	2200      	movs	r2, #0
 8000560:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8
  
  if(res == FR_OK)
 8000564:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8000568:	2b00      	cmp	r3, #0
 800056a:	d16d      	bne.n	8000648 <AUDIO_StorageParse+0x108>
  {
    while(USBH_MSC_IsReady(&hUsbHostFS)) // change from hUSBHost to hUsbHostFS
 800056c:	e066      	b.n	800063c <AUDIO_StorageParse+0xfc>
    {
      res = f_readdir(&dir, &fno);
 800056e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	4611      	mov	r1, r2
 8000576:	4618      	mov	r0, r3
 8000578:	f00f fd45 	bl	8010006 <f_readdir>
 800057c:	4603      	mov	r3, r0
 800057e:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      if(res != FR_OK || fno.fname[0] == 0)
 8000582:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8000586:	2b00      	cmp	r3, #0
 8000588:	d15e      	bne.n	8000648 <AUDIO_StorageParse+0x108>
 800058a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800058e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000592:	7d9b      	ldrb	r3, [r3, #22]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d057      	beq.n	8000648 <AUDIO_StorageParse+0x108>
      {
        break;
      }
      if(fno.fname[0] == '.')
 8000598:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800059c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80005a0:	7d9b      	ldrb	r3, [r3, #22]
 80005a2:	2b2e      	cmp	r3, #46	; 0x2e
 80005a4:	d100      	bne.n	80005a8 <AUDIO_StorageParse+0x68>
      {
        continue;
 80005a6:	e049      	b.n	800063c <AUDIO_StorageParse+0xfc>
      }
      fn = fno.fname;
 80005a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005ac:	3316      	adds	r3, #22
 80005ae:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
      
      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 80005b2:	4b2e      	ldr	r3, [pc, #184]	; (800066c <AUDIO_StorageParse+0x12c>)
 80005b4:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 80005b8:	2b17      	cmp	r3, #23
 80005ba:	d83f      	bhi.n	800063c <AUDIO_StorageParse+0xfc>
      {
        if((fno.fattrib & AM_DIR) == 0)
 80005bc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80005c0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80005c4:	7a1b      	ldrb	r3, [r3, #8]
 80005c6:	f003 0310 	and.w	r3, r3, #16
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d136      	bne.n	800063c <AUDIO_StorageParse+0xfc>
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 80005ce:	4928      	ldr	r1, [pc, #160]	; (8000670 <AUDIO_StorageParse+0x130>)
 80005d0:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 80005d4:	f010 fa87 	bl	8010ae6 <strstr>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d107      	bne.n	80005ee <AUDIO_StorageParse+0xae>
 80005de:	4925      	ldr	r1, [pc, #148]	; (8000674 <AUDIO_StorageParse+0x134>)
 80005e0:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 80005e4:	f010 fa7f 	bl	8010ae6 <strstr>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d026      	beq.n	800063c <AUDIO_StorageParse+0xfc>
          {
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 80005ee:	4b1f      	ldr	r3, [pc, #124]	; (800066c <AUDIO_StorageParse+0x12c>)
 80005f0:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 80005f4:	461a      	mov	r2, r3
 80005f6:	4613      	mov	r3, r2
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	4413      	add	r3, r2
 80005fc:	00db      	lsls	r3, r3, #3
 80005fe:	4413      	add	r3, r2
 8000600:	4a1a      	ldr	r2, [pc, #104]	; (800066c <AUDIO_StorageParse+0x12c>)
 8000602:	4413      	add	r3, r2
 8000604:	3301      	adds	r3, #1
 8000606:	2228      	movs	r2, #40	; 0x28
 8000608:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800060c:	4618      	mov	r0, r3
 800060e:	f010 fa57 	bl	8010ac0 <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 8000612:	4b16      	ldr	r3, [pc, #88]	; (800066c <AUDIO_StorageParse+0x12c>)
 8000614:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000618:	461a      	mov	r2, r3
 800061a:	4914      	ldr	r1, [pc, #80]	; (800066c <AUDIO_StorageParse+0x12c>)
 800061c:	4613      	mov	r3, r2
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	4413      	add	r3, r2
 8000622:	00db      	lsls	r3, r3, #3
 8000624:	4413      	add	r3, r2
 8000626:	440b      	add	r3, r1
 8000628:	2201      	movs	r2, #1
 800062a:	701a      	strb	r2, [r3, #0]
            FileList.ptr++;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <AUDIO_StorageParse+0x12c>)
 800062e:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000632:	3301      	adds	r3, #1
 8000634:	b29a      	uxth	r2, r3
 8000636:	4b0d      	ldr	r3, [pc, #52]	; (800066c <AUDIO_StorageParse+0x12c>)
 8000638:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8
    while(USBH_MSC_IsReady(&hUsbHostFS)) // change from hUSBHost to hUsbHostFS
 800063c:	480e      	ldr	r0, [pc, #56]	; (8000678 <AUDIO_StorageParse+0x138>)
 800063e:	f009 ffce 	bl	800a5de <USBH_MSC_IsReady>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d192      	bne.n	800056e <AUDIO_StorageParse+0x2e>
          }
        }
      }   
    }
  }
  NumObs = FileList.ptr;
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <AUDIO_StorageParse+0x12c>)
 800064a:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	; 0x3d8
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <AUDIO_StorageParse+0x13c>)
 8000650:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	4618      	mov	r0, r3
 8000656:	f00f fcb0 	bl	800ffba <f_closedir>
  return res;
 800065a:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 800065e:	4618      	mov	r0, r3
 8000660:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20002a28 	.word	0x20002a28
 800066c:	200000d0 	.word	0x200000d0
 8000670:	08010c58 	.word	0x08010c58
 8000674:	08010c5c 	.word	0x08010c5c
 8000678:	20002e94 	.word	0x20002e94
 800067c:	200004aa 	.word	0x200004aa

08000680 <AUDIO_GetWavObjectNumber>:
  * @brief  Gets Wav Object Number.
  * @param  None
  * @retval None
  */
uint16_t AUDIO_GetWavObjectNumber(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	if (AUDIO_StorageParse() == FR_OK)
 8000684:	f7ff ff5c 	bl	8000540 <AUDIO_StorageParse>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d102      	bne.n	8000694 <AUDIO_GetWavObjectNumber+0x14>
		return NumObs;
 800068e:	4b02      	ldr	r3, [pc, #8]	; (8000698 <AUDIO_GetWavObjectNumber+0x18>)
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	e7ff      	b.n	8000694 <AUDIO_GetWavObjectNumber+0x14>
}
 8000694:	4618      	mov	r0, r3
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200004aa 	.word	0x200004aa

0800069c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	; 0x28
 80006a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	4b2e      	ldr	r3, [pc, #184]	; (800076c <MX_GPIO_Init+0xd0>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a2d      	ldr	r2, [pc, #180]	; (800076c <MX_GPIO_Init+0xd0>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b2b      	ldr	r3, [pc, #172]	; (800076c <MX_GPIO_Init+0xd0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006ca:	4b28      	ldr	r3, [pc, #160]	; (800076c <MX_GPIO_Init+0xd0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a27      	ldr	r2, [pc, #156]	; (800076c <MX_GPIO_Init+0xd0>)
 80006d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b25      	ldr	r3, [pc, #148]	; (800076c <MX_GPIO_Init+0xd0>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e2:	4b22      	ldr	r3, [pc, #136]	; (800076c <MX_GPIO_Init+0xd0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a21      	ldr	r2, [pc, #132]	; (800076c <MX_GPIO_Init+0xd0>)
 80006e8:	f043 0308 	orr.w	r3, r3, #8
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b1f      	ldr	r3, [pc, #124]	; (800076c <MX_GPIO_Init+0xd0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_GPIO_Init+0xd0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a1b      	ldr	r2, [pc, #108]	; (800076c <MX_GPIO_Init+0xd0>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <MX_GPIO_Init+0xd0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2120      	movs	r1, #32
 8000716:	4816      	ldr	r0, [pc, #88]	; (8000770 <MX_GPIO_Init+0xd4>)
 8000718:	f003 fe24 	bl	8004364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800071c:	2320      	movs	r3, #32
 800071e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000720:	2301      	movs	r3, #1
 8000722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000724:	2302      	movs	r3, #2
 8000726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000728:	2300      	movs	r3, #0
 800072a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4619      	mov	r1, r3
 8000732:	480f      	ldr	r0, [pc, #60]	; (8000770 <MX_GPIO_Init+0xd4>)
 8000734:	f003 fb5e 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8000738:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800073c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800073e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000742:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000744:	2302      	movs	r3, #2
 8000746:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4619      	mov	r1, r3
 800074e:	4809      	ldr	r0, [pc, #36]	; (8000774 <MX_GPIO_Init+0xd8>)
 8000750:	f003 fb50 	bl	8003df4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000754:	2200      	movs	r2, #0
 8000756:	2100      	movs	r1, #0
 8000758:	2028      	movs	r0, #40	; 0x28
 800075a:	f002 fece 	bl	80034fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800075e:	2028      	movs	r0, #40	; 0x28
 8000760:	f002 fee7 	bl	8003532 <HAL_NVIC_EnableIRQ>

}
 8000764:	bf00      	nop
 8000766:	3728      	adds	r7, #40	; 0x28
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40023800 	.word	0x40023800
 8000770:	40020c00 	.word	0x40020c00
 8000774:	40022000 	.word	0x40022000

08000778 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800077c:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <MX_I2C3_Init+0x74>)
 800077e:	4a1c      	ldr	r2, [pc, #112]	; (80007f0 <MX_I2C3_Init+0x78>)
 8000780:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000782:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <MX_I2C3_Init+0x74>)
 8000784:	4a1b      	ldr	r2, [pc, #108]	; (80007f4 <MX_I2C3_Init+0x7c>)
 8000786:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <MX_I2C3_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_I2C3_Init+0x74>)
 8000790:	2201      	movs	r2, #1
 8000792:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MX_I2C3_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_I2C3_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <MX_I2C3_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_I2C3_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_I2C3_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007b2:	480e      	ldr	r0, [pc, #56]	; (80007ec <MX_I2C3_Init+0x74>)
 80007b4:	f005 fb4e 	bl	8005e54 <HAL_I2C_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80007be:	f000 f975 	bl	8000aac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007c2:	2100      	movs	r1, #0
 80007c4:	4809      	ldr	r0, [pc, #36]	; (80007ec <MX_I2C3_Init+0x74>)
 80007c6:	f006 f8db 	bl	8006980 <HAL_I2CEx_ConfigAnalogFilter>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80007d0:	f000 f96c 	bl	8000aac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80007d4:	2100      	movs	r1, #0
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_I2C3_Init+0x74>)
 80007d8:	f006 f91d 	bl	8006a16 <HAL_I2CEx_ConfigDigitalFilter>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80007e2:	f000 f963 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200004ac 	.word	0x200004ac
 80007f0:	40005c00 	.word	0x40005c00
 80007f4:	00c0eaff 	.word	0x00c0eaff

080007f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b0aa      	sub	sp, #168	; 0xa8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	2284      	movs	r2, #132	; 0x84
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f010 f949 	bl	8010ab0 <memset>
  if(i2cHandle->Instance==I2C3)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a22      	ldr	r2, [pc, #136]	; (80008ac <HAL_I2C_MspInit+0xb4>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d13c      	bne.n	80008a2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000828:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800082c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800082e:	2300      	movs	r3, #0
 8000830:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000832:	f107 0310 	add.w	r3, r7, #16
 8000836:	4618      	mov	r0, r3
 8000838:	f006 fde0 	bl	80073fc <HAL_RCCEx_PeriphCLKConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000842:	f000 f933 	bl	8000aac <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <HAL_I2C_MspInit+0xb8>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a19      	ldr	r2, [pc, #100]	; (80008b0 <HAL_I2C_MspInit+0xb8>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <HAL_I2C_MspInit+0xb8>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800085e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000862:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000866:	2312      	movs	r3, #18
 8000868:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800086c:	2301      	movs	r3, #1
 800086e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000872:	2303      	movs	r3, #3
 8000874:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000878:	2304      	movs	r3, #4
 800087a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800087e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000882:	4619      	mov	r1, r3
 8000884:	480b      	ldr	r0, [pc, #44]	; (80008b4 <HAL_I2C_MspInit+0xbc>)
 8000886:	f003 fab5 	bl	8003df4 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <HAL_I2C_MspInit+0xb8>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <HAL_I2C_MspInit+0xb8>)
 8000890:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000894:	6413      	str	r3, [r2, #64]	; 0x40
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_I2C_MspInit+0xb8>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80008a2:	bf00      	nop
 80008a4:	37a8      	adds	r7, #168	; 0xa8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40005c00 	.word	0x40005c00
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40021c00 	.word	0x40021c00

080008b8 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a0a      	ldr	r2, [pc, #40]	; (80008f0 <HAL_I2C_MspDeInit+0x38>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d10e      	bne.n	80008e8 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80008ca:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <HAL_I2C_MspDeInit+0x3c>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	4a09      	ldr	r2, [pc, #36]	; (80008f4 <HAL_I2C_MspDeInit+0x3c>)
 80008d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80008d4:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 80008d6:	2180      	movs	r1, #128	; 0x80
 80008d8:	4807      	ldr	r0, [pc, #28]	; (80008f8 <HAL_I2C_MspDeInit+0x40>)
 80008da:	f003 fc37 	bl	800414c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 80008de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <HAL_I2C_MspDeInit+0x40>)
 80008e4:	f003 fc32 	bl	800414c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40005c00 	.word	0x40005c00
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40021c00 	.word	0x40021c00

080008fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
//  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000900:	f002 fc90 	bl	8003224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000904:	f000 f838 	bl	8000978 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000908:	f000 f8a4 	bl	8000a54 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */
//  AUDIO_InitApplication();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090c:	f7ff fec6 	bl	800069c <MX_GPIO_Init>
  MX_DMA_Init();
 8000910:	f7ff fdf8 	bl	8000504 <MX_DMA_Init>
  MX_I2C3_Init();
 8000914:	f7ff ff30 	bl	8000778 <MX_I2C3_Init>
  MX_SAI2_Init();
 8000918:	f000 f8ce 	bl	8000ab8 <MX_SAI2_Init>
  MX_FATFS_Init();
 800091c:	f008 ffb2 	bl	8009884 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000920:	f00f fcd0 	bl	80102c4 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000924:	f00f fcf4 	bl	8010310 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if(Appli_state == APPLICATION_READY)
 8000928:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <main+0x68>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b02      	cmp	r3, #2
 800092e:	d1f9      	bne.n	8000924 <main+0x28>
    {
    	f_mount(&USBHFatFS,USBHPath,1);
 8000930:	2201      	movs	r2, #1
 8000932:	490d      	ldr	r1, [pc, #52]	; (8000968 <main+0x6c>)
 8000934:	480d      	ldr	r0, [pc, #52]	; (800096c <main+0x70>)
 8000936:	f00e fcd9 	bl	800f2ec <f_mount>
    	AUDIO_PLAYER_Start(0);
 800093a:	2000      	movs	r0, #0
 800093c:	f000 fa7e 	bl	8000e3c <AUDIO_PLAYER_Start>
    	while(false == IsFinished)
 8000940:	e008      	b.n	8000954 <main+0x58>
    	{
    		AUDIO_PLAYER_Process();
 8000942:	f000 fac9 	bl	8000ed8 <AUDIO_PLAYER_Process>
    		if(AudioState ==  AUDIO_STATE_STOP)
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <main+0x74>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b0a      	cmp	r3, #10
 800094c:	d102      	bne.n	8000954 <main+0x58>
    		{
    			IsFinished = true;
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <main+0x78>)
 8000950:	2201      	movs	r2, #1
 8000952:	701a      	strb	r2, [r3, #0]
    	while(false == IsFinished)
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <main+0x78>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	f083 0301 	eor.w	r3, r3, #1
 800095c:	b2db      	uxtb	r3, r3
 800095e:	2b00      	cmp	r3, #0
 8000960:	d1ef      	bne.n	8000942 <main+0x46>
    MX_USB_HOST_Process();
 8000962:	e7df      	b.n	8000924 <main+0x28>
 8000964:	2000326c 	.word	0x2000326c
 8000968:	20002a28 	.word	0x20002a28
 800096c:	20002a2c 	.word	0x20002a2c
 8000970:	200025fa 	.word	0x200025fa
 8000974:	20000500 	.word	0x20000500

08000978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b094      	sub	sp, #80	; 0x50
 800097c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097e:	f107 0320 	add.w	r3, r7, #32
 8000982:	2230      	movs	r2, #48	; 0x30
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f010 f892 	bl	8010ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800099c:	4b2b      	ldr	r3, [pc, #172]	; (8000a4c <SystemClock_Config+0xd4>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	4a2a      	ldr	r2, [pc, #168]	; (8000a4c <SystemClock_Config+0xd4>)
 80009a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a6:	6413      	str	r3, [r2, #64]	; 0x40
 80009a8:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <SystemClock_Config+0xd4>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b4:	4b26      	ldr	r3, [pc, #152]	; (8000a50 <SystemClock_Config+0xd8>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a25      	ldr	r2, [pc, #148]	; (8000a50 <SystemClock_Config+0xd8>)
 80009ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	4b23      	ldr	r3, [pc, #140]	; (8000a50 <SystemClock_Config+0xd8>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009cc:	2301      	movs	r3, #1
 80009ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d6:	2302      	movs	r3, #2
 80009d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80009e0:	2319      	movs	r3, #25
 80009e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80009e4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80009e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ea:	2302      	movs	r3, #2
 80009ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80009ee:	2308      	movs	r3, #8
 80009f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f2:	f107 0320 	add.w	r3, r7, #32
 80009f6:	4618      	mov	r0, r3
 80009f8:	f006 f8aa 	bl	8006b50 <HAL_RCC_OscConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000a02:	f000 f853 	bl	8000aac <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a06:	f006 f853 	bl	8006ab0 <HAL_PWREx_EnableOverDrive>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a10:	f000 f84c 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a14:	230f      	movs	r3, #15
 8000a16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a20:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	2106      	movs	r1, #6
 8000a32:	4618      	mov	r0, r3
 8000a34:	f006 fb30 	bl	8007098 <HAL_RCC_ClockConfig>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a3e:	f000 f835 	bl	8000aac <Error_Handler>
  }
}
 8000a42:	bf00      	nop
 8000a44:	3750      	adds	r7, #80	; 0x50
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40007000 	.word	0x40007000

08000a54 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b0a2      	sub	sp, #136	; 0x88
 8000a58:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2284      	movs	r2, #132	; 0x84
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f010 f825 	bl	8010ab0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_CLK48;
 8000a66:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8000a6a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000a6c:	23c0      	movs	r3, #192	; 0xc0
 8000a6e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000a70:	2305      	movs	r3, #5
 8000a72:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 4;
 8000a74:	2304      	movs	r3, #4
 8000a76:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000a80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a84:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000a86:	2300      	movs	r3, #0
 8000a88:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000a8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	4618      	mov	r0, r3
 8000a96:	f006 fcb1 	bl	80073fc <HAL_RCCEx_PeriphCLKConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 8000aa0:	f000 f804 	bl	8000aac <Error_Handler>
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	3788      	adds	r7, #136	; 0x88
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <Error_Handler+0x8>
	...

08000ab8 <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockA2;
DMA_HandleTypeDef hdma_sai2_a;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8000abc:	4b2b      	ldr	r3, [pc, #172]	; (8000b6c <MX_SAI2_Init+0xb4>)
 8000abe:	4a2c      	ldr	r2, [pc, #176]	; (8000b70 <MX_SAI2_Init+0xb8>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000ac2:	4b2a      	ldr	r3, [pc, #168]	; (8000b6c <MX_SAI2_Init+0xb4>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000ac8:	4b28      	ldr	r3, [pc, #160]	; (8000b6c <MX_SAI2_Init+0xb4>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 8000ace:	4b27      	ldr	r3, [pc, #156]	; (8000b6c <MX_SAI2_Init+0xb4>)
 8000ad0:	2280      	movs	r2, #128	; 0x80
 8000ad2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000ad4:	4b25      	ldr	r3, [pc, #148]	; (8000b6c <MX_SAI2_Init+0xb4>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8000ada:	4b24      	ldr	r3, [pc, #144]	; (8000b6c <MX_SAI2_Init+0xb4>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <MX_SAI2_Init+0xb4>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <MX_SAI2_Init+0xb4>)
 8000ae8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aec:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000aee:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <MX_SAI2_Init+0xb4>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8000af4:	4b1d      	ldr	r3, [pc, #116]	; (8000b6c <MX_SAI2_Init+0xb4>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8000afa:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <MX_SAI2_Init+0xb4>)
 8000afc:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000b00:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <MX_SAI2_Init+0xb4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b08:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <MX_SAI2_Init+0xb4>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <MX_SAI2_Init+0xb4>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000b14:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <MX_SAI2_Init+0xb4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 64;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <MX_SAI2_Init+0xb4>)
 8000b1c:	2240      	movs	r2, #64	; 0x40
 8000b1e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <MX_SAI2_Init+0xb4>)
 8000b22:	2220      	movs	r2, #32
 8000b24:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_SAI2_Init+0xb4>)
 8000b28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b2c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <MX_SAI2_Init+0xb4>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8000b34:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <MX_SAI2_Init+0xb4>)
 8000b36:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b3a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <MX_SAI2_Init+0xb4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <MX_SAI2_Init+0xb4>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 4;
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <MX_SAI2_Init+0xb4>)
 8000b4a:	2204      	movs	r2, #4
 8000b4c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x0000FFFF;
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <MX_SAI2_Init+0xb4>)
 8000b50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b54:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_SAI2_Init+0xb4>)
 8000b58:	f007 fa8c 	bl	8008074 <HAL_SAI_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_SAI2_Init+0xae>
  {
    Error_Handler();
 8000b62:	f7ff ffa3 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000504 	.word	0x20000504
 8000b70:	40015c04 	.word	0x40015c04

08000b74 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a36      	ldr	r2, [pc, #216]	; (8000c5c <HAL_SAI_MspInit+0xe8>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d165      	bne.n	8000c52 <HAL_SAI_MspInit+0xde>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8000b86:	4b36      	ldr	r3, [pc, #216]	; (8000c60 <HAL_SAI_MspInit+0xec>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d10b      	bne.n	8000ba6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000b8e:	4b35      	ldr	r3, [pc, #212]	; (8000c64 <HAL_SAI_MspInit+0xf0>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	4a34      	ldr	r2, [pc, #208]	; (8000c64 <HAL_SAI_MspInit+0xf0>)
 8000b94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b98:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9a:	4b32      	ldr	r3, [pc, #200]	; (8000c64 <HAL_SAI_MspInit+0xf0>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 8000ba6:	4b2e      	ldr	r3, [pc, #184]	; (8000c60 <HAL_SAI_MspInit+0xec>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	3301      	adds	r3, #1
 8000bac:	4a2c      	ldr	r2, [pc, #176]	; (8000c60 <HAL_SAI_MspInit+0xec>)
 8000bae:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6;
 8000bb0:	23f0      	movs	r3, #240	; 0xf0
 8000bb2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000bc0:	230a      	movs	r3, #10
 8000bc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bc4:	f107 030c 	add.w	r3, r7, #12
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4827      	ldr	r0, [pc, #156]	; (8000c68 <HAL_SAI_MspInit+0xf4>)
 8000bcc:	f003 f912 	bl	8003df4 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 8000bd0:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <HAL_SAI_MspInit+0xf8>)
 8000bd2:	4a27      	ldr	r2, [pc, #156]	; (8000c70 <HAL_SAI_MspInit+0xfc>)
 8000bd4:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 8000bd6:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <HAL_SAI_MspInit+0xf8>)
 8000bd8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000bdc:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bde:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <HAL_SAI_MspInit+0xf8>)
 8000be0:	2240      	movs	r2, #64	; 0x40
 8000be2:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be4:	4b21      	ldr	r3, [pc, #132]	; (8000c6c <HAL_SAI_MspInit+0xf8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000bea:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <HAL_SAI_MspInit+0xf8>)
 8000bec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bf0:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bf2:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <HAL_SAI_MspInit+0xf8>)
 8000bf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bf8:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <HAL_SAI_MspInit+0xf8>)
 8000bfc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c00:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000c02:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <HAL_SAI_MspInit+0xf8>)
 8000c04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c08:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <HAL_SAI_MspInit+0xf8>)
 8000c0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c10:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <HAL_SAI_MspInit+0xf8>)
 8000c14:	2204      	movs	r2, #4
 8000c16:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai2_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <HAL_SAI_MspInit+0xf8>)
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai2_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <HAL_SAI_MspInit+0xf8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai2_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <HAL_SAI_MspInit+0xf8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000c2a:	4810      	ldr	r0, [pc, #64]	; (8000c6c <HAL_SAI_MspInit+0xf8>)
 8000c2c:	f002 fc9c 	bl	8003568 <HAL_DMA_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_SAI_MspInit+0xc6>
    {
      Error_Handler();
 8000c36:	f7ff ff39 	bl	8000aac <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <HAL_SAI_MspInit+0xf8>)
 8000c3e:	671a      	str	r2, [r3, #112]	; 0x70
 8000c40:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <HAL_SAI_MspInit+0xf8>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a08      	ldr	r2, [pc, #32]	; (8000c6c <HAL_SAI_MspInit+0xf8>)
 8000c4a:	66da      	str	r2, [r3, #108]	; 0x6c
 8000c4c:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <HAL_SAI_MspInit+0xf8>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8000c52:	bf00      	nop
 8000c54:	3720      	adds	r7, #32
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40015c04 	.word	0x40015c04
 8000c60:	200005e8 	.word	0x200005e8
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40022000 	.word	0x40022000
 8000c6c:	20000588 	.word	0x20000588
 8000c70:	40026470 	.word	0x40026470

08000c74 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* saiHandle)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a11      	ldr	r2, [pc, #68]	; (8000cc8 <HAL_SAI_MspDeInit+0x54>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d11c      	bne.n	8000cc0 <HAL_SAI_MspDeInit+0x4c>
    {
    SAI2_client --;
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <HAL_SAI_MspDeInit+0x58>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	4a0f      	ldr	r2, [pc, #60]	; (8000ccc <HAL_SAI_MspDeInit+0x58>)
 8000c8e:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <HAL_SAI_MspDeInit+0x58>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d105      	bne.n	8000ca4 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI2_CLK_DISABLE();
 8000c98:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <HAL_SAI_MspDeInit+0x5c>)
 8000c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9c:	4a0c      	ldr	r2, [pc, #48]	; (8000cd0 <HAL_SAI_MspDeInit+0x5c>)
 8000c9e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000ca2:	6453      	str	r3, [r2, #68]	; 0x44
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    HAL_GPIO_DeInit(GPIOI, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6);
 8000ca4:	21f0      	movs	r1, #240	; 0xf0
 8000ca6:	480b      	ldr	r0, [pc, #44]	; (8000cd4 <HAL_SAI_MspDeInit+0x60>)
 8000ca8:	f003 fa50 	bl	800414c <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(saiHandle->hdmarx);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f002 fd07 	bl	80036c4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(saiHandle->hdmatx);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f002 fd02 	bl	80036c4 <HAL_DMA_DeInit>
    }
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40015c04 	.word	0x40015c04
 8000ccc:	200005e8 	.word	0x200005e8
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40022000 	.word	0x40022000

08000cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cde:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <HAL_MspInit+0x44>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	4a0e      	ldr	r2, [pc, #56]	; (8000d1c <HAL_MspInit+0x44>)
 8000ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <HAL_MspInit+0x44>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <HAL_MspInit+0x44>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	4a08      	ldr	r2, [pc, #32]	; (8000d1c <HAL_MspInit+0x44>)
 8000cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d00:	6453      	str	r3, [r2, #68]	; 0x44
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_MspInit+0x44>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	40023800 	.word	0x40023800

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <NMI_Handler+0x4>

08000d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <HardFault_Handler+0x4>

08000d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <MemManage_Handler+0x4>

08000d32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <BusFault_Handler+0x4>

08000d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <UsageFault_Handler+0x4>

08000d3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6c:	f002 faa6 	bl	80032bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_USER_Pin);
 8000d78:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000d7c:	f003 fb0c 	bl	8004398 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <DMA2_Stream4_IRQHandler+0x10>)
 8000d8a:	f002 fdc9 	bl	8003920 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000588 	.word	0x20000588

08000d98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <OTG_FS_IRQHandler+0x10>)
 8000d9e:	f003 fd89 	bl	80048b4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20003270 	.word	0x20003270

08000dac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db4:	4a14      	ldr	r2, [pc, #80]	; (8000e08 <_sbrk+0x5c>)
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <_sbrk+0x60>)
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc0:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <_sbrk+0x64>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d102      	bne.n	8000dce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <_sbrk+0x64>)
 8000dca:	4a12      	ldr	r2, [pc, #72]	; (8000e14 <_sbrk+0x68>)
 8000dcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d207      	bcs.n	8000dec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ddc:	f00f feaa 	bl	8010b34 <__errno>
 8000de0:	4603      	mov	r3, r0
 8000de2:	220c      	movs	r2, #12
 8000de4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dea:	e009      	b.n	8000e00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <_sbrk+0x64>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df2:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <_sbrk+0x64>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <_sbrk+0x64>)
 8000dfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20050000 	.word	0x20050000
 8000e0c:	00000400 	.word	0x00000400
 8000e10:	200005ec 	.word	0x200005ec
 8000e14:	200036c0 	.word	0x200036c0

08000e18 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <SystemInit+0x20>)
 8000e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e22:	4a05      	ldr	r2, [pc, #20]	; (8000e38 <SystemInit+0x20>)
 8000e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <AUDIO_PLAYER_Start>:
  * @brief  Starts Audio streaming.    
  * @param  idx: File index
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  uint32_t bytesread;
  
  f_close(&WavFile);
 8000e46:	4820      	ldr	r0, [pc, #128]	; (8000ec8 <AUDIO_PLAYER_Start+0x8c>)
 8000e48:	f00e fe11 	bl	800fa6e <f_close>
  if(AUDIO_GetWavObjectNumber() > idx)
 8000e4c:	f7ff fc18 	bl	8000680 <AUDIO_GetWavObjectNumber>
 8000e50:	4603      	mov	r3, r0
 8000e52:	461a      	mov	r2, r3
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d930      	bls.n	8000ebe <AUDIO_PLAYER_Start+0x82>
  { 
    GetFileInfo(idx, &WaveFormat);
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	491a      	ldr	r1, [pc, #104]	; (8000ecc <AUDIO_PLAYER_Start+0x90>)
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f992 	bl	800118c <GetFileInfo>
    
    /*Adjust the Audio frequency */
    PlayerInit(WaveFormat.SampleRate); 
 8000e68:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <AUDIO_PLAYER_Start+0x90>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 f9bd 	bl	80011ec <PlayerInit>
    
    BufferCtl.state = BUFFER_OFFSET_NONE;
 8000e72:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <AUDIO_PLAYER_Start+0x94>)
 8000e74:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
    
    /* Get Data from USB Flash Disk */
    f_lseek(&WavFile, 0);
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4812      	ldr	r0, [pc, #72]	; (8000ec8 <AUDIO_PLAYER_Start+0x8c>)
 8000e80:	f00e fe1f 	bl	800fac2 <f_lseek>
    
    /* Fill whole buffer at first time */
    if(f_read(&WavFile, 
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e8c:	4910      	ldr	r1, [pc, #64]	; (8000ed0 <AUDIO_PLAYER_Start+0x94>)
 8000e8e:	480e      	ldr	r0, [pc, #56]	; (8000ec8 <AUDIO_PLAYER_Start+0x8c>)
 8000e90:	f00e fc30 	bl	800f6f4 <f_read>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d111      	bne.n	8000ebe <AUDIO_PLAYER_Start+0x82>
              &BufferCtl.buff[0], 
              AUDIO_OUT_BUFFER_SIZE, 
              (void *)&bytesread) == FR_OK)
    {
      AudioState = AUDIO_STATE_PLAY;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <AUDIO_PLAYER_Start+0x98>)
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	701a      	strb	r2, [r3, #0]
      { 
        if(bytesread != 0)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d00b      	beq.n	8000ebe <AUDIO_PLAYER_Start+0x82>
        {
          BSP_AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 8000ea6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eaa:	4809      	ldr	r0, [pc, #36]	; (8000ed0 <AUDIO_PLAYER_Start+0x94>)
 8000eac:	f001 ff32 	bl	8002d14 <BSP_AUDIO_OUT_Play>
          BufferCtl.fptr = bytesread;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <AUDIO_PLAYER_Start+0x94>)
 8000eb4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8000eb8:	6053      	str	r3, [r2, #4]
          return AUDIO_ERROR_NONE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e000      	b.n	8000ec0 <AUDIO_PLAYER_Start+0x84>
        }
      }
    }
  }
  return AUDIO_ERROR_IO;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20002628 	.word	0x20002628
 8000ecc:	200025fc 	.word	0x200025fc
 8000ed0:	200005f0 	.word	0x200005f0
 8000ed4:	200025fa 	.word	0x200025fa

08000ed8 <AUDIO_PLAYER_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_PLAYER_Process(void)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
  uint32_t bytesread;
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  
  switch(AudioState)
 8000ee2:	4b8f      	ldr	r3, [pc, #572]	; (8001120 <AUDIO_PLAYER_Process+0x248>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	3b03      	subs	r3, #3
 8000ee8:	2b0b      	cmp	r3, #11
 8000eea:	f200 810d 	bhi.w	8001108 <AUDIO_PLAYER_Process+0x230>
 8000eee:	a201      	add	r2, pc, #4	; (adr r2, 8000ef4 <AUDIO_PLAYER_Process+0x1c>)
 8000ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef4:	08000f25 	.word	0x08000f25
 8000ef8:	08001109 	.word	0x08001109
 8000efc:	08001109 	.word	0x08001109
 8000f00:	08000fe7 	.word	0x08000fe7
 8000f04:	0800103b 	.word	0x0800103b
 8000f08:	08001109 	.word	0x08001109
 8000f0c:	08001109 	.word	0x08001109
 8000f10:	08000fd5 	.word	0x08000fd5
 8000f14:	08001091 	.word	0x08001091
 8000f18:	0800109d 	.word	0x0800109d
 8000f1c:	080010bd 	.word	0x080010bd
 8000f20:	080010e3 	.word	0x080010e3
  {
  case AUDIO_STATE_PLAY:
    if(BufferCtl.fptr >= WaveFormat.FileSize)
 8000f24:	4b7f      	ldr	r3, [pc, #508]	; (8001124 <AUDIO_PLAYER_Process+0x24c>)
 8000f26:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	4b7e      	ldr	r3, [pc, #504]	; (8001128 <AUDIO_PLAYER_Process+0x250>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d305      	bcc.n	8000f40 <AUDIO_PLAYER_Process+0x68>
    {
      BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8000f34:	2002      	movs	r0, #2
 8000f36:	f001 ff43 	bl	8002dc0 <BSP_AUDIO_OUT_Stop>
      AudioState = AUDIO_STATE_NEXT;
 8000f3a:	4b79      	ldr	r3, [pc, #484]	; (8001120 <AUDIO_PLAYER_Process+0x248>)
 8000f3c:	2206      	movs	r2, #6
 8000f3e:	701a      	strb	r2, [r3, #0]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_HALF)
 8000f40:	4b78      	ldr	r3, [pc, #480]	; (8001124 <AUDIO_PLAYER_Process+0x24c>)
 8000f42:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d11d      	bne.n	8000f88 <AUDIO_PLAYER_Process+0xb0>
    {
      if(f_read(&WavFile, 
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f52:	4974      	ldr	r1, [pc, #464]	; (8001124 <AUDIO_PLAYER_Process+0x24c>)
 8000f54:	4875      	ldr	r0, [pc, #468]	; (800112c <AUDIO_PLAYER_Process+0x254>)
 8000f56:	f00e fbcd 	bl	800f6f4 <f_read>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d004      	beq.n	8000f6a <AUDIO_PLAYER_Process+0x92>
                &BufferCtl.buff[0], 
                AUDIO_OUT_BUFFER_SIZE/2, 
                (void *)&bytesread) != FR_OK)
      { 
        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW); 
 8000f60:	2002      	movs	r0, #2
 8000f62:	f001 ff2d 	bl	8002dc0 <BSP_AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8000f66:	2301      	movs	r3, #1
 8000f68:	e0d6      	b.n	8001118 <AUDIO_PLAYER_Process+0x240>
      } 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8000f6a:	4b6e      	ldr	r3, [pc, #440]	; (8001124 <AUDIO_PLAYER_Process+0x24c>)
 8000f6c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8000f74:	4b6b      	ldr	r3, [pc, #428]	; (8001124 <AUDIO_PLAYER_Process+0x24c>)
 8000f76:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	4a68      	ldr	r2, [pc, #416]	; (8001124 <AUDIO_PLAYER_Process+0x24c>)
 8000f82:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8000f86:	6053      	str	r3, [r2, #4]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_FULL)
 8000f88:	4b66      	ldr	r3, [pc, #408]	; (8001124 <AUDIO_PLAYER_Process+0x24c>)
 8000f8a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	f040 80bb 	bne.w	800110c <AUDIO_PLAYER_Process+0x234>
    {
      if(f_read(&WavFile, 
 8000f96:	463b      	mov	r3, r7
 8000f98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f9c:	4964      	ldr	r1, [pc, #400]	; (8001130 <AUDIO_PLAYER_Process+0x258>)
 8000f9e:	4863      	ldr	r0, [pc, #396]	; (800112c <AUDIO_PLAYER_Process+0x254>)
 8000fa0:	f00e fba8 	bl	800f6f4 <f_read>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d004      	beq.n	8000fb4 <AUDIO_PLAYER_Process+0xdc>
                &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE /2], 
                AUDIO_OUT_BUFFER_SIZE/2, 
                (void *)&bytesread) != FR_OK)
      { 
        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW); 
 8000faa:	2002      	movs	r0, #2
 8000fac:	f001 ff08 	bl	8002dc0 <BSP_AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e0b1      	b.n	8001118 <AUDIO_PLAYER_Process+0x240>
      } 
 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8000fb4:	4b5b      	ldr	r3, [pc, #364]	; (8001124 <AUDIO_PLAYER_Process+0x24c>)
 8000fb6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8000fbe:	4b59      	ldr	r3, [pc, #356]	; (8001124 <AUDIO_PLAYER_Process+0x24c>)
 8000fc0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	4413      	add	r3, r2
 8000fca:	4a56      	ldr	r2, [pc, #344]	; (8001124 <AUDIO_PLAYER_Process+0x24c>)
 8000fcc:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8000fd0:	6053      	str	r3, [r2, #4]
    }
    break;
 8000fd2:	e09b      	b.n	800110c <AUDIO_PLAYER_Process+0x234>
    
  case AUDIO_STATE_STOP:
    BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8000fd4:	2002      	movs	r0, #2
 8000fd6:	f001 fef3 	bl	8002dc0 <BSP_AUDIO_OUT_Stop>
    AudioState = AUDIO_STATE_IDLE; 
 8000fda:	4b51      	ldr	r3, [pc, #324]	; (8001120 <AUDIO_PLAYER_Process+0x248>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
    audio_error = AUDIO_ERROR_IO;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	71fb      	strb	r3, [r7, #7]
    break;
 8000fe4:	e097      	b.n	8001116 <AUDIO_PLAYER_Process+0x23e>
    
  case AUDIO_STATE_NEXT:
    if(++FilePos >= AUDIO_GetWavObjectNumber())
 8000fe6:	4b53      	ldr	r3, [pc, #332]	; (8001134 <AUDIO_PLAYER_Process+0x25c>)
 8000fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	3301      	adds	r3, #1
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	b21a      	sxth	r2, r3
 8000ff4:	4b4f      	ldr	r3, [pc, #316]	; (8001134 <AUDIO_PLAYER_Process+0x25c>)
 8000ff6:	801a      	strh	r2, [r3, #0]
 8000ff8:	4b4e      	ldr	r3, [pc, #312]	; (8001134 <AUDIO_PLAYER_Process+0x25c>)
 8000ffa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ffe:	461c      	mov	r4, r3
 8001000:	f7ff fb3e 	bl	8000680 <AUDIO_GetWavObjectNumber>
 8001004:	4603      	mov	r3, r0
 8001006:	429c      	cmp	r4, r3
 8001008:	db02      	blt.n	8001010 <AUDIO_PLAYER_Process+0x138>
    {
      FilePos = 0; 
 800100a:	4b4a      	ldr	r3, [pc, #296]	; (8001134 <AUDIO_PLAYER_Process+0x25c>)
 800100c:	2200      	movs	r2, #0
 800100e:	801a      	strh	r2, [r3, #0]
    }
    BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001010:	2002      	movs	r0, #2
 8001012:	f001 fed5 	bl	8002dc0 <BSP_AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8001016:	4b47      	ldr	r3, [pc, #284]	; (8001134 <AUDIO_PLAYER_Process+0x25c>)
 8001018:	f9b3 3000 	ldrsh.w	r3, [r3]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff ff0c 	bl	8000e3c <AUDIO_PLAYER_Start>
    if(uwVolume == 0)
 8001024:	4b44      	ldr	r3, [pc, #272]	; (8001138 <AUDIO_PLAYER_Process+0x260>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d171      	bne.n	8001110 <AUDIO_PLAYER_Process+0x238>
    {
      BSP_AUDIO_OUT_SetVolume(uwVolume);
 800102c:	4b42      	ldr	r3, [pc, #264]	; (8001138 <AUDIO_PLAYER_Process+0x260>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f001 fee6 	bl	8002e04 <BSP_AUDIO_OUT_SetVolume>
    }
    break;    
 8001038:	e06a      	b.n	8001110 <AUDIO_PLAYER_Process+0x238>
    
  case AUDIO_STATE_PREVIOUS:
    if(--FilePos < 0)
 800103a:	4b3e      	ldr	r3, [pc, #248]	; (8001134 <AUDIO_PLAYER_Process+0x25c>)
 800103c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001040:	b29b      	uxth	r3, r3
 8001042:	3b01      	subs	r3, #1
 8001044:	b29b      	uxth	r3, r3
 8001046:	b21a      	sxth	r2, r3
 8001048:	4b3a      	ldr	r3, [pc, #232]	; (8001134 <AUDIO_PLAYER_Process+0x25c>)
 800104a:	801a      	strh	r2, [r3, #0]
 800104c:	4b39      	ldr	r3, [pc, #228]	; (8001134 <AUDIO_PLAYER_Process+0x25c>)
 800104e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001052:	2b00      	cmp	r3, #0
 8001054:	da07      	bge.n	8001066 <AUDIO_PLAYER_Process+0x18e>
    {
      FilePos = AUDIO_GetWavObjectNumber() - 1; 
 8001056:	f7ff fb13 	bl	8000680 <AUDIO_GetWavObjectNumber>
 800105a:	4603      	mov	r3, r0
 800105c:	3b01      	subs	r3, #1
 800105e:	b29b      	uxth	r3, r3
 8001060:	b21a      	sxth	r2, r3
 8001062:	4b34      	ldr	r3, [pc, #208]	; (8001134 <AUDIO_PLAYER_Process+0x25c>)
 8001064:	801a      	strh	r2, [r3, #0]
    }
    BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001066:	2002      	movs	r0, #2
 8001068:	f001 feaa 	bl	8002dc0 <BSP_AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 800106c:	4b31      	ldr	r3, [pc, #196]	; (8001134 <AUDIO_PLAYER_Process+0x25c>)
 800106e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fee1 	bl	8000e3c <AUDIO_PLAYER_Start>
    if(uwVolume == 0)
 800107a:	4b2f      	ldr	r3, [pc, #188]	; (8001138 <AUDIO_PLAYER_Process+0x260>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d148      	bne.n	8001114 <AUDIO_PLAYER_Process+0x23c>
    {
      BSP_AUDIO_OUT_SetVolume(uwVolume);
 8001082:	4b2d      	ldr	r3, [pc, #180]	; (8001138 <AUDIO_PLAYER_Process+0x260>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	4618      	mov	r0, r3
 800108a:	f001 febb 	bl	8002e04 <BSP_AUDIO_OUT_SetVolume>
    }
    break;   
 800108e:	e041      	b.n	8001114 <AUDIO_PLAYER_Process+0x23c>
    
  case AUDIO_STATE_PAUSE:
    BSP_AUDIO_OUT_Pause();
 8001090:	f001 fe6a 	bl	8002d68 <BSP_AUDIO_OUT_Pause>
    AudioState = AUDIO_STATE_WAIT;
 8001094:	4b22      	ldr	r3, [pc, #136]	; (8001120 <AUDIO_PLAYER_Process+0x248>)
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
    break;
 800109a:	e03c      	b.n	8001116 <AUDIO_PLAYER_Process+0x23e>
    
  case AUDIO_STATE_RESUME:
    BSP_AUDIO_OUT_Resume();
 800109c:	f001 fe7a 	bl	8002d94 <BSP_AUDIO_OUT_Resume>
    if(uwVolume == 0)
 80010a0:	4b25      	ldr	r3, [pc, #148]	; (8001138 <AUDIO_PLAYER_Process+0x260>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d105      	bne.n	80010b4 <AUDIO_PLAYER_Process+0x1dc>
    {
      BSP_AUDIO_OUT_SetVolume(uwVolume);
 80010a8:	4b23      	ldr	r3, [pc, #140]	; (8001138 <AUDIO_PLAYER_Process+0x260>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f001 fea8 	bl	8002e04 <BSP_AUDIO_OUT_SetVolume>
    }
    AudioState = AUDIO_STATE_PLAY;
 80010b4:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <AUDIO_PLAYER_Process+0x248>)
 80010b6:	2203      	movs	r2, #3
 80010b8:	701a      	strb	r2, [r3, #0]
    break;
 80010ba:	e02c      	b.n	8001116 <AUDIO_PLAYER_Process+0x23e>
    
  case AUDIO_STATE_VOLUME_UP: 
    if( uwVolume <= 90)
 80010bc:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <AUDIO_PLAYER_Process+0x260>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b5a      	cmp	r3, #90	; 0x5a
 80010c2:	d804      	bhi.n	80010ce <AUDIO_PLAYER_Process+0x1f6>
    {
      uwVolume += 10;
 80010c4:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <AUDIO_PLAYER_Process+0x260>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	330a      	adds	r3, #10
 80010ca:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <AUDIO_PLAYER_Process+0x260>)
 80010cc:	6013      	str	r3, [r2, #0]
    }
    BSP_AUDIO_OUT_SetVolume(uwVolume);
 80010ce:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <AUDIO_PLAYER_Process+0x260>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	4618      	mov	r0, r3
 80010d6:	f001 fe95 	bl	8002e04 <BSP_AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <AUDIO_PLAYER_Process+0x248>)
 80010dc:	2203      	movs	r2, #3
 80010de:	701a      	strb	r2, [r3, #0]
    break;
 80010e0:	e019      	b.n	8001116 <AUDIO_PLAYER_Process+0x23e>
    
  case AUDIO_STATE_VOLUME_DOWN:    
    if( uwVolume >= 10)
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <AUDIO_PLAYER_Process+0x260>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b09      	cmp	r3, #9
 80010e8:	d904      	bls.n	80010f4 <AUDIO_PLAYER_Process+0x21c>
    {
      uwVolume -= 10;
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <AUDIO_PLAYER_Process+0x260>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	3b0a      	subs	r3, #10
 80010f0:	4a11      	ldr	r2, [pc, #68]	; (8001138 <AUDIO_PLAYER_Process+0x260>)
 80010f2:	6013      	str	r3, [r2, #0]
    }
    BSP_AUDIO_OUT_SetVolume(uwVolume);
 80010f4:	4b10      	ldr	r3, [pc, #64]	; (8001138 <AUDIO_PLAYER_Process+0x260>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f001 fe82 	bl	8002e04 <BSP_AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <AUDIO_PLAYER_Process+0x248>)
 8001102:	2203      	movs	r2, #3
 8001104:	701a      	strb	r2, [r3, #0]
    break;
 8001106:	e006      	b.n	8001116 <AUDIO_PLAYER_Process+0x23e>
    
  case AUDIO_STATE_WAIT:
  case AUDIO_STATE_IDLE:
  case AUDIO_STATE_INIT:    
  default:
    break;
 8001108:	bf00      	nop
 800110a:	e004      	b.n	8001116 <AUDIO_PLAYER_Process+0x23e>
    break;
 800110c:	bf00      	nop
 800110e:	e002      	b.n	8001116 <AUDIO_PLAYER_Process+0x23e>
    break;    
 8001110:	bf00      	nop
 8001112:	e000      	b.n	8001116 <AUDIO_PLAYER_Process+0x23e>
    break;   
 8001114:	bf00      	nop
  }
  return audio_error;
 8001116:	79fb      	ldrb	r3, [r7, #7]
}
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	bd90      	pop	{r4, r7, pc}
 8001120:	200025fa 	.word	0x200025fa
 8001124:	200005f0 	.word	0x200005f0
 8001128:	200025fc 	.word	0x200025fc
 800112c:	20002628 	.word	0x20002628
 8001130:	200015f0 	.word	0x200015f0
 8001134:	200025f8 	.word	0x200025f8
 8001138:	20000004 	.word	0x20000004

0800113c <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x20>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b03      	cmp	r3, #3
 8001146:	d104      	bne.n	8001152 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_FULL;
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x24>)
 800114a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800114e:	2202      	movs	r2, #2
 8001150:	701a      	strb	r2, [r3, #0]
  }
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	200025fa 	.word	0x200025fa
 8001160:	200005f0 	.word	0x200005f0

08001164 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b03      	cmp	r3, #3
 800116e:	d104      	bne.n	800117a <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_HALF;
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 8001172:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001176:	2201      	movs	r2, #1
 8001178:	701a      	strb	r2, [r3, #0]
  }
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	200025fa 	.word	0x200025fa
 8001188:	200005f0 	.word	0x200005f0

0800118c <GetFileInfo>:
  * @param  file_idx: File index
  * @param  info: Pointer to WAV file info
  * @retval Audio error
  */
static AUDIO_ErrorTypeDef GetFileInfo(uint16_t file_idx, WAVE_FormatTypeDef *info)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	80fb      	strh	r3, [r7, #6]
  uint32_t bytesread;
  
  if(f_open(&WavFile, (char *)FileList.file[file_idx].name, FA_OPEN_EXISTING | FA_READ) == FR_OK) 
 8001198:	88fa      	ldrh	r2, [r7, #6]
 800119a:	4613      	mov	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	4413      	add	r3, r2
 80011a4:	4a0f      	ldr	r2, [pc, #60]	; (80011e4 <GetFileInfo+0x58>)
 80011a6:	4413      	add	r3, r2
 80011a8:	3301      	adds	r3, #1
 80011aa:	2201      	movs	r2, #1
 80011ac:	4619      	mov	r1, r3
 80011ae:	480e      	ldr	r0, [pc, #56]	; (80011e8 <GetFileInfo+0x5c>)
 80011b0:	f00e f8e2 	bl	800f378 <f_open>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10e      	bne.n	80011d8 <GetFileInfo+0x4c>
  {
    /* Fill the buffer to Send */
    if(f_read(&WavFile, info, sizeof(WaveFormat), (void *)&bytesread) == FR_OK)
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	222c      	movs	r2, #44	; 0x2c
 80011c0:	6839      	ldr	r1, [r7, #0]
 80011c2:	4809      	ldr	r0, [pc, #36]	; (80011e8 <GetFileInfo+0x5c>)
 80011c4:	f00e fa96 	bl	800f6f4 <f_read>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <GetFileInfo+0x46>
    {
      return AUDIO_ERROR_NONE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e003      	b.n	80011da <GetFileInfo+0x4e>
    }
    f_close(&WavFile);
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <GetFileInfo+0x5c>)
 80011d4:	f00e fc4b 	bl	800fa6e <f_close>
  }
  return AUDIO_ERROR_IO;
 80011d8:	2301      	movs	r3, #1
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200000d0 	.word	0x200000d0
 80011e8:	20002628 	.word	0x20002628

080011ec <PlayerInit>:
  * @brief  Initializes the Wave player.
  * @param  AudioFreq: Audio sampling frequency
  * @retval None
  */
static uint8_t PlayerInit(uint32_t AudioFreq)
{ 
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */  
  if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0)
 80011f4:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <PlayerInit+0x34>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	4619      	mov	r1, r3
 80011fe:	2003      	movs	r0, #3
 8001200:	f001 fd36 	bl	8002c70 <BSP_AUDIO_OUT_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <PlayerInit+0x22>
  {
    return 1;
 800120a:	2301      	movs	r3, #1
 800120c:	e003      	b.n	8001216 <PlayerInit+0x2a>
  }
  else
  {
    BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 800120e:	2005      	movs	r0, #5
 8001210:	f001 fe10 	bl	8002e34 <BSP_AUDIO_OUT_SetAudioFrameSlot>
    return 0;
 8001214:	2300      	movs	r3, #0
  } 
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000004 	.word	0x20000004

08001224 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001224:	f8df d034 	ldr.w	sp, [pc, #52]	; 800125c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001228:	480d      	ldr	r0, [pc, #52]	; (8001260 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800122a:	490e      	ldr	r1, [pc, #56]	; (8001264 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800122c:	4a0e      	ldr	r2, [pc, #56]	; (8001268 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001230:	e002      	b.n	8001238 <LoopCopyDataInit>

08001232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001236:	3304      	adds	r3, #4

08001238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800123c:	d3f9      	bcc.n	8001232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123e:	4a0b      	ldr	r2, [pc, #44]	; (800126c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001240:	4c0b      	ldr	r4, [pc, #44]	; (8001270 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001244:	e001      	b.n	800124a <LoopFillZerobss>

08001246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001248:	3204      	adds	r2, #4

0800124a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800124c:	d3fb      	bcc.n	8001246 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800124e:	f7ff fde3 	bl	8000e18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001252:	f00f fc75 	bl	8010b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001256:	f7ff fb51 	bl	80008fc <main>
  bx  lr    
 800125a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800125c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001264:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001268:	08011128 	.word	0x08011128
  ldr r2, =_sbss
 800126c:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8001270:	200036bc 	.word	0x200036bc

08001274 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001274:	e7fe      	b.n	8001274 <ADC_IRQHandler>
	...

08001278 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	4603      	mov	r3, r0
 8001282:	81fb      	strh	r3, [r7, #14]
 8001284:	460b      	mov	r3, r1
 8001286:	81bb      	strh	r3, [r7, #12]
 8001288:	4613      	mov	r3, r2
 800128a:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8001290:	89bb      	ldrh	r3, [r7, #12]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8001296:	89bb      	ldrh	r3, [r7, #12]
 8001298:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800129c:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80012a2:	f001 fc71 	bl	8002b88 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 80012a6:	89fb      	ldrh	r3, [r7, #14]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2203      	movs	r2, #3
 80012ac:	f44f 7181 	mov.w	r1, #258	; 0x102
 80012b0:	4618      	mov	r0, r3
 80012b2:	f001 fafb 	bl	80028ac <CODEC_IO_Write>
 80012b6:	4603      	mov	r3, r0
 80012b8:	461a      	mov	r2, r3
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	4413      	add	r3, r2
 80012be:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 80012c0:	89fb      	ldrh	r3, [r7, #14]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2200      	movs	r2, #0
 80012c6:	f640 0117 	movw	r1, #2071	; 0x817
 80012ca:	4618      	mov	r0, r3
 80012cc:	f001 faee 	bl	80028ac <CODEC_IO_Write>
 80012d0:	4603      	mov	r3, r0
 80012d2:	461a      	mov	r2, r3
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	4413      	add	r3, r2
 80012d8:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 80012da:	89fb      	ldrh	r3, [r7, #14]
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2200      	movs	r2, #0
 80012e0:	f44f 7181 	mov.w	r1, #258	; 0x102
 80012e4:	4618      	mov	r0, r3
 80012e6:	f001 fae1 	bl	80028ac <CODEC_IO_Write>
 80012ea:	4603      	mov	r3, r0
 80012ec:	461a      	mov	r2, r3
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	4413      	add	r3, r2
 80012f2:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 80012f4:	89fb      	ldrh	r3, [r7, #14]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	226c      	movs	r2, #108	; 0x6c
 80012fa:	2139      	movs	r1, #57	; 0x39
 80012fc:	4618      	mov	r0, r3
 80012fe:	f001 fad5 	bl	80028ac <CODEC_IO_Write>
 8001302:	4603      	mov	r3, r0
 8001304:	461a      	mov	r2, r3
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	4413      	add	r3, r2
 800130a:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 800130c:	8afb      	ldrh	r3, [r7, #22]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00c      	beq.n	800132c <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8001312:	89fb      	ldrh	r3, [r7, #14]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2213      	movs	r2, #19
 8001318:	2101      	movs	r1, #1
 800131a:	4618      	mov	r0, r3
 800131c:	f001 fac6 	bl	80028ac <CODEC_IO_Write>
 8001320:	4603      	mov	r3, r0
 8001322:	461a      	mov	r2, r3
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	4413      	add	r3, r2
 8001328:	61fb      	str	r3, [r7, #28]
 800132a:	e00b      	b.n	8001344 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 800132c:	89fb      	ldrh	r3, [r7, #14]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2203      	movs	r2, #3
 8001332:	2101      	movs	r1, #1
 8001334:	4618      	mov	r0, r3
 8001336:	f001 fab9 	bl	80028ac <CODEC_IO_Write>
 800133a:	4603      	mov	r3, r0
 800133c:	461a      	mov	r2, r3
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	4413      	add	r3, r2
 8001342:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8001344:	2032      	movs	r0, #50	; 0x32
 8001346:	f001 fc87 	bl	8002c58 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 800134a:	8b3b      	ldrh	r3, [r7, #24]
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 815f 	beq.w	8001610 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8001352:	4bae      	ldr	r3, [pc, #696]	; (800160c <wm8994_Init+0x394>)
 8001354:	2201      	movs	r2, #1
 8001356:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8001358:	8b3b      	ldrh	r3, [r7, #24]
 800135a:	2b03      	cmp	r3, #3
 800135c:	f000 808c 	beq.w	8001478 <wm8994_Init+0x200>
 8001360:	2b03      	cmp	r3, #3
 8001362:	f300 8111 	bgt.w	8001588 <wm8994_Init+0x310>
 8001366:	2b01      	cmp	r3, #1
 8001368:	d002      	beq.n	8001370 <wm8994_Init+0xf8>
 800136a:	2b02      	cmp	r3, #2
 800136c:	d042      	beq.n	80013f4 <wm8994_Init+0x17c>
 800136e:	e10b      	b.n	8001588 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8001370:	89fb      	ldrh	r3, [r7, #14]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	f640 420c 	movw	r2, #3084	; 0xc0c
 8001378:	2105      	movs	r1, #5
 800137a:	4618      	mov	r0, r3
 800137c:	f001 fa96 	bl	80028ac <CODEC_IO_Write>
 8001380:	4603      	mov	r3, r0
 8001382:	461a      	mov	r2, r3
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	4413      	add	r3, r2
 8001388:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800138a:	89fb      	ldrh	r3, [r7, #14]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2200      	movs	r2, #0
 8001390:	f240 6101 	movw	r1, #1537	; 0x601
 8001394:	4618      	mov	r0, r3
 8001396:	f001 fa89 	bl	80028ac <CODEC_IO_Write>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	4413      	add	r3, r2
 80013a2:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80013a4:	89fb      	ldrh	r3, [r7, #14]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2200      	movs	r2, #0
 80013aa:	f240 6102 	movw	r1, #1538	; 0x602
 80013ae:	4618      	mov	r0, r3
 80013b0:	f001 fa7c 	bl	80028ac <CODEC_IO_Write>
 80013b4:	4603      	mov	r3, r0
 80013b6:	461a      	mov	r2, r3
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	4413      	add	r3, r2
 80013bc:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80013be:	89fb      	ldrh	r3, [r7, #14]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2202      	movs	r2, #2
 80013c4:	f240 6104 	movw	r1, #1540	; 0x604
 80013c8:	4618      	mov	r0, r3
 80013ca:	f001 fa6f 	bl	80028ac <CODEC_IO_Write>
 80013ce:	4603      	mov	r3, r0
 80013d0:	461a      	mov	r2, r3
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	4413      	add	r3, r2
 80013d6:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80013d8:	89fb      	ldrh	r3, [r7, #14]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2202      	movs	r2, #2
 80013de:	f240 6105 	movw	r1, #1541	; 0x605
 80013e2:	4618      	mov	r0, r3
 80013e4:	f001 fa62 	bl	80028ac <CODEC_IO_Write>
 80013e8:	4603      	mov	r3, r0
 80013ea:	461a      	mov	r2, r3
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	4413      	add	r3, r2
 80013f0:	61fb      	str	r3, [r7, #28]
      break;
 80013f2:	e110      	b.n	8001616 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80013f4:	89fb      	ldrh	r3, [r7, #14]
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	f240 3203 	movw	r2, #771	; 0x303
 80013fc:	2105      	movs	r1, #5
 80013fe:	4618      	mov	r0, r3
 8001400:	f001 fa54 	bl	80028ac <CODEC_IO_Write>
 8001404:	4603      	mov	r3, r0
 8001406:	461a      	mov	r2, r3
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	4413      	add	r3, r2
 800140c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800140e:	89fb      	ldrh	r3, [r7, #14]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2201      	movs	r2, #1
 8001414:	f240 6101 	movw	r1, #1537	; 0x601
 8001418:	4618      	mov	r0, r3
 800141a:	f001 fa47 	bl	80028ac <CODEC_IO_Write>
 800141e:	4603      	mov	r3, r0
 8001420:	461a      	mov	r2, r3
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	4413      	add	r3, r2
 8001426:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8001428:	89fb      	ldrh	r3, [r7, #14]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2201      	movs	r2, #1
 800142e:	f240 6102 	movw	r1, #1538	; 0x602
 8001432:	4618      	mov	r0, r3
 8001434:	f001 fa3a 	bl	80028ac <CODEC_IO_Write>
 8001438:	4603      	mov	r3, r0
 800143a:	461a      	mov	r2, r3
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	4413      	add	r3, r2
 8001440:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8001442:	89fb      	ldrh	r3, [r7, #14]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2200      	movs	r2, #0
 8001448:	f240 6104 	movw	r1, #1540	; 0x604
 800144c:	4618      	mov	r0, r3
 800144e:	f001 fa2d 	bl	80028ac <CODEC_IO_Write>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	4413      	add	r3, r2
 800145a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800145c:	89fb      	ldrh	r3, [r7, #14]
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2200      	movs	r2, #0
 8001462:	f240 6105 	movw	r1, #1541	; 0x605
 8001466:	4618      	mov	r0, r3
 8001468:	f001 fa20 	bl	80028ac <CODEC_IO_Write>
 800146c:	4603      	mov	r3, r0
 800146e:	461a      	mov	r2, r3
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	4413      	add	r3, r2
 8001474:	61fb      	str	r3, [r7, #28]
      break;
 8001476:	e0ce      	b.n	8001616 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001478:	8afb      	ldrh	r3, [r7, #22]
 800147a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800147e:	d141      	bne.n	8001504 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8001480:	89fb      	ldrh	r3, [r7, #14]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	f640 720f 	movw	r2, #3855	; 0xf0f
 8001488:	2105      	movs	r1, #5
 800148a:	4618      	mov	r0, r3
 800148c:	f001 fa0e 	bl	80028ac <CODEC_IO_Write>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	4413      	add	r3, r2
 8001498:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 800149a:	89fb      	ldrh	r3, [r7, #14]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2203      	movs	r2, #3
 80014a0:	f240 6101 	movw	r1, #1537	; 0x601
 80014a4:	4618      	mov	r0, r3
 80014a6:	f001 fa01 	bl	80028ac <CODEC_IO_Write>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461a      	mov	r2, r3
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	4413      	add	r3, r2
 80014b2:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 80014b4:	89fb      	ldrh	r3, [r7, #14]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2203      	movs	r2, #3
 80014ba:	f240 6102 	movw	r1, #1538	; 0x602
 80014be:	4618      	mov	r0, r3
 80014c0:	f001 f9f4 	bl	80028ac <CODEC_IO_Write>
 80014c4:	4603      	mov	r3, r0
 80014c6:	461a      	mov	r2, r3
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	4413      	add	r3, r2
 80014cc:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 80014ce:	89fb      	ldrh	r3, [r7, #14]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2203      	movs	r2, #3
 80014d4:	f240 6104 	movw	r1, #1540	; 0x604
 80014d8:	4618      	mov	r0, r3
 80014da:	f001 f9e7 	bl	80028ac <CODEC_IO_Write>
 80014de:	4603      	mov	r3, r0
 80014e0:	461a      	mov	r2, r3
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	4413      	add	r3, r2
 80014e6:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 80014e8:	89fb      	ldrh	r3, [r7, #14]
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2203      	movs	r2, #3
 80014ee:	f240 6105 	movw	r1, #1541	; 0x605
 80014f2:	4618      	mov	r0, r3
 80014f4:	f001 f9da 	bl	80028ac <CODEC_IO_Write>
 80014f8:	4603      	mov	r3, r0
 80014fa:	461a      	mov	r2, r3
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	4413      	add	r3, r2
 8001500:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8001502:	e088      	b.n	8001616 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8001504:	89fb      	ldrh	r3, [r7, #14]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	f640 720f 	movw	r2, #3855	; 0xf0f
 800150c:	2105      	movs	r1, #5
 800150e:	4618      	mov	r0, r3
 8001510:	f001 f9cc 	bl	80028ac <CODEC_IO_Write>
 8001514:	4603      	mov	r3, r0
 8001516:	461a      	mov	r2, r3
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	4413      	add	r3, r2
 800151c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800151e:	89fb      	ldrh	r3, [r7, #14]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2201      	movs	r2, #1
 8001524:	f240 6101 	movw	r1, #1537	; 0x601
 8001528:	4618      	mov	r0, r3
 800152a:	f001 f9bf 	bl	80028ac <CODEC_IO_Write>
 800152e:	4603      	mov	r3, r0
 8001530:	461a      	mov	r2, r3
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	4413      	add	r3, r2
 8001536:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8001538:	89fb      	ldrh	r3, [r7, #14]
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2201      	movs	r2, #1
 800153e:	f240 6102 	movw	r1, #1538	; 0x602
 8001542:	4618      	mov	r0, r3
 8001544:	f001 f9b2 	bl	80028ac <CODEC_IO_Write>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	4413      	add	r3, r2
 8001550:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8001552:	89fb      	ldrh	r3, [r7, #14]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2202      	movs	r2, #2
 8001558:	f240 6104 	movw	r1, #1540	; 0x604
 800155c:	4618      	mov	r0, r3
 800155e:	f001 f9a5 	bl	80028ac <CODEC_IO_Write>
 8001562:	4603      	mov	r3, r0
 8001564:	461a      	mov	r2, r3
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	4413      	add	r3, r2
 800156a:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 800156c:	89fb      	ldrh	r3, [r7, #14]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2202      	movs	r2, #2
 8001572:	f240 6105 	movw	r1, #1541	; 0x605
 8001576:	4618      	mov	r0, r3
 8001578:	f001 f998 	bl	80028ac <CODEC_IO_Write>
 800157c:	4603      	mov	r3, r0
 800157e:	461a      	mov	r2, r3
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	4413      	add	r3, r2
 8001584:	61fb      	str	r3, [r7, #28]
      break;
 8001586:	e046      	b.n	8001616 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8001588:	89fb      	ldrh	r3, [r7, #14]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	f240 3203 	movw	r2, #771	; 0x303
 8001590:	2105      	movs	r1, #5
 8001592:	4618      	mov	r0, r3
 8001594:	f001 f98a 	bl	80028ac <CODEC_IO_Write>
 8001598:	4603      	mov	r3, r0
 800159a:	461a      	mov	r2, r3
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	4413      	add	r3, r2
 80015a0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80015a2:	89fb      	ldrh	r3, [r7, #14]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2201      	movs	r2, #1
 80015a8:	f240 6101 	movw	r1, #1537	; 0x601
 80015ac:	4618      	mov	r0, r3
 80015ae:	f001 f97d 	bl	80028ac <CODEC_IO_Write>
 80015b2:	4603      	mov	r3, r0
 80015b4:	461a      	mov	r2, r3
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	4413      	add	r3, r2
 80015ba:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80015bc:	89fb      	ldrh	r3, [r7, #14]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2201      	movs	r2, #1
 80015c2:	f240 6102 	movw	r1, #1538	; 0x602
 80015c6:	4618      	mov	r0, r3
 80015c8:	f001 f970 	bl	80028ac <CODEC_IO_Write>
 80015cc:	4603      	mov	r3, r0
 80015ce:	461a      	mov	r2, r3
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	4413      	add	r3, r2
 80015d4:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80015d6:	89fb      	ldrh	r3, [r7, #14]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2200      	movs	r2, #0
 80015dc:	f240 6104 	movw	r1, #1540	; 0x604
 80015e0:	4618      	mov	r0, r3
 80015e2:	f001 f963 	bl	80028ac <CODEC_IO_Write>
 80015e6:	4603      	mov	r3, r0
 80015e8:	461a      	mov	r2, r3
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	4413      	add	r3, r2
 80015ee:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80015f0:	89fb      	ldrh	r3, [r7, #14]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2200      	movs	r2, #0
 80015f6:	f240 6105 	movw	r1, #1541	; 0x605
 80015fa:	4618      	mov	r0, r3
 80015fc:	f001 f956 	bl	80028ac <CODEC_IO_Write>
 8001600:	4603      	mov	r3, r0
 8001602:	461a      	mov	r2, r3
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	4413      	add	r3, r2
 8001608:	61fb      	str	r3, [r7, #28]
      break;
 800160a:	e004      	b.n	8001616 <wm8994_Init+0x39e>
 800160c:	20002858 	.word	0x20002858
    }
  }
  else
  {
    outputEnabled = 0;
 8001610:	4b99      	ldr	r3, [pc, #612]	; (8001878 <wm8994_Init+0x600>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8001616:	8afb      	ldrh	r3, [r7, #22]
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 81ab 	beq.w	8001974 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 800161e:	4b97      	ldr	r3, [pc, #604]	; (800187c <wm8994_Init+0x604>)
 8001620:	2201      	movs	r2, #1
 8001622:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8001624:	8afb      	ldrh	r3, [r7, #22]
 8001626:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800162a:	f000 8129 	beq.w	8001880 <wm8994_Init+0x608>
 800162e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001632:	f300 819b 	bgt.w	800196c <wm8994_Init+0x6f4>
 8001636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800163a:	d05a      	beq.n	80016f2 <wm8994_Init+0x47a>
 800163c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001640:	f300 8194 	bgt.w	800196c <wm8994_Init+0x6f4>
 8001644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001648:	f000 80c6 	beq.w	80017d8 <wm8994_Init+0x560>
 800164c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001650:	f040 818c 	bne.w	800196c <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8001654:	89fb      	ldrh	r3, [r7, #14]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 800165c:	2104      	movs	r1, #4
 800165e:	4618      	mov	r0, r3
 8001660:	f001 f924 	bl	80028ac <CODEC_IO_Write>
 8001664:	4603      	mov	r3, r0
 8001666:	461a      	mov	r2, r3
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	4413      	add	r3, r2
 800166c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800166e:	89fb      	ldrh	r3, [r7, #14]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	22db      	movs	r2, #219	; 0xdb
 8001674:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8001678:	4618      	mov	r0, r3
 800167a:	f001 f917 	bl	80028ac <CODEC_IO_Write>
 800167e:	4603      	mov	r3, r0
 8001680:	461a      	mov	r2, r3
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	4413      	add	r3, r2
 8001686:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8001688:	89fb      	ldrh	r3, [r7, #14]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8001690:	2102      	movs	r1, #2
 8001692:	4618      	mov	r0, r3
 8001694:	f001 f90a 	bl	80028ac <CODEC_IO_Write>
 8001698:	4603      	mov	r3, r0
 800169a:	461a      	mov	r2, r3
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	4413      	add	r3, r2
 80016a0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80016a2:	89fb      	ldrh	r3, [r7, #14]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2202      	movs	r2, #2
 80016a8:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80016ac:	4618      	mov	r0, r3
 80016ae:	f001 f8fd 	bl	80028ac <CODEC_IO_Write>
 80016b2:	4603      	mov	r3, r0
 80016b4:	461a      	mov	r2, r3
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	4413      	add	r3, r2
 80016ba:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80016bc:	89fb      	ldrh	r3, [r7, #14]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2202      	movs	r2, #2
 80016c2:	f240 6109 	movw	r1, #1545	; 0x609
 80016c6:	4618      	mov	r0, r3
 80016c8:	f001 f8f0 	bl	80028ac <CODEC_IO_Write>
 80016cc:	4603      	mov	r3, r0
 80016ce:	461a      	mov	r2, r3
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	4413      	add	r3, r2
 80016d4:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80016d6:	89fb      	ldrh	r3, [r7, #14]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	220e      	movs	r2, #14
 80016dc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80016e0:	4618      	mov	r0, r3
 80016e2:	f001 f8e3 	bl	80028ac <CODEC_IO_Write>
 80016e6:	4603      	mov	r3, r0
 80016e8:	461a      	mov	r2, r3
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	4413      	add	r3, r2
 80016ee:	61fb      	str	r3, [r7, #28]
      break;
 80016f0:	e143      	b.n	800197a <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 80016f2:	89fb      	ldrh	r3, [r7, #14]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2211      	movs	r2, #17
 80016f8:	2128      	movs	r1, #40	; 0x28
 80016fa:	4618      	mov	r0, r3
 80016fc:	f001 f8d6 	bl	80028ac <CODEC_IO_Write>
 8001700:	4603      	mov	r3, r0
 8001702:	461a      	mov	r2, r3
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	4413      	add	r3, r2
 8001708:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 800170a:	89fb      	ldrh	r3, [r7, #14]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2235      	movs	r2, #53	; 0x35
 8001710:	2129      	movs	r1, #41	; 0x29
 8001712:	4618      	mov	r0, r3
 8001714:	f001 f8ca 	bl	80028ac <CODEC_IO_Write>
 8001718:	4603      	mov	r3, r0
 800171a:	461a      	mov	r2, r3
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	4413      	add	r3, r2
 8001720:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 8001722:	89fb      	ldrh	r3, [r7, #14]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2235      	movs	r2, #53	; 0x35
 8001728:	212a      	movs	r1, #42	; 0x2a
 800172a:	4618      	mov	r0, r3
 800172c:	f001 f8be 	bl	80028ac <CODEC_IO_Write>
 8001730:	4603      	mov	r3, r0
 8001732:	461a      	mov	r2, r3
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	4413      	add	r3, r2
 8001738:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 800173a:	89fb      	ldrh	r3, [r7, #14]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	f240 3203 	movw	r2, #771	; 0x303
 8001742:	2104      	movs	r1, #4
 8001744:	4618      	mov	r0, r3
 8001746:	f001 f8b1 	bl	80028ac <CODEC_IO_Write>
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	4413      	add	r3, r2
 8001752:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8001754:	89fb      	ldrh	r3, [r7, #14]
 8001756:	b2db      	uxtb	r3, r3
 8001758:	22db      	movs	r2, #219	; 0xdb
 800175a:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800175e:	4618      	mov	r0, r3
 8001760:	f001 f8a4 	bl	80028ac <CODEC_IO_Write>
 8001764:	4603      	mov	r3, r0
 8001766:	461a      	mov	r2, r3
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	4413      	add	r3, r2
 800176c:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800176e:	89fb      	ldrh	r3, [r7, #14]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	f246 3250 	movw	r2, #25424	; 0x6350
 8001776:	2102      	movs	r1, #2
 8001778:	4618      	mov	r0, r3
 800177a:	f001 f897 	bl	80028ac <CODEC_IO_Write>
 800177e:	4603      	mov	r3, r0
 8001780:	461a      	mov	r2, r3
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	4413      	add	r3, r2
 8001786:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8001788:	89fb      	ldrh	r3, [r7, #14]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2202      	movs	r2, #2
 800178e:	f240 6106 	movw	r1, #1542	; 0x606
 8001792:	4618      	mov	r0, r3
 8001794:	f001 f88a 	bl	80028ac <CODEC_IO_Write>
 8001798:	4603      	mov	r3, r0
 800179a:	461a      	mov	r2, r3
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	4413      	add	r3, r2
 80017a0:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80017a2:	89fb      	ldrh	r3, [r7, #14]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2202      	movs	r2, #2
 80017a8:	f240 6107 	movw	r1, #1543	; 0x607
 80017ac:	4618      	mov	r0, r3
 80017ae:	f001 f87d 	bl	80028ac <CODEC_IO_Write>
 80017b2:	4603      	mov	r3, r0
 80017b4:	461a      	mov	r2, r3
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	4413      	add	r3, r2
 80017ba:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	220d      	movs	r2, #13
 80017c2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80017c6:	4618      	mov	r0, r3
 80017c8:	f001 f870 	bl	80028ac <CODEC_IO_Write>
 80017cc:	4603      	mov	r3, r0
 80017ce:	461a      	mov	r2, r3
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	4413      	add	r3, r2
 80017d4:	61fb      	str	r3, [r7, #28]
      break;
 80017d6:	e0d0      	b.n	800197a <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80017d8:	89fb      	ldrh	r3, [r7, #14]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	f44f 7243 	mov.w	r2, #780	; 0x30c
 80017e0:	2104      	movs	r1, #4
 80017e2:	4618      	mov	r0, r3
 80017e4:	f001 f862 	bl	80028ac <CODEC_IO_Write>
 80017e8:	4603      	mov	r3, r0
 80017ea:	461a      	mov	r2, r3
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	4413      	add	r3, r2
 80017f0:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80017f2:	89fb      	ldrh	r3, [r7, #14]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	22db      	movs	r2, #219	; 0xdb
 80017f8:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80017fc:	4618      	mov	r0, r3
 80017fe:	f001 f855 	bl	80028ac <CODEC_IO_Write>
 8001802:	4603      	mov	r3, r0
 8001804:	461a      	mov	r2, r3
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	4413      	add	r3, r2
 800180a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800180c:	89fb      	ldrh	r3, [r7, #14]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	f246 3250 	movw	r2, #25424	; 0x6350
 8001814:	2102      	movs	r1, #2
 8001816:	4618      	mov	r0, r3
 8001818:	f001 f848 	bl	80028ac <CODEC_IO_Write>
 800181c:	4603      	mov	r3, r0
 800181e:	461a      	mov	r2, r3
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	4413      	add	r3, r2
 8001824:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8001826:	89fb      	ldrh	r3, [r7, #14]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2202      	movs	r2, #2
 800182c:	f240 6106 	movw	r1, #1542	; 0x606
 8001830:	4618      	mov	r0, r3
 8001832:	f001 f83b 	bl	80028ac <CODEC_IO_Write>
 8001836:	4603      	mov	r3, r0
 8001838:	461a      	mov	r2, r3
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	4413      	add	r3, r2
 800183e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8001840:	89fb      	ldrh	r3, [r7, #14]
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2202      	movs	r2, #2
 8001846:	f240 6107 	movw	r1, #1543	; 0x607
 800184a:	4618      	mov	r0, r3
 800184c:	f001 f82e 	bl	80028ac <CODEC_IO_Write>
 8001850:	4603      	mov	r3, r0
 8001852:	461a      	mov	r2, r3
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	4413      	add	r3, r2
 8001858:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800185a:	89fb      	ldrh	r3, [r7, #14]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	220d      	movs	r2, #13
 8001860:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001864:	4618      	mov	r0, r3
 8001866:	f001 f821 	bl	80028ac <CODEC_IO_Write>
 800186a:	4603      	mov	r3, r0
 800186c:	461a      	mov	r2, r3
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	4413      	add	r3, r2
 8001872:	61fb      	str	r3, [r7, #28]
      break; 
 8001874:	e081      	b.n	800197a <wm8994_Init+0x702>
 8001876:	bf00      	nop
 8001878:	20002858 	.word	0x20002858
 800187c:	2000285c 	.word	0x2000285c
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8001880:	89fb      	ldrh	r3, [r7, #14]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	f640 723c 	movw	r2, #3900	; 0xf3c
 8001888:	2104      	movs	r1, #4
 800188a:	4618      	mov	r0, r3
 800188c:	f001 f80e 	bl	80028ac <CODEC_IO_Write>
 8001890:	4603      	mov	r3, r0
 8001892:	461a      	mov	r2, r3
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	4413      	add	r3, r2
 8001898:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800189a:	89fb      	ldrh	r3, [r7, #14]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	22db      	movs	r2, #219	; 0xdb
 80018a0:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80018a4:	4618      	mov	r0, r3
 80018a6:	f001 f801 	bl	80028ac <CODEC_IO_Write>
 80018aa:	4603      	mov	r3, r0
 80018ac:	461a      	mov	r2, r3
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	4413      	add	r3, r2
 80018b2:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80018b4:	89fb      	ldrh	r3, [r7, #14]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	22db      	movs	r2, #219	; 0xdb
 80018ba:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 fff4 	bl	80028ac <CODEC_IO_Write>
 80018c4:	4603      	mov	r3, r0
 80018c6:	461a      	mov	r2, r3
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	4413      	add	r3, r2
 80018cc:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80018ce:	89fb      	ldrh	r3, [r7, #14]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	f246 32a0 	movw	r2, #25504	; 0x63a0
 80018d6:	2102      	movs	r1, #2
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 ffe7 	bl	80028ac <CODEC_IO_Write>
 80018de:	4603      	mov	r3, r0
 80018e0:	461a      	mov	r2, r3
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	4413      	add	r3, r2
 80018e6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80018e8:	89fb      	ldrh	r3, [r7, #14]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	2202      	movs	r2, #2
 80018ee:	f240 6106 	movw	r1, #1542	; 0x606
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 ffda 	bl	80028ac <CODEC_IO_Write>
 80018f8:	4603      	mov	r3, r0
 80018fa:	461a      	mov	r2, r3
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	4413      	add	r3, r2
 8001900:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8001902:	89fb      	ldrh	r3, [r7, #14]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2202      	movs	r2, #2
 8001908:	f240 6107 	movw	r1, #1543	; 0x607
 800190c:	4618      	mov	r0, r3
 800190e:	f000 ffcd 	bl	80028ac <CODEC_IO_Write>
 8001912:	4603      	mov	r3, r0
 8001914:	461a      	mov	r2, r3
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	4413      	add	r3, r2
 800191a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800191c:	89fb      	ldrh	r3, [r7, #14]
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2202      	movs	r2, #2
 8001922:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8001926:	4618      	mov	r0, r3
 8001928:	f000 ffc0 	bl	80028ac <CODEC_IO_Write>
 800192c:	4603      	mov	r3, r0
 800192e:	461a      	mov	r2, r3
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	4413      	add	r3, r2
 8001934:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8001936:	89fb      	ldrh	r3, [r7, #14]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2202      	movs	r2, #2
 800193c:	f240 6109 	movw	r1, #1545	; 0x609
 8001940:	4618      	mov	r0, r3
 8001942:	f000 ffb3 	bl	80028ac <CODEC_IO_Write>
 8001946:	4603      	mov	r3, r0
 8001948:	461a      	mov	r2, r3
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	4413      	add	r3, r2
 800194e:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8001950:	89fb      	ldrh	r3, [r7, #14]
 8001952:	b2db      	uxtb	r3, r3
 8001954:	220d      	movs	r2, #13
 8001956:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800195a:	4618      	mov	r0, r3
 800195c:	f000 ffa6 	bl	80028ac <CODEC_IO_Write>
 8001960:	4603      	mov	r3, r0
 8001962:	461a      	mov	r2, r3
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	4413      	add	r3, r2
 8001968:	61fb      	str	r3, [r7, #28]
      break;    
 800196a:	e006      	b.n	800197a <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	3301      	adds	r3, #1
 8001970:	61fb      	str	r3, [r7, #28]
      break;
 8001972:	e002      	b.n	800197a <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8001974:	4ba4      	ldr	r3, [pc, #656]	; (8001c08 <wm8994_Init+0x990>)
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4aa3      	ldr	r2, [pc, #652]	; (8001c0c <wm8994_Init+0x994>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d079      	beq.n	8001a76 <wm8994_Init+0x7fe>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4aa1      	ldr	r2, [pc, #644]	; (8001c0c <wm8994_Init+0x994>)
 8001986:	4293      	cmp	r3, r2
 8001988:	f200 80ad 	bhi.w	8001ae6 <wm8994_Init+0x86e>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001992:	4293      	cmp	r3, r2
 8001994:	d061      	beq.n	8001a5a <wm8994_Init+0x7e2>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800199c:	4293      	cmp	r3, r2
 800199e:	f200 80a2 	bhi.w	8001ae6 <wm8994_Init+0x86e>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f64a 4244 	movw	r2, #44100	; 0xac44
 80019a8:	4293      	cmp	r3, r2
 80019aa:	f000 808e 	beq.w	8001aca <wm8994_Init+0x852>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f64a 4244 	movw	r2, #44100	; 0xac44
 80019b4:	4293      	cmp	r3, r2
 80019b6:	f200 8096 	bhi.w	8001ae6 <wm8994_Init+0x86e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80019c0:	d03d      	beq.n	8001a3e <wm8994_Init+0x7c6>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80019c8:	f200 808d 	bhi.w	8001ae6 <wm8994_Init+0x86e>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f245 6222 	movw	r2, #22050	; 0x5622
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d06b      	beq.n	8001aae <wm8994_Init+0x836>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f245 6222 	movw	r2, #22050	; 0x5622
 80019dc:	4293      	cmp	r3, r2
 80019de:	f200 8082 	bhi.w	8001ae6 <wm8994_Init+0x86e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80019e8:	d01b      	beq.n	8001a22 <wm8994_Init+0x7aa>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80019f0:	d879      	bhi.n	8001ae6 <wm8994_Init+0x86e>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80019f8:	d005      	beq.n	8001a06 <wm8994_Init+0x78e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d046      	beq.n	8001a92 <wm8994_Init+0x81a>
 8001a04:	e06f      	b.n	8001ae6 <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8001a06:	89fb      	ldrh	r3, [r7, #14]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 ff4b 	bl	80028ac <CODEC_IO_Write>
 8001a16:	4603      	mov	r3, r0
 8001a18:	461a      	mov	r2, r3
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	61fb      	str	r3, [r7, #28]
    break;
 8001a20:	e06f      	b.n	8001b02 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8001a22:	89fb      	ldrh	r3, [r7, #14]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2233      	movs	r2, #51	; 0x33
 8001a28:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f000 ff3d 	bl	80028ac <CODEC_IO_Write>
 8001a32:	4603      	mov	r3, r0
 8001a34:	461a      	mov	r2, r3
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	4413      	add	r3, r2
 8001a3a:	61fb      	str	r3, [r7, #28]
    break;
 8001a3c:	e061      	b.n	8001b02 <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8001a3e:	89fb      	ldrh	r3, [r7, #14]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2263      	movs	r2, #99	; 0x63
 8001a44:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f000 ff2f 	bl	80028ac <CODEC_IO_Write>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	461a      	mov	r2, r3
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	4413      	add	r3, r2
 8001a56:	61fb      	str	r3, [r7, #28]
    break;
 8001a58:	e053      	b.n	8001b02 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8001a5a:	89fb      	ldrh	r3, [r7, #14]
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2283      	movs	r2, #131	; 0x83
 8001a60:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001a64:	4618      	mov	r0, r3
 8001a66:	f000 ff21 	bl	80028ac <CODEC_IO_Write>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	4413      	add	r3, r2
 8001a72:	61fb      	str	r3, [r7, #28]
    break;
 8001a74:	e045      	b.n	8001b02 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8001a76:	89fb      	ldrh	r3, [r7, #14]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	22a3      	movs	r2, #163	; 0xa3
 8001a7c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 ff13 	bl	80028ac <CODEC_IO_Write>
 8001a86:	4603      	mov	r3, r0
 8001a88:	461a      	mov	r2, r3
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	61fb      	str	r3, [r7, #28]
    break;
 8001a90:	e037      	b.n	8001b02 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8001a92:	89fb      	ldrh	r3, [r7, #14]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2213      	movs	r2, #19
 8001a98:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f000 ff05 	bl	80028ac <CODEC_IO_Write>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	61fb      	str	r3, [r7, #28]
    break;
 8001aac:	e029      	b.n	8001b02 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8001aae:	89fb      	ldrh	r3, [r7, #14]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2243      	movs	r2, #67	; 0x43
 8001ab4:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f000 fef7 	bl	80028ac <CODEC_IO_Write>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	61fb      	str	r3, [r7, #28]
    break;
 8001ac8:	e01b      	b.n	8001b02 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8001aca:	89fb      	ldrh	r3, [r7, #14]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2273      	movs	r2, #115	; 0x73
 8001ad0:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 fee9 	bl	80028ac <CODEC_IO_Write>
 8001ada:	4603      	mov	r3, r0
 8001adc:	461a      	mov	r2, r3
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	61fb      	str	r3, [r7, #28]
    break; 
 8001ae4:	e00d      	b.n	8001b02 <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8001ae6:	89fb      	ldrh	r3, [r7, #14]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2283      	movs	r2, #131	; 0x83
 8001aec:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 fedb 	bl	80028ac <CODEC_IO_Write>
 8001af6:	4603      	mov	r3, r0
 8001af8:	461a      	mov	r2, r3
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	4413      	add	r3, r2
 8001afe:	61fb      	str	r3, [r7, #28]
    break; 
 8001b00:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001b02:	8afb      	ldrh	r3, [r7, #22]
 8001b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b08:	d10e      	bne.n	8001b28 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8001b0a:	89fb      	ldrh	r3, [r7, #14]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	f244 0218 	movw	r2, #16408	; 0x4018
 8001b12:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 fec8 	bl	80028ac <CODEC_IO_Write>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	461a      	mov	r2, r3
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	4413      	add	r3, r2
 8001b24:	61fb      	str	r3, [r7, #28]
 8001b26:	e00d      	b.n	8001b44 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8001b28:	89fb      	ldrh	r3, [r7, #14]
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	f244 0210 	movw	r2, #16400	; 0x4010
 8001b30:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001b34:	4618      	mov	r0, r3
 8001b36:	f000 feb9 	bl	80028ac <CODEC_IO_Write>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	4413      	add	r3, r2
 8001b42:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8001b44:	89fb      	ldrh	r3, [r7, #14]
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f240 3102 	movw	r1, #770	; 0x302
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 feac 	bl	80028ac <CODEC_IO_Write>
 8001b54:	4603      	mov	r3, r0
 8001b56:	461a      	mov	r2, r3
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8001b5e:	89fb      	ldrh	r3, [r7, #14]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	220a      	movs	r2, #10
 8001b64:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f000 fe9f 	bl	80028ac <CODEC_IO_Write>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	461a      	mov	r2, r3
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	4413      	add	r3, r2
 8001b76:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8001b78:	89fb      	ldrh	r3, [r7, #14]
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 fe92 	bl	80028ac <CODEC_IO_Write>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	4413      	add	r3, r2
 8001b90:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8001b92:	8b3b      	ldrh	r3, [r7, #24]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 817b 	beq.w	8001e90 <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8001b9a:	8b3b      	ldrh	r3, [r7, #24]
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d157      	bne.n	8001c50 <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8001ba0:	89fb      	ldrh	r3, [r7, #14]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ba8:	212d      	movs	r1, #45	; 0x2d
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 fe7e 	bl	80028ac <CODEC_IO_Write>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8001bba:	89fb      	ldrh	r3, [r7, #14]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bc2:	212e      	movs	r1, #46	; 0x2e
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 fe71 	bl	80028ac <CODEC_IO_Write>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461a      	mov	r2, r3
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8001bd4:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <wm8994_Init+0x998>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d01b      	beq.n	8001c14 <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8001bdc:	89fb      	ldrh	r3, [r7, #14]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8001be4:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001be8:	4618      	mov	r0, r3
 8001bea:	f000 fe5f 	bl	80028ac <CODEC_IO_Write>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <wm8994_Init+0x998>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 8001bfe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001c02:	f001 f829 	bl	8002c58 <AUDIO_IO_Delay>
 8001c06:	e016      	b.n	8001c36 <wm8994_Init+0x9be>
 8001c08:	2000285c 	.word	0x2000285c
 8001c0c:	00017700 	.word	0x00017700
 8001c10:	20000038 	.word	0x20000038
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8001c14:	89fb      	ldrh	r3, [r7, #14]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	f248 1208 	movw	r2, #33032	; 0x8108
 8001c1c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 fe43 	bl	80028ac <CODEC_IO_Write>
 8001c26:	4603      	mov	r3, r0
 8001c28:	461a      	mov	r2, r3
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8001c30:	2032      	movs	r0, #50	; 0x32
 8001c32:	f001 f811 	bl	8002c58 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8001c36:	89fb      	ldrh	r3, [r7, #14]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001c40:	4618      	mov	r0, r3
 8001c42:	f000 fe33 	bl	80028ac <CODEC_IO_Write>
 8001c46:	4603      	mov	r3, r0
 8001c48:	461a      	mov	r2, r3
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8001c50:	89fb      	ldrh	r3, [r7, #14]
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001c58:	2103      	movs	r1, #3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 fe26 	bl	80028ac <CODEC_IO_Write>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461a      	mov	r2, r3
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	4413      	add	r3, r2
 8001c68:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8001c6a:	89fb      	ldrh	r3, [r7, #14]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2122      	movs	r1, #34	; 0x22
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 fe1a 	bl	80028ac <CODEC_IO_Write>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	4413      	add	r3, r2
 8001c80:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8001c82:	89fb      	ldrh	r3, [r7, #14]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2200      	movs	r2, #0
 8001c88:	2123      	movs	r1, #35	; 0x23
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 fe0e 	bl	80028ac <CODEC_IO_Write>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461a      	mov	r2, r3
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	4413      	add	r3, r2
 8001c98:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8001c9a:	89fb      	ldrh	r3, [r7, #14]
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001ca2:	2136      	movs	r1, #54	; 0x36
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 fe01 	bl	80028ac <CODEC_IO_Write>
 8001caa:	4603      	mov	r3, r0
 8001cac:	461a      	mov	r2, r3
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8001cb4:	89fb      	ldrh	r3, [r7, #14]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	f243 0203 	movw	r2, #12291	; 0x3003
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 fdf4 	bl	80028ac <CODEC_IO_Write>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	4413      	add	r3, r2
 8001ccc:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001cce:	8afb      	ldrh	r3, [r7, #22]
 8001cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cd4:	d10d      	bne.n	8001cf2 <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8001cd6:	89fb      	ldrh	r3, [r7, #14]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	f240 2205 	movw	r2, #517	; 0x205
 8001cde:	2151      	movs	r1, #81	; 0x51
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f000 fde3 	bl	80028ac <CODEC_IO_Write>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	461a      	mov	r2, r3
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	4413      	add	r3, r2
 8001cee:	61fb      	str	r3, [r7, #28]
 8001cf0:	e00b      	b.n	8001d0a <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8001cf2:	89fb      	ldrh	r3, [r7, #14]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2205      	movs	r2, #5
 8001cf8:	2151      	movs	r1, #81	; 0x51
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 fdd6 	bl	80028ac <CODEC_IO_Write>
 8001d00:	4603      	mov	r3, r0
 8001d02:	461a      	mov	r2, r3
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	4413      	add	r3, r2
 8001d08:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8001d0a:	8b7b      	ldrh	r3, [r7, #26]
 8001d0c:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8001d10:	f043 0303 	orr.w	r3, r3, #3
 8001d14:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8001d16:	89fb      	ldrh	r3, [r7, #14]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	8b7a      	ldrh	r2, [r7, #26]
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 fdc4 	bl	80028ac <CODEC_IO_Write>
 8001d24:	4603      	mov	r3, r0
 8001d26:	461a      	mov	r2, r3
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8001d2e:	89fb      	ldrh	r3, [r7, #14]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2222      	movs	r2, #34	; 0x22
 8001d34:	2160      	movs	r1, #96	; 0x60
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 fdb8 	bl	80028ac <CODEC_IO_Write>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	461a      	mov	r2, r3
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	4413      	add	r3, r2
 8001d44:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8001d46:	89fb      	ldrh	r3, [r7, #14]
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	f649 7225 	movw	r2, #40741	; 0x9f25
 8001d4e:	214c      	movs	r1, #76	; 0x4c
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 fdab 	bl	80028ac <CODEC_IO_Write>
 8001d56:	4603      	mov	r3, r0
 8001d58:	461a      	mov	r2, r3
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8001d60:	200f      	movs	r0, #15
 8001d62:	f000 ff79 	bl	8002c58 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8001d66:	89fb      	ldrh	r3, [r7, #14]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	212d      	movs	r1, #45	; 0x2d
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 fd9c 	bl	80028ac <CODEC_IO_Write>
 8001d74:	4603      	mov	r3, r0
 8001d76:	461a      	mov	r2, r3
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8001d7e:	89fb      	ldrh	r3, [r7, #14]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2201      	movs	r2, #1
 8001d84:	212e      	movs	r1, #46	; 0x2e
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 fd90 	bl	80028ac <CODEC_IO_Write>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	461a      	mov	r2, r3
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	4413      	add	r3, r2
 8001d94:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8001d96:	89fb      	ldrh	r3, [r7, #14]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	f44f 724c 	mov.w	r2, #816	; 0x330
 8001d9e:	2103      	movs	r1, #3
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 fd83 	bl	80028ac <CODEC_IO_Write>
 8001da6:	4603      	mov	r3, r0
 8001da8:	461a      	mov	r2, r3
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	4413      	add	r3, r2
 8001dae:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8001db0:	89fb      	ldrh	r3, [r7, #14]
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2233      	movs	r2, #51	; 0x33
 8001db6:	2154      	movs	r1, #84	; 0x54
 8001db8:	4618      	mov	r0, r3
 8001dba:	f000 fd77 	bl	80028ac <CODEC_IO_Write>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8001dc8:	f240 1001 	movw	r0, #257	; 0x101
 8001dcc:	f000 ff44 	bl	8002c58 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8001dd0:	89fb      	ldrh	r3, [r7, #14]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	22ee      	movs	r2, #238	; 0xee
 8001dd6:	2160      	movs	r1, #96	; 0x60
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f000 fd67 	bl	80028ac <CODEC_IO_Write>
 8001dde:	4603      	mov	r3, r0
 8001de0:	461a      	mov	r2, r3
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	4413      	add	r3, r2
 8001de6:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8001de8:	89fb      	ldrh	r3, [r7, #14]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	22c0      	movs	r2, #192	; 0xc0
 8001dee:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 fd5a 	bl	80028ac <CODEC_IO_Write>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	4413      	add	r3, r2
 8001e00:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8001e02:	89fb      	ldrh	r3, [r7, #14]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	22c0      	movs	r2, #192	; 0xc0
 8001e08:	f240 6111 	movw	r1, #1553	; 0x611
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f000 fd4d 	bl	80028ac <CODEC_IO_Write>
 8001e12:	4603      	mov	r3, r0
 8001e14:	461a      	mov	r2, r3
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	4413      	add	r3, r2
 8001e1a:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8001e1c:	89fb      	ldrh	r3, [r7, #14]
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2210      	movs	r2, #16
 8001e22:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 fd40 	bl	80028ac <CODEC_IO_Write>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	461a      	mov	r2, r3
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	4413      	add	r3, r2
 8001e34:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8001e36:	89fb      	ldrh	r3, [r7, #14]
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	22c0      	movs	r2, #192	; 0xc0
 8001e3c:	f240 6112 	movw	r1, #1554	; 0x612
 8001e40:	4618      	mov	r0, r3
 8001e42:	f000 fd33 	bl	80028ac <CODEC_IO_Write>
 8001e46:	4603      	mov	r3, r0
 8001e48:	461a      	mov	r2, r3
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8001e50:	89fb      	ldrh	r3, [r7, #14]
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	22c0      	movs	r2, #192	; 0xc0
 8001e56:	f240 6113 	movw	r1, #1555	; 0x613
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 fd26 	bl	80028ac <CODEC_IO_Write>
 8001e60:	4603      	mov	r3, r0
 8001e62:	461a      	mov	r2, r3
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	4413      	add	r3, r2
 8001e68:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8001e6a:	89fb      	ldrh	r3, [r7, #14]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2210      	movs	r2, #16
 8001e70:	f240 4122 	movw	r1, #1058	; 0x422
 8001e74:	4618      	mov	r0, r3
 8001e76:	f000 fd19 	bl	80028ac <CODEC_IO_Write>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	4413      	add	r3, r2
 8001e82:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8001e84:	7afa      	ldrb	r2, [r7, #11]
 8001e86:	89fb      	ldrh	r3, [r7, #14]
 8001e88:	4611      	mov	r1, r2
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f984 	bl	8002198 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8001e90:	8afb      	ldrh	r3, [r7, #22]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 80a6 	beq.w	8001fe4 <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8001e98:	8afb      	ldrh	r3, [r7, #22]
 8001e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e9e:	d003      	beq.n	8001ea8 <wm8994_Init+0xc30>
 8001ea0:	8afb      	ldrh	r3, [r7, #22]
 8001ea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ea6:	d12b      	bne.n	8001f00 <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8001ea8:	8b7b      	ldrh	r3, [r7, #26]
 8001eaa:	f043 0313 	orr.w	r3, r3, #19
 8001eae:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8001eb0:	89fb      	ldrh	r3, [r7, #14]
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	8b7a      	ldrh	r2, [r7, #26]
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f000 fcf7 	bl	80028ac <CODEC_IO_Write>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8001ec8:	89fb      	ldrh	r3, [r7, #14]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2202      	movs	r2, #2
 8001ece:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 fcea 	bl	80028ac <CODEC_IO_Write>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	461a      	mov	r2, r3
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	4413      	add	r3, r2
 8001ee0:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8001ee2:	89fb      	ldrh	r3, [r7, #14]
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001eea:	f240 4111 	movw	r1, #1041	; 0x411
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 fcdc 	bl	80028ac <CODEC_IO_Write>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	4413      	add	r3, r2
 8001efc:	61fb      	str	r3, [r7, #28]
 8001efe:	e06b      	b.n	8001fd8 <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001f00:	8afb      	ldrh	r3, [r7, #22]
 8001f02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f06:	d139      	bne.n	8001f7c <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8001f08:	8b7b      	ldrh	r3, [r7, #26]
 8001f0a:	f043 0313 	orr.w	r3, r3, #19
 8001f0e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8001f10:	89fb      	ldrh	r3, [r7, #14]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	8b7a      	ldrh	r2, [r7, #26]
 8001f16:	2101      	movs	r1, #1
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f000 fcc7 	bl	80028ac <CODEC_IO_Write>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	461a      	mov	r2, r3
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	4413      	add	r3, r2
 8001f26:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8001f28:	89fb      	ldrh	r3, [r7, #14]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 fcba 	bl	80028ac <CODEC_IO_Write>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	4413      	add	r3, r2
 8001f40:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8001f42:	89fb      	ldrh	r3, [r7, #14]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001f4a:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 fcac 	bl	80028ac <CODEC_IO_Write>
 8001f54:	4603      	mov	r3, r0
 8001f56:	461a      	mov	r2, r3
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8001f5e:	89fb      	ldrh	r3, [r7, #14]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001f66:	f240 4111 	movw	r1, #1041	; 0x411
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 fc9e 	bl	80028ac <CODEC_IO_Write>
 8001f70:	4603      	mov	r3, r0
 8001f72:	461a      	mov	r2, r3
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	4413      	add	r3, r2
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	e02d      	b.n	8001fd8 <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8001f7c:	8afb      	ldrh	r3, [r7, #22]
 8001f7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f82:	d003      	beq.n	8001f8c <wm8994_Init+0xd14>
 8001f84:	8afb      	ldrh	r3, [r7, #22]
 8001f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f8a:	d125      	bne.n	8001fd8 <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8001f8c:	89fb      	ldrh	r3, [r7, #14]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	220b      	movs	r2, #11
 8001f92:	2118      	movs	r1, #24
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 fc89 	bl	80028ac <CODEC_IO_Write>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8001fa4:	89fb      	ldrh	r3, [r7, #14]
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	220b      	movs	r2, #11
 8001faa:	211a      	movs	r1, #26
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 fc7d 	bl	80028ac <CODEC_IO_Write>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	4413      	add	r3, r2
 8001fba:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8001fbc:	89fb      	ldrh	r3, [r7, #14]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001fc4:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f000 fc6f 	bl	80028ac <CODEC_IO_Write>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8001fd8:	7afa      	ldrb	r2, [r7, #11]
 8001fda:	89fb      	ldrh	r3, [r7, #14]
 8001fdc:	4611      	mov	r1, r2
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 f8da 	bl	8002198 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8001fe4:	69fb      	ldr	r3, [r7, #28]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3720      	adds	r7, #32
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop

08001ff0 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8001ff4:	f000 fdd2 	bl	8002b9c <AUDIO_IO_DeInit>
}
 8001ff8:	bf00      	nop
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8002006:	f000 fdbf 	bl	8002b88 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2100      	movs	r1, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f000 fdf5 	bl	8002c00 <AUDIO_IO_Read>
 8002016:	4603      	mov	r3, r0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	6039      	str	r1, [r7, #0]
 800202a:	80fb      	strh	r3, [r7, #6]
 800202c:	4613      	mov	r3, r2
 800202e:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002034:	88fb      	ldrh	r3, [r7, #6]
 8002036:	2100      	movs	r1, #0
 8002038:	4618      	mov	r0, r3
 800203a:	f000 f9d1 	bl	80023e0 <wm8994_SetMute>
 800203e:	4602      	mov	r2, r0
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4413      	add	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8002046:	68fb      	ldr	r3, [r7, #12]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	2101      	movs	r1, #1
 8002062:	4618      	mov	r0, r3
 8002064:	f000 f9bc 	bl	80023e0 <wm8994_SetMute>
 8002068:	4602      	mov	r2, r0
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4413      	add	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8002070:	88fb      	ldrh	r3, [r7, #6]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2201      	movs	r2, #1
 8002076:	2102      	movs	r1, #2
 8002078:	4618      	mov	r0, r3
 800207a:	f000 fc17 	bl	80028ac <CODEC_IO_Write>
 800207e:	4603      	mov	r3, r0
 8002080:	461a      	mov	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4413      	add	r3, r2
 8002086:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8002088:	68fb      	ldr	r3, [r7, #12]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b084      	sub	sp, #16
 8002096:	af00      	add	r7, sp, #0
 8002098:	4603      	mov	r3, r0
 800209a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80020a0:	88fb      	ldrh	r3, [r7, #6]
 80020a2:	2100      	movs	r1, #0
 80020a4:	4618      	mov	r0, r3
 80020a6:	f000 f99b 	bl	80023e0 <wm8994_SetMute>
 80020aa:	4602      	mov	r2, r0
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4413      	add	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80020b2:	68fb      	ldr	r3, [r7, #12]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	6039      	str	r1, [r7, #0]
 80020c6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 80020cc:	4b31      	ldr	r3, [pc, #196]	; (8002194 <wm8994_Stop+0xd8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d05a      	beq.n	800218a <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80020d4:	88fb      	ldrh	r3, [r7, #6]
 80020d6:	2101      	movs	r1, #1
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 f981 	bl	80023e0 <wm8994_SetMute>
 80020de:	4602      	mov	r2, r0
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4413      	add	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d04e      	beq.n	800218a <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80020ec:	88fb      	ldrh	r3, [r7, #6]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020f4:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 fbd7 	bl	80028ac <CODEC_IO_Write>
 80020fe:	4603      	mov	r3, r0
 8002100:	461a      	mov	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4413      	add	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8002108:	88fb      	ldrh	r3, [r7, #6]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002110:	f240 4122 	movw	r1, #1058	; 0x422
 8002114:	4618      	mov	r0, r3
 8002116:	f000 fbc9 	bl	80028ac <CODEC_IO_Write>
 800211a:	4603      	mov	r3, r0
 800211c:	461a      	mov	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4413      	add	r3, r2
 8002122:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8002124:	88fb      	ldrh	r3, [r7, #6]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2200      	movs	r2, #0
 800212a:	212d      	movs	r1, #45	; 0x2d
 800212c:	4618      	mov	r0, r3
 800212e:	f000 fbbd 	bl	80028ac <CODEC_IO_Write>
 8002132:	4603      	mov	r3, r0
 8002134:	461a      	mov	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4413      	add	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 800213c:	88fb      	ldrh	r3, [r7, #6]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2200      	movs	r2, #0
 8002142:	212e      	movs	r1, #46	; 0x2e
 8002144:	4618      	mov	r0, r3
 8002146:	f000 fbb1 	bl	80028ac <CODEC_IO_Write>
 800214a:	4603      	mov	r3, r0
 800214c:	461a      	mov	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4413      	add	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2200      	movs	r2, #0
 800215a:	2105      	movs	r1, #5
 800215c:	4618      	mov	r0, r3
 800215e:	f000 fba5 	bl	80028ac <CODEC_IO_Write>
 8002162:	4603      	mov	r3, r0
 8002164:	461a      	mov	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4413      	add	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 800216c:	88fb      	ldrh	r3, [r7, #6]
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2200      	movs	r2, #0
 8002172:	2100      	movs	r1, #0
 8002174:	4618      	mov	r0, r3
 8002176:	f000 fb99 	bl	80028ac <CODEC_IO_Write>
 800217a:	4603      	mov	r3, r0
 800217c:	461a      	mov	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	4413      	add	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8002184:	4b03      	ldr	r3, [pc, #12]	; (8002194 <wm8994_Stop+0xd8>)
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 800218a:	68fb      	ldr	r3, [r7, #12]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20002858 	.word	0x20002858

08002198 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	460a      	mov	r2, r1
 80021a2:	80fb      	strh	r3, [r7, #6]
 80021a4:	4613      	mov	r3, r2
 80021a6:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80021ac:	797b      	ldrb	r3, [r7, #5]
 80021ae:	2b64      	cmp	r3, #100	; 0x64
 80021b0:	d80b      	bhi.n	80021ca <wm8994_SetVolume+0x32>
 80021b2:	797a      	ldrb	r2, [r7, #5]
 80021b4:	4613      	mov	r3, r2
 80021b6:	019b      	lsls	r3, r3, #6
 80021b8:	1a9b      	subs	r3, r3, r2
 80021ba:	4a86      	ldr	r2, [pc, #536]	; (80023d4 <wm8994_SetVolume+0x23c>)
 80021bc:	fb82 1203 	smull	r1, r2, r2, r3
 80021c0:	1152      	asrs	r2, r2, #5
 80021c2:	17db      	asrs	r3, r3, #31
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	e000      	b.n	80021cc <wm8994_SetVolume+0x34>
 80021ca:	2364      	movs	r3, #100	; 0x64
 80021cc:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 80021ce:	4b82      	ldr	r3, [pc, #520]	; (80023d8 <wm8994_SetVolume+0x240>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 809b 	beq.w	800230e <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 80021d8:	7afb      	ldrb	r3, [r7, #11]
 80021da:	2b3e      	cmp	r3, #62	; 0x3e
 80021dc:	d93d      	bls.n	800225a <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	2100      	movs	r1, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 f8fc 	bl	80023e0 <wm8994_SetMute>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4413      	add	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	f240 127f 	movw	r2, #383	; 0x17f
 80021f8:	211c      	movs	r1, #28
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 fb56 	bl	80028ac <CODEC_IO_Write>
 8002200:	4603      	mov	r3, r0
 8002202:	461a      	mov	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4413      	add	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 800220a:	88fb      	ldrh	r3, [r7, #6]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	f240 127f 	movw	r2, #383	; 0x17f
 8002212:	211d      	movs	r1, #29
 8002214:	4618      	mov	r0, r3
 8002216:	f000 fb49 	bl	80028ac <CODEC_IO_Write>
 800221a:	4603      	mov	r3, r0
 800221c:	461a      	mov	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	4413      	add	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8002224:	88fb      	ldrh	r3, [r7, #6]
 8002226:	b2db      	uxtb	r3, r3
 8002228:	f240 127f 	movw	r2, #383	; 0x17f
 800222c:	2126      	movs	r1, #38	; 0x26
 800222e:	4618      	mov	r0, r3
 8002230:	f000 fb3c 	bl	80028ac <CODEC_IO_Write>
 8002234:	4603      	mov	r3, r0
 8002236:	461a      	mov	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4413      	add	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	f240 127f 	movw	r2, #383	; 0x17f
 8002246:	2127      	movs	r1, #39	; 0x27
 8002248:	4618      	mov	r0, r3
 800224a:	f000 fb2f 	bl	80028ac <CODEC_IO_Write>
 800224e:	4603      	mov	r3, r0
 8002250:	461a      	mov	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4413      	add	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	e059      	b.n	800230e <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 800225a:	797b      	ldrb	r3, [r7, #5]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d109      	bne.n	8002274 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002260:	88fb      	ldrh	r3, [r7, #6]
 8002262:	2101      	movs	r1, #1
 8002264:	4618      	mov	r0, r3
 8002266:	f000 f8bb 	bl	80023e0 <wm8994_SetMute>
 800226a:	4602      	mov	r2, r0
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4413      	add	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	e04c      	b.n	800230e <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	2100      	movs	r1, #0
 8002278:	4618      	mov	r0, r3
 800227a:	f000 f8b1 	bl	80023e0 <wm8994_SetMute>
 800227e:	4602      	mov	r2, r0
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4413      	add	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8002286:	88fb      	ldrh	r3, [r7, #6]
 8002288:	b2d8      	uxtb	r0, r3
 800228a:	7afb      	ldrb	r3, [r7, #11]
 800228c:	b21b      	sxth	r3, r3
 800228e:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8002292:	b21b      	sxth	r3, r3
 8002294:	b29b      	uxth	r3, r3
 8002296:	461a      	mov	r2, r3
 8002298:	211c      	movs	r1, #28
 800229a:	f000 fb07 	bl	80028ac <CODEC_IO_Write>
 800229e:	4603      	mov	r3, r0
 80022a0:	461a      	mov	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4413      	add	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 80022a8:	88fb      	ldrh	r3, [r7, #6]
 80022aa:	b2d8      	uxtb	r0, r3
 80022ac:	7afb      	ldrb	r3, [r7, #11]
 80022ae:	b21b      	sxth	r3, r3
 80022b0:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80022b4:	b21b      	sxth	r3, r3
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	461a      	mov	r2, r3
 80022ba:	211d      	movs	r1, #29
 80022bc:	f000 faf6 	bl	80028ac <CODEC_IO_Write>
 80022c0:	4603      	mov	r3, r0
 80022c2:	461a      	mov	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4413      	add	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 80022ca:	88fb      	ldrh	r3, [r7, #6]
 80022cc:	b2d8      	uxtb	r0, r3
 80022ce:	7afb      	ldrb	r3, [r7, #11]
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80022d6:	b21b      	sxth	r3, r3
 80022d8:	b29b      	uxth	r3, r3
 80022da:	461a      	mov	r2, r3
 80022dc:	2126      	movs	r1, #38	; 0x26
 80022de:	f000 fae5 	bl	80028ac <CODEC_IO_Write>
 80022e2:	4603      	mov	r3, r0
 80022e4:	461a      	mov	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	4413      	add	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 80022ec:	88fb      	ldrh	r3, [r7, #6]
 80022ee:	b2d8      	uxtb	r0, r3
 80022f0:	7afb      	ldrb	r3, [r7, #11]
 80022f2:	b21b      	sxth	r3, r3
 80022f4:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80022f8:	b21b      	sxth	r3, r3
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	461a      	mov	r2, r3
 80022fe:	2127      	movs	r1, #39	; 0x27
 8002300:	f000 fad4 	bl	80028ac <CODEC_IO_Write>
 8002304:	4603      	mov	r3, r0
 8002306:	461a      	mov	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4413      	add	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 800230e:	4b33      	ldr	r3, [pc, #204]	; (80023dc <wm8994_SetVolume+0x244>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d059      	beq.n	80023ca <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8002316:	797b      	ldrb	r3, [r7, #5]
 8002318:	2b63      	cmp	r3, #99	; 0x63
 800231a:	d80c      	bhi.n	8002336 <wm8994_SetVolume+0x19e>
 800231c:	797a      	ldrb	r2, [r7, #5]
 800231e:	4613      	mov	r3, r2
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	1a9b      	subs	r3, r3, r2
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	4a2b      	ldr	r2, [pc, #172]	; (80023d4 <wm8994_SetVolume+0x23c>)
 8002328:	fb82 1203 	smull	r1, r2, r2, r3
 800232c:	1152      	asrs	r2, r2, #5
 800232e:	17db      	asrs	r3, r3, #31
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	b2db      	uxtb	r3, r3
 8002334:	e000      	b.n	8002338 <wm8994_SetVolume+0x1a0>
 8002336:	23ef      	movs	r3, #239	; 0xef
 8002338:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	b2d8      	uxtb	r0, r3
 800233e:	7afb      	ldrb	r3, [r7, #11]
 8002340:	b21b      	sxth	r3, r3
 8002342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002346:	b21b      	sxth	r3, r3
 8002348:	b29b      	uxth	r3, r3
 800234a:	461a      	mov	r2, r3
 800234c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002350:	f000 faac 	bl	80028ac <CODEC_IO_Write>
 8002354:	4603      	mov	r3, r0
 8002356:	461a      	mov	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4413      	add	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 800235e:	88fb      	ldrh	r3, [r7, #6]
 8002360:	b2d8      	uxtb	r0, r3
 8002362:	7afb      	ldrb	r3, [r7, #11]
 8002364:	b21b      	sxth	r3, r3
 8002366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236a:	b21b      	sxth	r3, r3
 800236c:	b29b      	uxth	r3, r3
 800236e:	461a      	mov	r2, r3
 8002370:	f240 4101 	movw	r1, #1025	; 0x401
 8002374:	f000 fa9a 	bl	80028ac <CODEC_IO_Write>
 8002378:	4603      	mov	r3, r0
 800237a:	461a      	mov	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4413      	add	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8002382:	88fb      	ldrh	r3, [r7, #6]
 8002384:	b2d8      	uxtb	r0, r3
 8002386:	7afb      	ldrb	r3, [r7, #11]
 8002388:	b21b      	sxth	r3, r3
 800238a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238e:	b21b      	sxth	r3, r3
 8002390:	b29b      	uxth	r3, r3
 8002392:	461a      	mov	r2, r3
 8002394:	f240 4104 	movw	r1, #1028	; 0x404
 8002398:	f000 fa88 	bl	80028ac <CODEC_IO_Write>
 800239c:	4603      	mov	r3, r0
 800239e:	461a      	mov	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 80023a6:	88fb      	ldrh	r3, [r7, #6]
 80023a8:	b2d8      	uxtb	r0, r3
 80023aa:	7afb      	ldrb	r3, [r7, #11]
 80023ac:	b21b      	sxth	r3, r3
 80023ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b2:	b21b      	sxth	r3, r3
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	461a      	mov	r2, r3
 80023b8:	f240 4105 	movw	r1, #1029	; 0x405
 80023bc:	f000 fa76 	bl	80028ac <CODEC_IO_Write>
 80023c0:	4603      	mov	r3, r0
 80023c2:	461a      	mov	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4413      	add	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80023ca:	68fb      	ldr	r3, [r7, #12]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	51eb851f 	.word	0x51eb851f
 80023d8:	20002858 	.word	0x20002858
 80023dc:	2000285c 	.word	0x2000285c

080023e0 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	6039      	str	r1, [r7, #0]
 80023ea:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 80023f0:	4b21      	ldr	r3, [pc, #132]	; (8002478 <wm8994_SetMute+0x98>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d039      	beq.n	800246c <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d11c      	bne.n	8002438 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80023fe:	88fb      	ldrh	r3, [r7, #6]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002406:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800240a:	4618      	mov	r0, r3
 800240c:	f000 fa4e 	bl	80028ac <CODEC_IO_Write>
 8002410:	4603      	mov	r3, r0
 8002412:	461a      	mov	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4413      	add	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002422:	f240 4122 	movw	r1, #1058	; 0x422
 8002426:	4618      	mov	r0, r3
 8002428:	f000 fa40 	bl	80028ac <CODEC_IO_Write>
 800242c:	4603      	mov	r3, r0
 800242e:	461a      	mov	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4413      	add	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	e019      	b.n	800246c <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8002438:	88fb      	ldrh	r3, [r7, #6]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2210      	movs	r2, #16
 800243e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8002442:	4618      	mov	r0, r3
 8002444:	f000 fa32 	bl	80028ac <CODEC_IO_Write>
 8002448:	4603      	mov	r3, r0
 800244a:	461a      	mov	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4413      	add	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8002452:	88fb      	ldrh	r3, [r7, #6]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2210      	movs	r2, #16
 8002458:	f240 4122 	movw	r1, #1058	; 0x422
 800245c:	4618      	mov	r0, r3
 800245e:	f000 fa25 	bl	80028ac <CODEC_IO_Write>
 8002462:	4603      	mov	r3, r0
 8002464:	461a      	mov	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	4413      	add	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 800246c:	68fb      	ldr	r3, [r7, #12]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20002858 	.word	0x20002858

0800247c <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	460a      	mov	r2, r1
 8002486:	80fb      	strh	r3, [r7, #6]
 8002488:	4613      	mov	r3, r2
 800248a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 800248c:	2300      	movs	r3, #0
 800248e:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8002490:	797b      	ldrb	r3, [r7, #5]
 8002492:	2b03      	cmp	r3, #3
 8002494:	f000 808c 	beq.w	80025b0 <wm8994_SetOutputMode+0x134>
 8002498:	2b03      	cmp	r3, #3
 800249a:	f300 80cb 	bgt.w	8002634 <wm8994_SetOutputMode+0x1b8>
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d002      	beq.n	80024a8 <wm8994_SetOutputMode+0x2c>
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d042      	beq.n	800252c <wm8994_SetOutputMode+0xb0>
 80024a6:	e0c5      	b.n	8002634 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80024a8:	88fb      	ldrh	r3, [r7, #6]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	f640 420c 	movw	r2, #3084	; 0xc0c
 80024b0:	2105      	movs	r1, #5
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 f9fa 	bl	80028ac <CODEC_IO_Write>
 80024b8:	4603      	mov	r3, r0
 80024ba:	461a      	mov	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4413      	add	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80024c2:	88fb      	ldrh	r3, [r7, #6]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2200      	movs	r2, #0
 80024c8:	f240 6101 	movw	r1, #1537	; 0x601
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 f9ed 	bl	80028ac <CODEC_IO_Write>
 80024d2:	4603      	mov	r3, r0
 80024d4:	461a      	mov	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4413      	add	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80024dc:	88fb      	ldrh	r3, [r7, #6]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2200      	movs	r2, #0
 80024e2:	f240 6102 	movw	r1, #1538	; 0x602
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 f9e0 	bl	80028ac <CODEC_IO_Write>
 80024ec:	4603      	mov	r3, r0
 80024ee:	461a      	mov	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4413      	add	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80024f6:	88fb      	ldrh	r3, [r7, #6]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2202      	movs	r2, #2
 80024fc:	f240 6104 	movw	r1, #1540	; 0x604
 8002500:	4618      	mov	r0, r3
 8002502:	f000 f9d3 	bl	80028ac <CODEC_IO_Write>
 8002506:	4603      	mov	r3, r0
 8002508:	461a      	mov	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4413      	add	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8002510:	88fb      	ldrh	r3, [r7, #6]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2202      	movs	r2, #2
 8002516:	f240 6105 	movw	r1, #1541	; 0x605
 800251a:	4618      	mov	r0, r3
 800251c:	f000 f9c6 	bl	80028ac <CODEC_IO_Write>
 8002520:	4603      	mov	r3, r0
 8002522:	461a      	mov	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4413      	add	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]
    break;
 800252a:	e0c5      	b.n	80026b8 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800252c:	88fb      	ldrh	r3, [r7, #6]
 800252e:	b2db      	uxtb	r3, r3
 8002530:	f240 3203 	movw	r2, #771	; 0x303
 8002534:	2105      	movs	r1, #5
 8002536:	4618      	mov	r0, r3
 8002538:	f000 f9b8 	bl	80028ac <CODEC_IO_Write>
 800253c:	4603      	mov	r3, r0
 800253e:	461a      	mov	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4413      	add	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2201      	movs	r2, #1
 800254c:	f240 6101 	movw	r1, #1537	; 0x601
 8002550:	4618      	mov	r0, r3
 8002552:	f000 f9ab 	bl	80028ac <CODEC_IO_Write>
 8002556:	4603      	mov	r3, r0
 8002558:	461a      	mov	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	4413      	add	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2201      	movs	r2, #1
 8002566:	f240 6102 	movw	r1, #1538	; 0x602
 800256a:	4618      	mov	r0, r3
 800256c:	f000 f99e 	bl	80028ac <CODEC_IO_Write>
 8002570:	4603      	mov	r3, r0
 8002572:	461a      	mov	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4413      	add	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800257a:	88fb      	ldrh	r3, [r7, #6]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2200      	movs	r2, #0
 8002580:	f240 6104 	movw	r1, #1540	; 0x604
 8002584:	4618      	mov	r0, r3
 8002586:	f000 f991 	bl	80028ac <CODEC_IO_Write>
 800258a:	4603      	mov	r3, r0
 800258c:	461a      	mov	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4413      	add	r3, r2
 8002592:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002594:	88fb      	ldrh	r3, [r7, #6]
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2200      	movs	r2, #0
 800259a:	f240 6105 	movw	r1, #1541	; 0x605
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 f984 	bl	80028ac <CODEC_IO_Write>
 80025a4:	4603      	mov	r3, r0
 80025a6:	461a      	mov	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4413      	add	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]
    break;
 80025ae:	e083      	b.n	80026b8 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80025b0:	88fb      	ldrh	r3, [r7, #6]
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	f640 720f 	movw	r2, #3855	; 0xf0f
 80025b8:	2105      	movs	r1, #5
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 f976 	bl	80028ac <CODEC_IO_Write>
 80025c0:	4603      	mov	r3, r0
 80025c2:	461a      	mov	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4413      	add	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2201      	movs	r2, #1
 80025d0:	f240 6101 	movw	r1, #1537	; 0x601
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 f969 	bl	80028ac <CODEC_IO_Write>
 80025da:	4603      	mov	r3, r0
 80025dc:	461a      	mov	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	4413      	add	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80025e4:	88fb      	ldrh	r3, [r7, #6]
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2201      	movs	r2, #1
 80025ea:	f240 6102 	movw	r1, #1538	; 0x602
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 f95c 	bl	80028ac <CODEC_IO_Write>
 80025f4:	4603      	mov	r3, r0
 80025f6:	461a      	mov	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4413      	add	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80025fe:	88fb      	ldrh	r3, [r7, #6]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2202      	movs	r2, #2
 8002604:	f240 6104 	movw	r1, #1540	; 0x604
 8002608:	4618      	mov	r0, r3
 800260a:	f000 f94f 	bl	80028ac <CODEC_IO_Write>
 800260e:	4603      	mov	r3, r0
 8002610:	461a      	mov	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4413      	add	r3, r2
 8002616:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8002618:	88fb      	ldrh	r3, [r7, #6]
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2202      	movs	r2, #2
 800261e:	f240 6105 	movw	r1, #1541	; 0x605
 8002622:	4618      	mov	r0, r3
 8002624:	f000 f942 	bl	80028ac <CODEC_IO_Write>
 8002628:	4603      	mov	r3, r0
 800262a:	461a      	mov	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4413      	add	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
    break;
 8002632:	e041      	b.n	80026b8 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002634:	88fb      	ldrh	r3, [r7, #6]
 8002636:	b2db      	uxtb	r3, r3
 8002638:	f240 3203 	movw	r2, #771	; 0x303
 800263c:	2105      	movs	r1, #5
 800263e:	4618      	mov	r0, r3
 8002640:	f000 f934 	bl	80028ac <CODEC_IO_Write>
 8002644:	4603      	mov	r3, r0
 8002646:	461a      	mov	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4413      	add	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800264e:	88fb      	ldrh	r3, [r7, #6]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2201      	movs	r2, #1
 8002654:	f240 6101 	movw	r1, #1537	; 0x601
 8002658:	4618      	mov	r0, r3
 800265a:	f000 f927 	bl	80028ac <CODEC_IO_Write>
 800265e:	4603      	mov	r3, r0
 8002660:	461a      	mov	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4413      	add	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002668:	88fb      	ldrh	r3, [r7, #6]
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2201      	movs	r2, #1
 800266e:	f240 6102 	movw	r1, #1538	; 0x602
 8002672:	4618      	mov	r0, r3
 8002674:	f000 f91a 	bl	80028ac <CODEC_IO_Write>
 8002678:	4603      	mov	r3, r0
 800267a:	461a      	mov	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4413      	add	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8002682:	88fb      	ldrh	r3, [r7, #6]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2200      	movs	r2, #0
 8002688:	f240 6104 	movw	r1, #1540	; 0x604
 800268c:	4618      	mov	r0, r3
 800268e:	f000 f90d 	bl	80028ac <CODEC_IO_Write>
 8002692:	4603      	mov	r3, r0
 8002694:	461a      	mov	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4413      	add	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800269c:	88fb      	ldrh	r3, [r7, #6]
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2200      	movs	r2, #0
 80026a2:	f240 6105 	movw	r1, #1541	; 0x605
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 f900 	bl	80028ac <CODEC_IO_Write>
 80026ac:	4603      	mov	r3, r0
 80026ae:	461a      	mov	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4413      	add	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
    break;    
 80026b6:	bf00      	nop
  }  
  return counter;
 80026b8:	68fb      	ldr	r3, [r7, #12]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	6039      	str	r1, [r7, #0]
 80026ce:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	4a64      	ldr	r2, [pc, #400]	; (8002868 <wm8994_SetFrequency+0x1a4>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d079      	beq.n	80027d0 <wm8994_SetFrequency+0x10c>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	4a62      	ldr	r2, [pc, #392]	; (8002868 <wm8994_SetFrequency+0x1a4>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	f200 80ad 	bhi.w	8002840 <wm8994_SetFrequency+0x17c>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d061      	beq.n	80027b4 <wm8994_SetFrequency+0xf0>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80026f6:	4293      	cmp	r3, r2
 80026f8:	f200 80a2 	bhi.w	8002840 <wm8994_SetFrequency+0x17c>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	f64a 4244 	movw	r2, #44100	; 0xac44
 8002702:	4293      	cmp	r3, r2
 8002704:	f000 808e 	beq.w	8002824 <wm8994_SetFrequency+0x160>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800270e:	4293      	cmp	r3, r2
 8002710:	f200 8096 	bhi.w	8002840 <wm8994_SetFrequency+0x17c>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800271a:	d03d      	beq.n	8002798 <wm8994_SetFrequency+0xd4>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002722:	f200 808d 	bhi.w	8002840 <wm8994_SetFrequency+0x17c>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	f245 6222 	movw	r2, #22050	; 0x5622
 800272c:	4293      	cmp	r3, r2
 800272e:	d06b      	beq.n	8002808 <wm8994_SetFrequency+0x144>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	f245 6222 	movw	r2, #22050	; 0x5622
 8002736:	4293      	cmp	r3, r2
 8002738:	f200 8082 	bhi.w	8002840 <wm8994_SetFrequency+0x17c>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002742:	d01b      	beq.n	800277c <wm8994_SetFrequency+0xb8>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800274a:	d879      	bhi.n	8002840 <wm8994_SetFrequency+0x17c>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8002752:	d005      	beq.n	8002760 <wm8994_SetFrequency+0x9c>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	f642 3211 	movw	r2, #11025	; 0x2b11
 800275a:	4293      	cmp	r3, r2
 800275c:	d046      	beq.n	80027ec <wm8994_SetFrequency+0x128>
 800275e:	e06f      	b.n	8002840 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8002760:	88fb      	ldrh	r3, [r7, #6]
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2203      	movs	r2, #3
 8002766:	f44f 7104 	mov.w	r1, #528	; 0x210
 800276a:	4618      	mov	r0, r3
 800276c:	f000 f89e 	bl	80028ac <CODEC_IO_Write>
 8002770:	4603      	mov	r3, r0
 8002772:	461a      	mov	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4413      	add	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]
    break;
 800277a:	e06f      	b.n	800285c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 800277c:	88fb      	ldrh	r3, [r7, #6]
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2233      	movs	r2, #51	; 0x33
 8002782:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f890 	bl	80028ac <CODEC_IO_Write>
 800278c:	4603      	mov	r3, r0
 800278e:	461a      	mov	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4413      	add	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]
    break;
 8002796:	e061      	b.n	800285c <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8002798:	88fb      	ldrh	r3, [r7, #6]
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2263      	movs	r2, #99	; 0x63
 800279e:	f44f 7104 	mov.w	r1, #528	; 0x210
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 f882 	bl	80028ac <CODEC_IO_Write>
 80027a8:	4603      	mov	r3, r0
 80027aa:	461a      	mov	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4413      	add	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]
    break;
 80027b2:	e053      	b.n	800285c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80027b4:	88fb      	ldrh	r3, [r7, #6]
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2283      	movs	r2, #131	; 0x83
 80027ba:	f44f 7104 	mov.w	r1, #528	; 0x210
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 f874 	bl	80028ac <CODEC_IO_Write>
 80027c4:	4603      	mov	r3, r0
 80027c6:	461a      	mov	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4413      	add	r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]
    break;
 80027ce:	e045      	b.n	800285c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80027d0:	88fb      	ldrh	r3, [r7, #6]
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	22a3      	movs	r2, #163	; 0xa3
 80027d6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 f866 	bl	80028ac <CODEC_IO_Write>
 80027e0:	4603      	mov	r3, r0
 80027e2:	461a      	mov	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4413      	add	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]
    break;
 80027ea:	e037      	b.n	800285c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80027ec:	88fb      	ldrh	r3, [r7, #6]
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2213      	movs	r2, #19
 80027f2:	f44f 7104 	mov.w	r1, #528	; 0x210
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 f858 	bl	80028ac <CODEC_IO_Write>
 80027fc:	4603      	mov	r3, r0
 80027fe:	461a      	mov	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4413      	add	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]
    break;
 8002806:	e029      	b.n	800285c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8002808:	88fb      	ldrh	r3, [r7, #6]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2243      	movs	r2, #67	; 0x43
 800280e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002812:	4618      	mov	r0, r3
 8002814:	f000 f84a 	bl	80028ac <CODEC_IO_Write>
 8002818:	4603      	mov	r3, r0
 800281a:	461a      	mov	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4413      	add	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]
    break;
 8002822:	e01b      	b.n	800285c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2273      	movs	r2, #115	; 0x73
 800282a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800282e:	4618      	mov	r0, r3
 8002830:	f000 f83c 	bl	80028ac <CODEC_IO_Write>
 8002834:	4603      	mov	r3, r0
 8002836:	461a      	mov	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4413      	add	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
    break; 
 800283e:	e00d      	b.n	800285c <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002840:	88fb      	ldrh	r3, [r7, #6]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2283      	movs	r2, #131	; 0x83
 8002846:	f44f 7104 	mov.w	r1, #528	; 0x210
 800284a:	4618      	mov	r0, r3
 800284c:	f000 f82e 	bl	80028ac <CODEC_IO_Write>
 8002850:	4603      	mov	r3, r0
 8002852:	461a      	mov	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4413      	add	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]
    break; 
 800285a:	bf00      	nop
  }
  return counter;
 800285c:	68fb      	ldr	r3, [r7, #12]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	00017700 	.word	0x00017700

0800286c <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 800287a:	88fb      	ldrh	r3, [r7, #6]
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2200      	movs	r2, #0
 8002880:	2100      	movs	r1, #0
 8002882:	4618      	mov	r0, r3
 8002884:	f000 f812 	bl	80028ac <CODEC_IO_Write>
 8002888:	4603      	mov	r3, r0
 800288a:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 800288c:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <wm8994_Reset+0x38>)
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8002892:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <wm8994_Reset+0x3c>)
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]

  return counter;
 8002898:	68fb      	ldr	r3, [r7, #12]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20002858 	.word	0x20002858
 80028a8:	2000285c 	.word	0x2000285c

080028ac <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	71fb      	strb	r3, [r7, #7]
 80028b6:	460b      	mov	r3, r1
 80028b8:	80bb      	strh	r3, [r7, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80028c2:	887a      	ldrh	r2, [r7, #2]
 80028c4:	88b9      	ldrh	r1, [r7, #4]
 80028c6:	79fb      	ldrb	r3, [r7, #7]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 f96f 	bl	8002bac <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	b2db      	uxtb	r3, r3
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08c      	sub	sp, #48	; 0x30
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a51      	ldr	r2, [pc, #324]	; (8002a2c <I2Cx_MspInit+0x150>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d14d      	bne.n	8002988 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80028ec:	4b50      	ldr	r3, [pc, #320]	; (8002a30 <I2Cx_MspInit+0x154>)
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	4a4f      	ldr	r2, [pc, #316]	; (8002a30 <I2Cx_MspInit+0x154>)
 80028f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028f6:	6313      	str	r3, [r2, #48]	; 0x30
 80028f8:	4b4d      	ldr	r3, [pc, #308]	; (8002a30 <I2Cx_MspInit+0x154>)
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002904:	2380      	movs	r3, #128	; 0x80
 8002906:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002908:	2312      	movs	r3, #18
 800290a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002910:	2302      	movs	r3, #2
 8002912:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002914:	2304      	movs	r3, #4
 8002916:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002918:	f107 031c 	add.w	r3, r7, #28
 800291c:	4619      	mov	r1, r3
 800291e:	4845      	ldr	r0, [pc, #276]	; (8002a34 <I2Cx_MspInit+0x158>)
 8002920:	f001 fa68 	bl	8003df4 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002924:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002928:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800292a:	f107 031c 	add.w	r3, r7, #28
 800292e:	4619      	mov	r1, r3
 8002930:	4840      	ldr	r0, [pc, #256]	; (8002a34 <I2Cx_MspInit+0x158>)
 8002932:	f001 fa5f 	bl	8003df4 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002936:	4b3e      	ldr	r3, [pc, #248]	; (8002a30 <I2Cx_MspInit+0x154>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	4a3d      	ldr	r2, [pc, #244]	; (8002a30 <I2Cx_MspInit+0x154>)
 800293c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002940:	6413      	str	r3, [r2, #64]	; 0x40
 8002942:	4b3b      	ldr	r3, [pc, #236]	; (8002a30 <I2Cx_MspInit+0x154>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800294e:	4b38      	ldr	r3, [pc, #224]	; (8002a30 <I2Cx_MspInit+0x154>)
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	4a37      	ldr	r2, [pc, #220]	; (8002a30 <I2Cx_MspInit+0x154>)
 8002954:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002958:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800295a:	4b35      	ldr	r3, [pc, #212]	; (8002a30 <I2Cx_MspInit+0x154>)
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	4a34      	ldr	r2, [pc, #208]	; (8002a30 <I2Cx_MspInit+0x154>)
 8002960:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002964:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002966:	2200      	movs	r2, #0
 8002968:	210f      	movs	r1, #15
 800296a:	2048      	movs	r0, #72	; 0x48
 800296c:	f000 fdc5 	bl	80034fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002970:	2048      	movs	r0, #72	; 0x48
 8002972:	f000 fdde 	bl	8003532 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002976:	2200      	movs	r2, #0
 8002978:	210f      	movs	r1, #15
 800297a:	2049      	movs	r0, #73	; 0x49
 800297c:	f000 fdbd 	bl	80034fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002980:	2049      	movs	r0, #73	; 0x49
 8002982:	f000 fdd6 	bl	8003532 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002986:	e04d      	b.n	8002a24 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002988:	4b29      	ldr	r3, [pc, #164]	; (8002a30 <I2Cx_MspInit+0x154>)
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	4a28      	ldr	r2, [pc, #160]	; (8002a30 <I2Cx_MspInit+0x154>)
 800298e:	f043 0302 	orr.w	r3, r3, #2
 8002992:	6313      	str	r3, [r2, #48]	; 0x30
 8002994:	4b26      	ldr	r3, [pc, #152]	; (8002a30 <I2Cx_MspInit+0x154>)
 8002996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80029a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029a4:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80029a6:	2312      	movs	r3, #18
 80029a8:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80029ae:	2302      	movs	r3, #2
 80029b0:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80029b2:	2304      	movs	r3, #4
 80029b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80029b6:	f107 031c 	add.w	r3, r7, #28
 80029ba:	4619      	mov	r1, r3
 80029bc:	481e      	ldr	r0, [pc, #120]	; (8002a38 <I2Cx_MspInit+0x15c>)
 80029be:	f001 fa19 	bl	8003df4 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80029c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80029c8:	f107 031c 	add.w	r3, r7, #28
 80029cc:	4619      	mov	r1, r3
 80029ce:	481a      	ldr	r0, [pc, #104]	; (8002a38 <I2Cx_MspInit+0x15c>)
 80029d0:	f001 fa10 	bl	8003df4 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80029d4:	4b16      	ldr	r3, [pc, #88]	; (8002a30 <I2Cx_MspInit+0x154>)
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	4a15      	ldr	r2, [pc, #84]	; (8002a30 <I2Cx_MspInit+0x154>)
 80029da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029de:	6413      	str	r3, [r2, #64]	; 0x40
 80029e0:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <I2Cx_MspInit+0x154>)
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80029ec:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <I2Cx_MspInit+0x154>)
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	4a0f      	ldr	r2, [pc, #60]	; (8002a30 <I2Cx_MspInit+0x154>)
 80029f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029f6:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80029f8:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <I2Cx_MspInit+0x154>)
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	4a0c      	ldr	r2, [pc, #48]	; (8002a30 <I2Cx_MspInit+0x154>)
 80029fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a02:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002a04:	2200      	movs	r2, #0
 8002a06:	210f      	movs	r1, #15
 8002a08:	201f      	movs	r0, #31
 8002a0a:	f000 fd76 	bl	80034fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002a0e:	201f      	movs	r0, #31
 8002a10:	f000 fd8f 	bl	8003532 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002a14:	2200      	movs	r2, #0
 8002a16:	210f      	movs	r1, #15
 8002a18:	2020      	movs	r0, #32
 8002a1a:	f000 fd6e 	bl	80034fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002a1e:	2020      	movs	r0, #32
 8002a20:	f000 fd87 	bl	8003532 <HAL_NVIC_EnableIRQ>
}
 8002a24:	bf00      	nop
 8002a26:	3730      	adds	r7, #48	; 0x30
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20002860 	.word	0x20002860
 8002a30:	40023800 	.word	0x40023800
 8002a34:	40021c00 	.word	0x40021c00
 8002a38:	40020400 	.word	0x40020400

08002a3c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f003 fcf3 	bl	8006430 <HAL_I2C_GetState>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d125      	bne.n	8002a9c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a14      	ldr	r2, [pc, #80]	; (8002aa4 <I2Cx_Init+0x68>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d103      	bne.n	8002a60 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a13      	ldr	r2, [pc, #76]	; (8002aa8 <I2Cx_Init+0x6c>)
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	e002      	b.n	8002a66 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a12      	ldr	r2, [pc, #72]	; (8002aac <I2Cx_Init+0x70>)
 8002a64:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a11      	ldr	r2, [pc, #68]	; (8002ab0 <I2Cx_Init+0x74>)
 8002a6a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7ff ff23 	bl	80028dc <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f003 f9dc 	bl	8005e54 <HAL_I2C_Init>
  }
}
 8002a9c:	bf00      	nop
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	20002860 	.word	0x20002860
 8002aa8:	40005c00 	.word	0x40005c00
 8002aac:	40005400 	.word	0x40005400
 8002ab0:	40912732 	.word	0x40912732

08002ab4 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08a      	sub	sp, #40	; 0x28
 8002ab8:	af04      	add	r7, sp, #16
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	4608      	mov	r0, r1
 8002abe:	4611      	mov	r1, r2
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	72fb      	strb	r3, [r7, #11]
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	813b      	strh	r3, [r7, #8]
 8002aca:	4613      	mov	r3, r2
 8002acc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002ad2:	7afb      	ldrb	r3, [r7, #11]
 8002ad4:	b299      	uxth	r1, r3
 8002ad6:	88f8      	ldrh	r0, [r7, #6]
 8002ad8:	893a      	ldrh	r2, [r7, #8]
 8002ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ade:	9302      	str	r3, [sp, #8]
 8002ae0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ae2:	9301      	str	r3, [sp, #4]
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	4603      	mov	r3, r0
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f003 fb86 	bl	80061fc <HAL_I2C_Mem_Read>
 8002af0:	4603      	mov	r3, r0
 8002af2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002af4:	7dfb      	ldrb	r3, [r7, #23]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d004      	beq.n	8002b04 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002afa:	7afb      	ldrb	r3, [r7, #11]
 8002afc:	4619      	mov	r1, r3
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f832 	bl	8002b68 <I2Cx_Error>
  }
  return status;    
 8002b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b08a      	sub	sp, #40	; 0x28
 8002b12:	af04      	add	r7, sp, #16
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	4608      	mov	r0, r1
 8002b18:	4611      	mov	r1, r2
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	72fb      	strb	r3, [r7, #11]
 8002b20:	460b      	mov	r3, r1
 8002b22:	813b      	strh	r3, [r7, #8]
 8002b24:	4613      	mov	r3, r2
 8002b26:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002b2c:	7afb      	ldrb	r3, [r7, #11]
 8002b2e:	b299      	uxth	r1, r3
 8002b30:	88f8      	ldrh	r0, [r7, #6]
 8002b32:	893a      	ldrh	r2, [r7, #8]
 8002b34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b38:	9302      	str	r3, [sp, #8]
 8002b3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b3c:	9301      	str	r3, [sp, #4]
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	4603      	mov	r3, r0
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f003 fa45 	bl	8005fd4 <HAL_I2C_Mem_Write>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002b4e:	7dfb      	ldrb	r3, [r7, #23]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d004      	beq.n	8002b5e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002b54:	7afb      	ldrb	r3, [r7, #11]
 8002b56:	4619      	mov	r1, r3
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 f805 	bl	8002b68 <I2Cx_Error>
  }
  return status;
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f003 f9fd 	bl	8005f74 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff ff5e 	bl	8002a3c <I2Cx_Init>
}
 8002b80:	bf00      	nop
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002b8c:	4802      	ldr	r0, [pc, #8]	; (8002b98 <AUDIO_IO_Init+0x10>)
 8002b8e:	f7ff ff55 	bl	8002a3c <I2Cx_Init>
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20002860 	.word	0x20002860

08002b9c <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
	...

08002bac <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af02      	add	r7, sp, #8
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	71fb      	strb	r3, [r7, #7]
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	80bb      	strh	r3, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8002bbe:	887b      	ldrh	r3, [r7, #2]
 8002bc0:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8002bc2:	89fb      	ldrh	r3, [r7, #14]
 8002bc4:	0a1b      	lsrs	r3, r3, #8
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8002bca:	89fb      	ldrh	r3, [r7, #14]
 8002bcc:	021b      	lsls	r3, r3, #8
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	b21a      	sxth	r2, r3
 8002bd2:	887b      	ldrh	r3, [r7, #2]
 8002bd4:	b21b      	sxth	r3, r3
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	b21b      	sxth	r3, r3
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8002bde:	88ba      	ldrh	r2, [r7, #4]
 8002be0:	79f9      	ldrb	r1, [r7, #7]
 8002be2:	2302      	movs	r3, #2
 8002be4:	9301      	str	r3, [sp, #4]
 8002be6:	1cbb      	adds	r3, r7, #2
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	2302      	movs	r3, #2
 8002bec:	4803      	ldr	r0, [pc, #12]	; (8002bfc <AUDIO_IO_Write+0x50>)
 8002bee:	f7ff ff8e 	bl	8002b0e <I2Cx_WriteMultiple>
}
 8002bf2:	bf00      	nop
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20002860 	.word	0x20002860

08002c00 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	4603      	mov	r3, r0
 8002c08:	460a      	mov	r2, r1
 8002c0a:	71fb      	strb	r3, [r7, #7]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8002c10:	2300      	movs	r3, #0
 8002c12:	81bb      	strh	r3, [r7, #12]
 8002c14:	2300      	movs	r3, #0
 8002c16:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8002c18:	88ba      	ldrh	r2, [r7, #4]
 8002c1a:	79f9      	ldrb	r1, [r7, #7]
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	9301      	str	r3, [sp, #4]
 8002c20:	f107 030c 	add.w	r3, r7, #12
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	2302      	movs	r3, #2
 8002c28:	480a      	ldr	r0, [pc, #40]	; (8002c54 <AUDIO_IO_Read+0x54>)
 8002c2a:	f7ff ff43 	bl	8002ab4 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8002c2e:	89bb      	ldrh	r3, [r7, #12]
 8002c30:	0a1b      	lsrs	r3, r3, #8
 8002c32:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8002c34:	89bb      	ldrh	r3, [r7, #12]
 8002c36:	021b      	lsls	r3, r3, #8
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	b21a      	sxth	r2, r3
 8002c3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	b21b      	sxth	r3, r3
 8002c44:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 8002c46:	89fb      	ldrh	r3, [r7, #14]
 8002c48:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8002c4a:	89bb      	ldrh	r3, [r7, #12]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	20002860 	.word	0x20002860

08002c58 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 fb4b 	bl	80032fc <HAL_Delay>
}
 8002c66:	bf00      	nop
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <BSP_AUDIO_OUT_Init>:
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @note   The I2S PLL input clock must be done in the user application.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{ 
 8002c70:	b590      	push	{r4, r7, lr}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	603a      	str	r2, [r7, #0]
 8002c7a:	80fb      	strh	r3, [r7, #6]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	73fb      	strb	r3, [r7, #15]
  uint32_t deviceid = 0x00;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60bb      	str	r3, [r7, #8]

  /* Disable SAI */
  SAIx_Out_DeInit();
 8002c88:	f000 faae 	bl	80031e8 <SAIx_Out_DeInit>

  /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	6839      	ldr	r1, [r7, #0]
 8002c90:	481c      	ldr	r0, [pc, #112]	; (8002d04 <BSP_AUDIO_OUT_Init+0x94>)
 8002c92:	f000 fa07 	bl	80030a4 <BSP_AUDIO_OUT_ClockConfig>
 
  /* SAI data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002c96:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <BSP_AUDIO_OUT_Init+0x94>)
 8002c98:	4a1b      	ldr	r2, [pc, #108]	; (8002d08 <BSP_AUDIO_OUT_Init+0x98>)
 8002c9a:	601a      	str	r2, [r3, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8002c9c:	4819      	ldr	r0, [pc, #100]	; (8002d04 <BSP_AUDIO_OUT_Init+0x94>)
 8002c9e:	f005 fd13 	bl	80086c8 <HAL_SAI_GetState>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d103      	bne.n	8002cb0 <BSP_AUDIO_OUT_Init+0x40>
  {
    /* Init the SAI MSP: this __weak function can be redefined by the application*/
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 8002ca8:	2100      	movs	r1, #0
 8002caa:	4816      	ldr	r0, [pc, #88]	; (8002d04 <BSP_AUDIO_OUT_Init+0x94>)
 8002cac:	f000 f924 	bl	8002ef8 <BSP_AUDIO_OUT_MspInit>
  }
  SAIx_Out_Init(AudioFreq);
 8002cb0:	6838      	ldr	r0, [r7, #0]
 8002cb2:	f000 fa3b 	bl	800312c <SAIx_Out_Init>

  /* wm8994 codec initialization */
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8002cb6:	4b15      	ldr	r3, [pc, #84]	; (8002d0c <BSP_AUDIO_OUT_Init+0x9c>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2034      	movs	r0, #52	; 0x34
 8002cbc:	4798      	blx	r3
 8002cbe:	60b8      	str	r0, [r7, #8]
  
  if((deviceid) == WM8994_ID)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f648 1294 	movw	r2, #35220	; 0x8994
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d109      	bne.n	8002cde <BSP_AUDIO_OUT_Init+0x6e>
  {  
    /* Reset the Codec Registers */
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8002cca:	4b10      	ldr	r3, [pc, #64]	; (8002d0c <BSP_AUDIO_OUT_Init+0x9c>)
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cce:	2034      	movs	r0, #52	; 0x34
 8002cd0:	4798      	blx	r3
    /* Initialize the audio driver structure */
    audio_drv = &wm8994_drv; 
 8002cd2:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <BSP_AUDIO_OUT_Init+0xa0>)
 8002cd4:	4a0d      	ldr	r2, [pc, #52]	; (8002d0c <BSP_AUDIO_OUT_Init+0x9c>)
 8002cd6:	601a      	str	r2, [r3, #0]
    ret = AUDIO_OK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	73fb      	strb	r3, [r7, #15]
 8002cdc:	e001      	b.n	8002ce2 <BSP_AUDIO_OUT_Init+0x72>
  }
  else
  {
    ret = AUDIO_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d107      	bne.n	8002cf8 <BSP_AUDIO_OUT_Init+0x88>
  {
    /* Initialize the codec internal registers */
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8002ce8:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <BSP_AUDIO_OUT_Init+0xa0>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681c      	ldr	r4, [r3, #0]
 8002cee:	797a      	ldrb	r2, [r7, #5]
 8002cf0:	88f9      	ldrh	r1, [r7, #6]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2034      	movs	r0, #52	; 0x34
 8002cf6:	47a0      	blx	r4
  }
 
  return ret;
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd90      	pop	{r4, r7, pc}
 8002d02:	bf00      	nop
 8002d04:	200028b8 	.word	0x200028b8
 8002d08:	40015c04 	.word	0x40015c04
 8002d0c:	20000008 	.word	0x20000008
 8002d10:	200028b4 	.word	0x200028b4

08002d14 <BSP_AUDIO_OUT_Play>:
  * @param  Size: Number of audio data in BYTES unit.
  *         In memory, first element is for left channel, second element is for right channel
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8002d1e:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <BSP_AUDIO_OUT_Play+0x4c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	b292      	uxth	r2, r2
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	2034      	movs	r0, #52	; 0x34
 8002d2c:	4798      	blx	r3
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <BSP_AUDIO_OUT_Play+0x24>
  {  
    return AUDIO_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e00f      	b.n	8002d58 <BSP_AUDIO_OUT_Play+0x44>
  }
  else
  {
    /* Update the Media layer and enable it for play */  
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d3e:	d203      	bcs.n	8002d48 <BSP_AUDIO_OUT_Play+0x34>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	085b      	lsrs	r3, r3, #1
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	e001      	b.n	8002d4c <BSP_AUDIO_OUT_Play+0x38>
 8002d48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	4804      	ldr	r0, [pc, #16]	; (8002d64 <BSP_AUDIO_OUT_Play+0x50>)
 8002d52:	f005 fc09 	bl	8008568 <HAL_SAI_Transmit_DMA>
    
    return AUDIO_OK;
 8002d56:	2300      	movs	r3, #0
  }
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	200028b4 	.word	0x200028b4
 8002d64:	200028b8 	.word	0x200028b8

08002d68 <BSP_AUDIO_OUT_Pause>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behaviour).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Pause(void)
{    
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(audio_drv->Pause(AUDIO_I2C_ADDRESS) != 0)
 8002d6c:	4b07      	ldr	r3, [pc, #28]	; (8002d8c <BSP_AUDIO_OUT_Pause+0x24>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	2034      	movs	r0, #52	; 0x34
 8002d74:	4798      	blx	r3
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <BSP_AUDIO_OUT_Pause+0x18>
  {
    return AUDIO_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e003      	b.n	8002d88 <BSP_AUDIO_OUT_Pause+0x20>
  }
  else
  {
    /* Call the Media layer pause function */
    HAL_SAI_DMAPause(&haudio_out_sai);
 8002d80:	4803      	ldr	r0, [pc, #12]	; (8002d90 <BSP_AUDIO_OUT_Pause+0x28>)
 8002d82:	f005 fb2a 	bl	80083da <HAL_SAI_DMAPause>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8002d86:	2300      	movs	r3, #0
  }
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	200028b4 	.word	0x200028b4
 8002d90:	200028b8 	.word	0x200028b8

08002d94 <BSP_AUDIO_OUT_Resume>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behaviour).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Resume(void)
{    
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(audio_drv->Resume(AUDIO_I2C_ADDRESS) != 0)
 8002d98:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <BSP_AUDIO_OUT_Resume+0x24>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	2034      	movs	r0, #52	; 0x34
 8002da0:	4798      	blx	r3
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <BSP_AUDIO_OUT_Resume+0x18>
  {
    return AUDIO_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e003      	b.n	8002db4 <BSP_AUDIO_OUT_Resume+0x20>
  }
  else
  {
    /* Call the Media layer pause/resume function */
    HAL_SAI_DMAResume(&haudio_out_sai);
 8002dac:	4803      	ldr	r0, [pc, #12]	; (8002dbc <BSP_AUDIO_OUT_Resume+0x28>)
 8002dae:	f005 fb36 	bl	800841e <HAL_SAI_DMAResume>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8002db2:	2300      	movs	r3, #0
  }
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	200028b4 	.word	0x200028b4
 8002dbc:	200028b8 	.word	0x200028b8

08002dc0 <BSP_AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Stop(uint32_t Option)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_out_sai);
 8002dc8:	480c      	ldr	r0, [pc, #48]	; (8002dfc <BSP_AUDIO_OUT_Stop+0x3c>)
 8002dca:	f005 fb59 	bl	8008480 <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8002dce:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <BSP_AUDIO_OUT_Stop+0x40>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	2034      	movs	r0, #52	; 0x34
 8002dd8:	4798      	blx	r3
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <BSP_AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e006      	b.n	8002df2 <BSP_AUDIO_OUT_Stop+0x32>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d102      	bne.n	8002df0 <BSP_AUDIO_OUT_Stop+0x30>
    { 
      /* Wait at least 100us */
      HAL_Delay(1);
 8002dea:	2001      	movs	r0, #1
 8002dec:	f000 fa86 	bl	80032fc <HAL_Delay>
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8002df0:	2300      	movs	r3, #0
  }
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	200028b8 	.word	0x200028b8
 8002e00:	200028b4 	.word	0x200028b4

08002e04 <BSP_AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_SetVolume(uint8_t Volume)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8002e0e:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <BSP_AUDIO_OUT_SetVolume+0x2c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	79fa      	ldrb	r2, [r7, #7]
 8002e16:	4611      	mov	r1, r2
 8002e18:	2034      	movs	r0, #52	; 0x34
 8002e1a:	4798      	blx	r3
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <BSP_AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <BSP_AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8002e26:	2300      	movs	r3, #0
  }
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	200028b4 	.word	0x200028b4

08002e34 <BSP_AUDIO_OUT_SetAudioFrameSlot>:
  * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
  *         audio frame slot.
  * @retval None
  */
void BSP_AUDIO_OUT_SetAudioFrameSlot(uint32_t AudioFrameSlot)
{ 
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e4a:	601a      	str	r2, [r3, #0]
  
  /* Update the SAI audio frame slot configuration */
  haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 8002e4c:	4a08      	ldr	r2, [pc, #32]	; (8002e70 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6613      	str	r3, [r2, #96]	; 0x60
  HAL_SAI_Init(&haudio_out_sai);
 8002e52:	4807      	ldr	r0, [pc, #28]	; (8002e70 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8002e54:	f005 f90e 	bl	8008074 <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8002e58:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e66:	601a      	str	r2, [r3, #0]
}
 8002e68:	bf00      	nop
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	200028b8 	.word	0x200028b8

08002e74 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8002e7c:	f7fe f95e 	bl	800113c <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8002e80:	bf00      	nop
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8002e90:	f7fe f968 	bl	8001164 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8002e94:	bf00      	nop
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8002ea4:	480e      	ldr	r0, [pc, #56]	; (8002ee0 <HAL_SAI_ErrorCallback+0x44>)
 8002ea6:	f005 fc0f 	bl	80086c8 <HAL_SAI_GetState>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8002eae:	480d      	ldr	r0, [pc, #52]	; (8002ee4 <HAL_SAI_ErrorCallback+0x48>)
 8002eb0:	f005 fc0a 	bl	80086c8 <HAL_SAI_GetState>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d002      	beq.n	8002ec4 <HAL_SAI_ErrorCallback+0x28>
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	2b12      	cmp	r3, #18
 8002ec2:	d101      	bne.n	8002ec8 <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8002ec4:	f000 f810 	bl	8002ee8 <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8002ec8:	7bbb      	ldrb	r3, [r7, #14]
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d002      	beq.n	8002ed4 <HAL_SAI_ErrorCallback+0x38>
 8002ece:	7bbb      	ldrb	r3, [r7, #14]
 8002ed0:	2b22      	cmp	r3, #34	; 0x22
 8002ed2:	d101      	bne.n	8002ed8 <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8002ed4:	f000 f99e 	bl	8003214 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8002ed8:	bf00      	nop
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	200028b8 	.word	0x200028b8
 8002ee4:	2000293c 	.word	0x2000293c

08002ee8 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08c      	sub	sp, #48	; 0x30
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8002f02:	4b63      	ldr	r3, [pc, #396]	; (8003090 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f06:	4a62      	ldr	r2, [pc, #392]	; (8003090 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002f08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f0e:	4b60      	ldr	r3, [pc, #384]	; (8003090 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f16:	61bb      	str	r3, [r7, #24]
 8002f18:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8002f1a:	4b5d      	ldr	r3, [pc, #372]	; (8003090 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	4a5c      	ldr	r2, [pc, #368]	; (8003090 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f24:	6313      	str	r3, [r2, #48]	; 0x30
 8002f26:	4b5a      	ldr	r3, [pc, #360]	; (8003090 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8002f32:	4b57      	ldr	r3, [pc, #348]	; (8003090 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	4a56      	ldr	r2, [pc, #344]	; (8003090 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3e:	4b54      	ldr	r3, [pc, #336]	; (8003090 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8002f4a:	4b51      	ldr	r3, [pc, #324]	; (8003090 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	4a50      	ldr	r2, [pc, #320]	; (8003090 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f54:	6313      	str	r3, [r2, #48]	; 0x30
 8002f56:	4b4e      	ldr	r3, [pc, #312]	; (8003090 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8002f62:	2380      	movs	r3, #128	; 0x80
 8002f64:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002f66:	2302      	movs	r3, #2
 8002f68:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8002f72:	230a      	movs	r3, #10
 8002f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8002f76:	f107 031c 	add.w	r3, r7, #28
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4845      	ldr	r0, [pc, #276]	; (8003094 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8002f7e:	f000 ff39 	bl	8003df4 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8002f82:	2320      	movs	r3, #32
 8002f84:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002f86:	2302      	movs	r3, #2
 8002f88:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8002f92:	230a      	movs	r3, #10
 8002f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8002f96:	f107 031c 	add.w	r3, r7, #28
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	483d      	ldr	r0, [pc, #244]	; (8003094 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8002f9e:	f000 ff29 	bl	8003df4 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8002fa2:	2340      	movs	r3, #64	; 0x40
 8002fa4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8002fb2:	230a      	movs	r3, #10
 8002fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8002fb6:	f107 031c 	add.w	r3, r7, #28
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4835      	ldr	r0, [pc, #212]	; (8003094 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8002fbe:	f000 ff19 	bl	8003df4 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8002fc2:	2310      	movs	r3, #16
 8002fc4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8002fd2:	230a      	movs	r3, #10
 8002fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8002fd6:	f107 031c 	add.w	r3, r7, #28
 8002fda:	4619      	mov	r1, r3
 8002fdc:	482d      	ldr	r0, [pc, #180]	; (8003094 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8002fde:	f000 ff09 	bl	8003df4 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8002fe2:	4b2b      	ldr	r3, [pc, #172]	; (8003090 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	4a2a      	ldr	r2, [pc, #168]	; (8003090 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002fe8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fec:	6313      	str	r3, [r2, #48]	; 0x30
 8002fee:	4b28      	ldr	r3, [pc, #160]	; (8003090 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a26      	ldr	r2, [pc, #152]	; (8003098 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d138      	bne.n	8003076 <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8003004:	4b25      	ldr	r3, [pc, #148]	; (800309c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003006:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800300a:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800300c:	4b23      	ldr	r3, [pc, #140]	; (800309c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800300e:	2240      	movs	r2, #64	; 0x40
 8003010:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003012:	4b22      	ldr	r3, [pc, #136]	; (800309c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003014:	2200      	movs	r2, #0
 8003016:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8003018:	4b20      	ldr	r3, [pc, #128]	; (800309c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800301a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800301e:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8003020:	4b1e      	ldr	r3, [pc, #120]	; (800309c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003022:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003026:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8003028:	4b1c      	ldr	r3, [pc, #112]	; (800309c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800302a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800302e:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8003030:	4b1a      	ldr	r3, [pc, #104]	; (800309c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003032:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003036:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8003038:	4b18      	ldr	r3, [pc, #96]	; (800309c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800303a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800303e:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8003040:	4b16      	ldr	r3, [pc, #88]	; (800309c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003042:	2204      	movs	r2, #4
 8003044:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003046:	4b15      	ldr	r3, [pc, #84]	; (800309c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003048:	2203      	movs	r2, #3
 800304a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800304c:	4b13      	ldr	r3, [pc, #76]	; (800309c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800304e:	2200      	movs	r2, #0
 8003050:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003052:	4b12      	ldr	r3, [pc, #72]	; (800309c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003054:	2200      	movs	r2, #0
 8003056:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8003058:	4b10      	ldr	r3, [pc, #64]	; (800309c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800305a:	4a11      	ldr	r2, [pc, #68]	; (80030a0 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 800305c:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a0e      	ldr	r2, [pc, #56]	; (800309c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003062:	66da      	str	r2, [r3, #108]	; 0x6c
 8003064:	4a0d      	ldr	r2, [pc, #52]	; (800309c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 800306a:	480c      	ldr	r0, [pc, #48]	; (800309c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800306c:	f000 fb2a 	bl	80036c4 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8003070:	480a      	ldr	r0, [pc, #40]	; (800309c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003072:	f000 fa79 	bl	8003568 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8003076:	2200      	movs	r2, #0
 8003078:	210e      	movs	r1, #14
 800307a:	203c      	movs	r0, #60	; 0x3c
 800307c:	f000 fa3d 	bl	80034fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8003080:	203c      	movs	r0, #60	; 0x3c
 8003082:	f000 fa56 	bl	8003532 <HAL_NVIC_EnableIRQ>
}
 8003086:	bf00      	nop
 8003088:	3730      	adds	r7, #48	; 0x30
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40023800 	.word	0x40023800
 8003094:	40022000 	.word	0x40022000
 8003098:	40015c04 	.word	0x40015c04
 800309c:	200029c0 	.word	0x200029c0
 80030a0:	40026470 	.word	0x40026470

080030a4 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b0a6      	sub	sp, #152	; 0x98
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 80030b0:	f107 0314 	add.w	r3, r7, #20
 80030b4:	4618      	mov	r0, r3
 80030b6:	f004 fd91 	bl	8007bdc <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	f642 3211 	movw	r2, #11025	; 0x2b11
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d009      	beq.n	80030d8 <BSP_AUDIO_OUT_ClockConfig+0x34>
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f245 6222 	movw	r2, #22050	; 0x5622
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d004      	beq.n	80030d8 <BSP_AUDIO_OUT_ClockConfig+0x34>
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f64a 4244 	movw	r2, #44100	; 0xac44
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d112      	bne.n	80030fe <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80030d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030dc:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 80030de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030e2:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 80030e4:	f240 13ad 	movw	r3, #429	; 0x1ad
 80030e8:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 80030ea:	2302      	movs	r3, #2
 80030ec:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 80030ee:	2313      	movs	r3, #19
 80030f0:	63bb      	str	r3, [r7, #56]	; 0x38

    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80030f2:	f107 0314 	add.w	r3, r7, #20
 80030f6:	4618      	mov	r0, r3
 80030f8:	f004 f980 	bl	80073fc <HAL_RCCEx_PeriphCLKConfig>
 80030fc:	e012      	b.n	8003124 <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80030fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003102:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8003104:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003108:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 800310a:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800310e:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8003110:	2307      	movs	r3, #7
 8003112:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8003114:	2301      	movs	r3, #1
 8003116:	63bb      	str	r3, [r7, #56]	; 0x38

    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003118:	f107 0314 	add.w	r3, r7, #20
 800311c:	4618      	mov	r0, r3
 800311e:	f004 f96d 	bl	80073fc <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8003122:	bf00      	nop
 8003124:	bf00      	nop
 8003126:	3798      	adds	r7, #152	; 0x98
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <SAIx_Out_Init>:
  * @note   The default SlotActive configuration is set to CODEC_AUDIOFRAME_SLOT_0123 
  *         and user can update this configuration using 
  * @retval None
  */
static void SAIx_Out_Init(uint32_t AudioFreq)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8003134:	4b2a      	ldr	r3, [pc, #168]	; (80031e0 <SAIx_Out_Init+0xb4>)
 8003136:	4a2b      	ldr	r2, [pc, #172]	; (80031e4 <SAIx_Out_Init+0xb8>)
 8003138:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800313a:	4b29      	ldr	r3, [pc, #164]	; (80031e0 <SAIx_Out_Init+0xb4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	4b27      	ldr	r3, [pc, #156]	; (80031e0 <SAIx_Out_Init+0xb4>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003148:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x 
  LSBFirst: Disabled 
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 800314a:	4a25      	ldr	r2, [pc, #148]	; (80031e0 <SAIx_Out_Init+0xb4>)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 8003150:	4b23      	ldr	r3, [pc, #140]	; (80031e0 <SAIx_Out_Init+0xb4>)
 8003152:	2200      	movs	r2, #0
 8003154:	605a      	str	r2, [r3, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8003156:	4b22      	ldr	r3, [pc, #136]	; (80031e0 <SAIx_Out_Init+0xb4>)
 8003158:	2200      	movs	r2, #0
 800315a:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 800315c:	4b20      	ldr	r3, [pc, #128]	; (80031e0 <SAIx_Out_Init+0xb4>)
 800315e:	2200      	movs	r2, #0
 8003160:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8003162:	4b1f      	ldr	r3, [pc, #124]	; (80031e0 <SAIx_Out_Init+0xb4>)
 8003164:	2280      	movs	r2, #128	; 0x80
 8003166:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003168:	4b1d      	ldr	r3, [pc, #116]	; (80031e0 <SAIx_Out_Init+0xb4>)
 800316a:	2200      	movs	r2, #0
 800316c:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800316e:	4b1c      	ldr	r3, [pc, #112]	; (80031e0 <SAIx_Out_Init+0xb4>)
 8003170:	2201      	movs	r2, #1
 8003172:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8003174:	4b1a      	ldr	r3, [pc, #104]	; (80031e0 <SAIx_Out_Init+0xb4>)
 8003176:	2200      	movs	r2, #0
 8003178:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 800317a:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <SAIx_Out_Init+0xb4>)
 800317c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003180:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8003182:	4b17      	ldr	r3, [pc, #92]	; (80031e0 <SAIx_Out_Init+0xb4>)
 8003184:	2201      	movs	r2, #1
 8003186:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */ 
  haudio_out_sai.FrameInit.FrameLength = 64; 
 8003188:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <SAIx_Out_Init+0xb4>)
 800318a:	2240      	movs	r2, #64	; 0x40
 800318c:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 800318e:	4b14      	ldr	r3, [pc, #80]	; (80031e0 <SAIx_Out_Init+0xb4>)
 8003190:	2220      	movs	r2, #32
 8003192:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8003194:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <SAIx_Out_Init+0xb4>)
 8003196:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800319a:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800319c:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <SAIx_Out_Init+0xb4>)
 800319e:	2200      	movs	r2, #0
 80031a0:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80031a2:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <SAIx_Out_Init+0xb4>)
 80031a4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80031a8:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot 
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 80031aa:	4b0d      	ldr	r3, [pc, #52]	; (80031e0 <SAIx_Out_Init+0xb4>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80031b0:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <SAIx_Out_Init+0xb4>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4; 
 80031b6:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <SAIx_Out_Init+0xb4>)
 80031b8:	2204      	movs	r2, #4
 80031ba:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 80031bc:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <SAIx_Out_Init+0xb4>)
 80031be:	220f      	movs	r2, #15
 80031c0:	661a      	str	r2, [r3, #96]	; 0x60

  HAL_SAI_Init(&haudio_out_sai);
 80031c2:	4807      	ldr	r0, [pc, #28]	; (80031e0 <SAIx_Out_Init+0xb4>)
 80031c4:	f004 ff56 	bl	8008074 <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 80031c8:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <SAIx_Out_Init+0xb4>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <SAIx_Out_Init+0xb4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80031d6:	601a      	str	r2, [r3, #0]
}
 80031d8:	bf00      	nop
 80031da:	3708      	adds	r7, #8
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	200028b8 	.word	0x200028b8
 80031e4:	40015c04 	.word	0x40015c04

080031e8 <SAIx_Out_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80031ec:	4b07      	ldr	r3, [pc, #28]	; (800320c <SAIx_Out_DeInit+0x24>)
 80031ee:	4a08      	ldr	r2, [pc, #32]	; (8003210 <SAIx_Out_DeInit+0x28>)
 80031f0:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80031f2:	4b06      	ldr	r3, [pc, #24]	; (800320c <SAIx_Out_DeInit+0x24>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4b04      	ldr	r3, [pc, #16]	; (800320c <SAIx_Out_DeInit+0x24>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003200:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_out_sai);
 8003202:	4802      	ldr	r0, [pc, #8]	; (800320c <SAIx_Out_DeInit+0x24>)
 8003204:	f005 f8b4 	bl	8008370 <HAL_SAI_DeInit>
}
 8003208:	bf00      	nop
 800320a:	bd80      	pop	{r7, pc}
 800320c:	200028b8 	.word	0x200028b8
 8003210:	40015c04 	.word	0x40015c04

08003214 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8003218:	bf00      	nop
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
	...

08003224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8003228:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <HAL_Init+0x34>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a0a      	ldr	r2, [pc, #40]	; (8003258 <HAL_Init+0x34>)
 800322e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003232:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003234:	4b08      	ldr	r3, [pc, #32]	; (8003258 <HAL_Init+0x34>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a07      	ldr	r2, [pc, #28]	; (8003258 <HAL_Init+0x34>)
 800323a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800323e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003240:	2003      	movs	r0, #3
 8003242:	f000 f94f 	bl	80034e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003246:	200f      	movs	r0, #15
 8003248:	f000 f808 	bl	800325c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800324c:	f7fd fd44 	bl	8000cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40023c00 	.word	0x40023c00

0800325c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003264:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <HAL_InitTick+0x54>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <HAL_InitTick+0x58>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	4619      	mov	r1, r3
 800326e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003272:	fbb3 f3f1 	udiv	r3, r3, r1
 8003276:	fbb2 f3f3 	udiv	r3, r2, r3
 800327a:	4618      	mov	r0, r3
 800327c:	f000 f967 	bl	800354e <HAL_SYSTICK_Config>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e00e      	b.n	80032a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b0f      	cmp	r3, #15
 800328e:	d80a      	bhi.n	80032a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003290:	2200      	movs	r2, #0
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	f04f 30ff 	mov.w	r0, #4294967295
 8003298:	f000 f92f 	bl	80034fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800329c:	4a06      	ldr	r2, [pc, #24]	; (80032b8 <HAL_InitTick+0x5c>)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	e000      	b.n	80032a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	20000000 	.word	0x20000000
 80032b4:	20000040 	.word	0x20000040
 80032b8:	2000003c 	.word	0x2000003c

080032bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032c0:	4b06      	ldr	r3, [pc, #24]	; (80032dc <HAL_IncTick+0x20>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <HAL_IncTick+0x24>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4413      	add	r3, r2
 80032cc:	4a04      	ldr	r2, [pc, #16]	; (80032e0 <HAL_IncTick+0x24>)
 80032ce:	6013      	str	r3, [r2, #0]
}
 80032d0:	bf00      	nop
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	20000040 	.word	0x20000040
 80032e0:	20002a20 	.word	0x20002a20

080032e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  return uwTick;
 80032e8:	4b03      	ldr	r3, [pc, #12]	; (80032f8 <HAL_GetTick+0x14>)
 80032ea:	681b      	ldr	r3, [r3, #0]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	20002a20 	.word	0x20002a20

080032fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003304:	f7ff ffee 	bl	80032e4 <HAL_GetTick>
 8003308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003314:	d005      	beq.n	8003322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003316:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <HAL_Delay+0x44>)
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	461a      	mov	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4413      	add	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003322:	bf00      	nop
 8003324:	f7ff ffde 	bl	80032e4 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	429a      	cmp	r2, r3
 8003332:	d8f7      	bhi.n	8003324 <HAL_Delay+0x28>
  {
  }
}
 8003334:	bf00      	nop
 8003336:	bf00      	nop
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	20000040 	.word	0x20000040

08003344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003354:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <__NVIC_SetPriorityGrouping+0x40>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003360:	4013      	ands	r3, r2
 8003362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800336c:	4b06      	ldr	r3, [pc, #24]	; (8003388 <__NVIC_SetPriorityGrouping+0x44>)
 800336e:	4313      	orrs	r3, r2
 8003370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003372:	4a04      	ldr	r2, [pc, #16]	; (8003384 <__NVIC_SetPriorityGrouping+0x40>)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	60d3      	str	r3, [r2, #12]
}
 8003378:	bf00      	nop
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	e000ed00 	.word	0xe000ed00
 8003388:	05fa0000 	.word	0x05fa0000

0800338c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003390:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	0a1b      	lsrs	r3, r3, #8
 8003396:	f003 0307 	and.w	r3, r3, #7
}
 800339a:	4618      	mov	r0, r3
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	db0b      	blt.n	80033d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	f003 021f 	and.w	r2, r3, #31
 80033c0:	4907      	ldr	r1, [pc, #28]	; (80033e0 <__NVIC_EnableIRQ+0x38>)
 80033c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	2001      	movs	r0, #1
 80033ca:	fa00 f202 	lsl.w	r2, r0, r2
 80033ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	e000e100 	.word	0xe000e100

080033e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	6039      	str	r1, [r7, #0]
 80033ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	db0a      	blt.n	800340e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	490c      	ldr	r1, [pc, #48]	; (8003430 <__NVIC_SetPriority+0x4c>)
 80033fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003402:	0112      	lsls	r2, r2, #4
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	440b      	add	r3, r1
 8003408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800340c:	e00a      	b.n	8003424 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	b2da      	uxtb	r2, r3
 8003412:	4908      	ldr	r1, [pc, #32]	; (8003434 <__NVIC_SetPriority+0x50>)
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	3b04      	subs	r3, #4
 800341c:	0112      	lsls	r2, r2, #4
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	440b      	add	r3, r1
 8003422:	761a      	strb	r2, [r3, #24]
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	e000e100 	.word	0xe000e100
 8003434:	e000ed00 	.word	0xe000ed00

08003438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003438:	b480      	push	{r7}
 800343a:	b089      	sub	sp, #36	; 0x24
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f1c3 0307 	rsb	r3, r3, #7
 8003452:	2b04      	cmp	r3, #4
 8003454:	bf28      	it	cs
 8003456:	2304      	movcs	r3, #4
 8003458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	3304      	adds	r3, #4
 800345e:	2b06      	cmp	r3, #6
 8003460:	d902      	bls.n	8003468 <NVIC_EncodePriority+0x30>
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	3b03      	subs	r3, #3
 8003466:	e000      	b.n	800346a <NVIC_EncodePriority+0x32>
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800346c:	f04f 32ff 	mov.w	r2, #4294967295
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43da      	mvns	r2, r3
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	401a      	ands	r2, r3
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003480:	f04f 31ff 	mov.w	r1, #4294967295
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	fa01 f303 	lsl.w	r3, r1, r3
 800348a:	43d9      	mvns	r1, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003490:	4313      	orrs	r3, r2
         );
}
 8003492:	4618      	mov	r0, r3
 8003494:	3724      	adds	r7, #36	; 0x24
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
	...

080034a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034b0:	d301      	bcc.n	80034b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034b2:	2301      	movs	r3, #1
 80034b4:	e00f      	b.n	80034d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034b6:	4a0a      	ldr	r2, [pc, #40]	; (80034e0 <SysTick_Config+0x40>)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034be:	210f      	movs	r1, #15
 80034c0:	f04f 30ff 	mov.w	r0, #4294967295
 80034c4:	f7ff ff8e 	bl	80033e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034c8:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <SysTick_Config+0x40>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ce:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <SysTick_Config+0x40>)
 80034d0:	2207      	movs	r2, #7
 80034d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	e000e010 	.word	0xe000e010

080034e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff ff29 	bl	8003344 <__NVIC_SetPriorityGrouping>
}
 80034f2:	bf00      	nop
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b086      	sub	sp, #24
 80034fe:	af00      	add	r7, sp, #0
 8003500:	4603      	mov	r3, r0
 8003502:	60b9      	str	r1, [r7, #8]
 8003504:	607a      	str	r2, [r7, #4]
 8003506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800350c:	f7ff ff3e 	bl	800338c <__NVIC_GetPriorityGrouping>
 8003510:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	68b9      	ldr	r1, [r7, #8]
 8003516:	6978      	ldr	r0, [r7, #20]
 8003518:	f7ff ff8e 	bl	8003438 <NVIC_EncodePriority>
 800351c:	4602      	mov	r2, r0
 800351e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003522:	4611      	mov	r1, r2
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff ff5d 	bl	80033e4 <__NVIC_SetPriority>
}
 800352a:	bf00      	nop
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b082      	sub	sp, #8
 8003536:	af00      	add	r7, sp, #0
 8003538:	4603      	mov	r3, r0
 800353a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800353c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff ff31 	bl	80033a8 <__NVIC_EnableIRQ>
}
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7ff ffa2 	bl	80034a0 <SysTick_Config>
 800355c:	4603      	mov	r3, r0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003574:	f7ff feb6 	bl	80032e4 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e099      	b.n	80036b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0201 	bic.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035a4:	e00f      	b.n	80035c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035a6:	f7ff fe9d 	bl	80032e4 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b05      	cmp	r3, #5
 80035b2:	d908      	bls.n	80035c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2220      	movs	r2, #32
 80035b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2203      	movs	r2, #3
 80035be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e078      	b.n	80036b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1e8      	bne.n	80035a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	4b38      	ldr	r3, [pc, #224]	; (80036c0 <HAL_DMA_Init+0x158>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800360a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	2b04      	cmp	r3, #4
 800361e:	d107      	bne.n	8003630 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003628:	4313      	orrs	r3, r2
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	4313      	orrs	r3, r2
 800362e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f023 0307 	bic.w	r3, r3, #7
 8003646:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	4313      	orrs	r3, r2
 8003650:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	2b04      	cmp	r3, #4
 8003658:	d117      	bne.n	800368a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00e      	beq.n	800368a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 fb45 	bl	8003cfc <DMA_CheckFifoParam>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d008      	beq.n	800368a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2240      	movs	r2, #64	; 0x40
 800367c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003686:	2301      	movs	r3, #1
 8003688:	e016      	b.n	80036b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 fafc 	bl	8003c90 <DMA_CalcBaseAndBitshift>
 8003698:	4603      	mov	r3, r0
 800369a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a0:	223f      	movs	r2, #63	; 0x3f
 80036a2:	409a      	lsls	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	f010803f 	.word	0xf010803f

080036c4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e050      	b.n	8003778 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d101      	bne.n	80036e6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80036e2:	2302      	movs	r3, #2
 80036e4:	e048      	b.n	8003778 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0201 	bic.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2200      	movs	r2, #0
 8003704:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2200      	movs	r2, #0
 800370c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2200      	movs	r2, #0
 8003714:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2200      	movs	r2, #0
 800371c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2221      	movs	r2, #33	; 0x21
 8003724:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fab2 	bl	8003c90 <DMA_CalcBaseAndBitshift>
 800372c:	4603      	mov	r3, r0
 800372e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003734:	223f      	movs	r2, #63	; 0x3f
 8003736:	409a      	lsls	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003796:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <HAL_DMA_Start_IT+0x26>
 80037a2:	2302      	movs	r3, #2
 80037a4:	e048      	b.n	8003838 <HAL_DMA_Start_IT+0xb8>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d137      	bne.n	800382a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2202      	movs	r2, #2
 80037be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	68b9      	ldr	r1, [r7, #8]
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 fa30 	bl	8003c34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d8:	223f      	movs	r2, #63	; 0x3f
 80037da:	409a      	lsls	r2, r3
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0216 	orr.w	r2, r2, #22
 80037ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695a      	ldr	r2, [r3, #20]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037fe:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	2b00      	cmp	r3, #0
 8003806:	d007      	beq.n	8003818 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0208 	orr.w	r2, r2, #8
 8003816:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	e005      	b.n	8003836 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003832:	2302      	movs	r3, #2
 8003834:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003836:	7dfb      	ldrb	r3, [r7, #23]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800384e:	f7ff fd49 	bl	80032e4 <HAL_GetTick>
 8003852:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d008      	beq.n	8003872 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2280      	movs	r2, #128	; 0x80
 8003864:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e052      	b.n	8003918 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0216 	bic.w	r2, r2, #22
 8003880:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695a      	ldr	r2, [r3, #20]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003890:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	2b00      	cmp	r3, #0
 8003898:	d103      	bne.n	80038a2 <HAL_DMA_Abort+0x62>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d007      	beq.n	80038b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0208 	bic.w	r2, r2, #8
 80038b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0201 	bic.w	r2, r2, #1
 80038c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038c2:	e013      	b.n	80038ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038c4:	f7ff fd0e 	bl	80032e4 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b05      	cmp	r3, #5
 80038d0:	d90c      	bls.n	80038ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2220      	movs	r2, #32
 80038d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2203      	movs	r2, #3
 80038dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e015      	b.n	8003918 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1e4      	bne.n	80038c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fe:	223f      	movs	r2, #63	; 0x3f
 8003900:	409a      	lsls	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003928:	2300      	movs	r3, #0
 800392a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800392c:	4b8e      	ldr	r3, [pc, #568]	; (8003b68 <HAL_DMA_IRQHandler+0x248>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a8e      	ldr	r2, [pc, #568]	; (8003b6c <HAL_DMA_IRQHandler+0x24c>)
 8003932:	fba2 2303 	umull	r2, r3, r2, r3
 8003936:	0a9b      	lsrs	r3, r3, #10
 8003938:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394a:	2208      	movs	r2, #8
 800394c:	409a      	lsls	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4013      	ands	r3, r2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d01a      	beq.n	800398c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d013      	beq.n	800398c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0204 	bic.w	r2, r2, #4
 8003972:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003978:	2208      	movs	r2, #8
 800397a:	409a      	lsls	r2, r3
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003984:	f043 0201 	orr.w	r2, r3, #1
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003990:	2201      	movs	r2, #1
 8003992:	409a      	lsls	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4013      	ands	r3, r2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d012      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00b      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ae:	2201      	movs	r2, #1
 80039b0:	409a      	lsls	r2, r3
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ba:	f043 0202 	orr.w	r2, r3, #2
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c6:	2204      	movs	r2, #4
 80039c8:	409a      	lsls	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4013      	ands	r3, r2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d012      	beq.n	80039f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00b      	beq.n	80039f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e4:	2204      	movs	r2, #4
 80039e6:	409a      	lsls	r2, r3
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f0:	f043 0204 	orr.w	r2, r3, #4
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fc:	2210      	movs	r2, #16
 80039fe:	409a      	lsls	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4013      	ands	r3, r2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d043      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d03c      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1a:	2210      	movs	r2, #16
 8003a1c:	409a      	lsls	r2, r3
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d018      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d108      	bne.n	8003a50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d024      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	4798      	blx	r3
 8003a4e:	e01f      	b.n	8003a90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d01b      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	4798      	blx	r3
 8003a60:	e016      	b.n	8003a90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d107      	bne.n	8003a80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0208 	bic.w	r2, r2, #8
 8003a7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a94:	2220      	movs	r2, #32
 8003a96:	409a      	lsls	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 808f 	beq.w	8003bc0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0310 	and.w	r3, r3, #16
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 8087 	beq.w	8003bc0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	409a      	lsls	r2, r3
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b05      	cmp	r3, #5
 8003ac8:	d136      	bne.n	8003b38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0216 	bic.w	r2, r2, #22
 8003ad8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695a      	ldr	r2, [r3, #20]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ae8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d103      	bne.n	8003afa <HAL_DMA_IRQHandler+0x1da>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d007      	beq.n	8003b0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0208 	bic.w	r2, r2, #8
 8003b08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0e:	223f      	movs	r2, #63	; 0x3f
 8003b10:	409a      	lsls	r2, r3
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d07e      	beq.n	8003c2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	4798      	blx	r3
        }
        return;
 8003b36:	e079      	b.n	8003c2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d01d      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10d      	bne.n	8003b70 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d031      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	4798      	blx	r3
 8003b64:	e02c      	b.n	8003bc0 <HAL_DMA_IRQHandler+0x2a0>
 8003b66:	bf00      	nop
 8003b68:	20000000 	.word	0x20000000
 8003b6c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d023      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	4798      	blx	r3
 8003b80:	e01e      	b.n	8003bc0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10f      	bne.n	8003bb0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0210 	bic.w	r2, r2, #16
 8003b9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d032      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d022      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2205      	movs	r2, #5
 8003bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0201 	bic.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d307      	bcc.n	8003c08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f2      	bne.n	8003bec <HAL_DMA_IRQHandler+0x2cc>
 8003c06:	e000      	b.n	8003c0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d005      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	4798      	blx	r3
 8003c2a:	e000      	b.n	8003c2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c2c:	bf00      	nop
    }
  }
}
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b40      	cmp	r3, #64	; 0x40
 8003c60:	d108      	bne.n	8003c74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c72:	e007      	b.n	8003c84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	60da      	str	r2, [r3, #12]
}
 8003c84:	bf00      	nop
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	3b10      	subs	r3, #16
 8003ca0:	4a13      	ldr	r2, [pc, #76]	; (8003cf0 <DMA_CalcBaseAndBitshift+0x60>)
 8003ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca6:	091b      	lsrs	r3, r3, #4
 8003ca8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003caa:	4a12      	ldr	r2, [pc, #72]	; (8003cf4 <DMA_CalcBaseAndBitshift+0x64>)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4413      	add	r3, r2
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	d908      	bls.n	8003cd0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <DMA_CalcBaseAndBitshift+0x68>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	1d1a      	adds	r2, r3, #4
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	659a      	str	r2, [r3, #88]	; 0x58
 8003cce:	e006      	b.n	8003cde <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	4b08      	ldr	r3, [pc, #32]	; (8003cf8 <DMA_CalcBaseAndBitshift+0x68>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	aaaaaaab 	.word	0xaaaaaaab
 8003cf4:	08010cbc 	.word	0x08010cbc
 8003cf8:	fffffc00 	.word	0xfffffc00

08003cfc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d11f      	bne.n	8003d56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2b03      	cmp	r3, #3
 8003d1a:	d856      	bhi.n	8003dca <DMA_CheckFifoParam+0xce>
 8003d1c:	a201      	add	r2, pc, #4	; (adr r2, 8003d24 <DMA_CheckFifoParam+0x28>)
 8003d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d22:	bf00      	nop
 8003d24:	08003d35 	.word	0x08003d35
 8003d28:	08003d47 	.word	0x08003d47
 8003d2c:	08003d35 	.word	0x08003d35
 8003d30:	08003dcb 	.word	0x08003dcb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d046      	beq.n	8003dce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d44:	e043      	b.n	8003dce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d4e:	d140      	bne.n	8003dd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d54:	e03d      	b.n	8003dd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d5e:	d121      	bne.n	8003da4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	d837      	bhi.n	8003dd6 <DMA_CheckFifoParam+0xda>
 8003d66:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <DMA_CheckFifoParam+0x70>)
 8003d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6c:	08003d7d 	.word	0x08003d7d
 8003d70:	08003d83 	.word	0x08003d83
 8003d74:	08003d7d 	.word	0x08003d7d
 8003d78:	08003d95 	.word	0x08003d95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d80:	e030      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d025      	beq.n	8003dda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d92:	e022      	b.n	8003dda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d9c:	d11f      	bne.n	8003dde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003da2:	e01c      	b.n	8003dde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d903      	bls.n	8003db2 <DMA_CheckFifoParam+0xb6>
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d003      	beq.n	8003db8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003db0:	e018      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	73fb      	strb	r3, [r7, #15]
      break;
 8003db6:	e015      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00e      	beq.n	8003de2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc8:	e00b      	b.n	8003de2 <DMA_CheckFifoParam+0xe6>
      break;
 8003dca:	bf00      	nop
 8003dcc:	e00a      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      break;
 8003dce:	bf00      	nop
 8003dd0:	e008      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      break;
 8003dd2:	bf00      	nop
 8003dd4:	e006      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      break;
 8003dd6:	bf00      	nop
 8003dd8:	e004      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      break;
 8003dda:	bf00      	nop
 8003ddc:	e002      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003dde:	bf00      	nop
 8003de0:	e000      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      break;
 8003de2:	bf00      	nop
    }
  } 
  
  return status; 
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop

08003df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b089      	sub	sp, #36	; 0x24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003e06:	2300      	movs	r3, #0
 8003e08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]
 8003e12:	e175      	b.n	8004100 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003e14:	2201      	movs	r2, #1
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	4013      	ands	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	f040 8164 	bne.w	80040fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d005      	beq.n	8003e4a <HAL_GPIO_Init+0x56>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d130      	bne.n	8003eac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	2203      	movs	r2, #3
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e80:	2201      	movs	r2, #1
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	091b      	lsrs	r3, r3, #4
 8003e96:	f003 0201 	and.w	r2, r3, #1
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f003 0303 	and.w	r3, r3, #3
 8003eb4:	2b03      	cmp	r3, #3
 8003eb6:	d017      	beq.n	8003ee8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	2203      	movs	r2, #3
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f003 0303 	and.w	r3, r3, #3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d123      	bne.n	8003f3c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	08da      	lsrs	r2, r3, #3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3208      	adds	r2, #8
 8003efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	220f      	movs	r2, #15
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	43db      	mvns	r3, r3
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	4013      	ands	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	08da      	lsrs	r2, r3, #3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3208      	adds	r2, #8
 8003f36:	69b9      	ldr	r1, [r7, #24]
 8003f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	2203      	movs	r2, #3
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	4013      	ands	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f003 0203 	and.w	r2, r3, #3
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 80be 	beq.w	80040fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f7e:	4b66      	ldr	r3, [pc, #408]	; (8004118 <HAL_GPIO_Init+0x324>)
 8003f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f82:	4a65      	ldr	r2, [pc, #404]	; (8004118 <HAL_GPIO_Init+0x324>)
 8003f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f88:	6453      	str	r3, [r2, #68]	; 0x44
 8003f8a:	4b63      	ldr	r3, [pc, #396]	; (8004118 <HAL_GPIO_Init+0x324>)
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003f96:	4a61      	ldr	r2, [pc, #388]	; (800411c <HAL_GPIO_Init+0x328>)
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	089b      	lsrs	r3, r3, #2
 8003f9c:	3302      	adds	r3, #2
 8003f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	220f      	movs	r2, #15
 8003fae:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a58      	ldr	r2, [pc, #352]	; (8004120 <HAL_GPIO_Init+0x32c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d037      	beq.n	8004032 <HAL_GPIO_Init+0x23e>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a57      	ldr	r2, [pc, #348]	; (8004124 <HAL_GPIO_Init+0x330>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d031      	beq.n	800402e <HAL_GPIO_Init+0x23a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a56      	ldr	r2, [pc, #344]	; (8004128 <HAL_GPIO_Init+0x334>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d02b      	beq.n	800402a <HAL_GPIO_Init+0x236>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a55      	ldr	r2, [pc, #340]	; (800412c <HAL_GPIO_Init+0x338>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d025      	beq.n	8004026 <HAL_GPIO_Init+0x232>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a54      	ldr	r2, [pc, #336]	; (8004130 <HAL_GPIO_Init+0x33c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d01f      	beq.n	8004022 <HAL_GPIO_Init+0x22e>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a53      	ldr	r2, [pc, #332]	; (8004134 <HAL_GPIO_Init+0x340>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d019      	beq.n	800401e <HAL_GPIO_Init+0x22a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a52      	ldr	r2, [pc, #328]	; (8004138 <HAL_GPIO_Init+0x344>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d013      	beq.n	800401a <HAL_GPIO_Init+0x226>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a51      	ldr	r2, [pc, #324]	; (800413c <HAL_GPIO_Init+0x348>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d00d      	beq.n	8004016 <HAL_GPIO_Init+0x222>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a50      	ldr	r2, [pc, #320]	; (8004140 <HAL_GPIO_Init+0x34c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d007      	beq.n	8004012 <HAL_GPIO_Init+0x21e>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a4f      	ldr	r2, [pc, #316]	; (8004144 <HAL_GPIO_Init+0x350>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d101      	bne.n	800400e <HAL_GPIO_Init+0x21a>
 800400a:	2309      	movs	r3, #9
 800400c:	e012      	b.n	8004034 <HAL_GPIO_Init+0x240>
 800400e:	230a      	movs	r3, #10
 8004010:	e010      	b.n	8004034 <HAL_GPIO_Init+0x240>
 8004012:	2308      	movs	r3, #8
 8004014:	e00e      	b.n	8004034 <HAL_GPIO_Init+0x240>
 8004016:	2307      	movs	r3, #7
 8004018:	e00c      	b.n	8004034 <HAL_GPIO_Init+0x240>
 800401a:	2306      	movs	r3, #6
 800401c:	e00a      	b.n	8004034 <HAL_GPIO_Init+0x240>
 800401e:	2305      	movs	r3, #5
 8004020:	e008      	b.n	8004034 <HAL_GPIO_Init+0x240>
 8004022:	2304      	movs	r3, #4
 8004024:	e006      	b.n	8004034 <HAL_GPIO_Init+0x240>
 8004026:	2303      	movs	r3, #3
 8004028:	e004      	b.n	8004034 <HAL_GPIO_Init+0x240>
 800402a:	2302      	movs	r3, #2
 800402c:	e002      	b.n	8004034 <HAL_GPIO_Init+0x240>
 800402e:	2301      	movs	r3, #1
 8004030:	e000      	b.n	8004034 <HAL_GPIO_Init+0x240>
 8004032:	2300      	movs	r3, #0
 8004034:	69fa      	ldr	r2, [r7, #28]
 8004036:	f002 0203 	and.w	r2, r2, #3
 800403a:	0092      	lsls	r2, r2, #2
 800403c:	4093      	lsls	r3, r2
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	4313      	orrs	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004044:	4935      	ldr	r1, [pc, #212]	; (800411c <HAL_GPIO_Init+0x328>)
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	089b      	lsrs	r3, r3, #2
 800404a:	3302      	adds	r3, #2
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004052:	4b3d      	ldr	r3, [pc, #244]	; (8004148 <HAL_GPIO_Init+0x354>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	43db      	mvns	r3, r3
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	4013      	ands	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004076:	4a34      	ldr	r2, [pc, #208]	; (8004148 <HAL_GPIO_Init+0x354>)
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800407c:	4b32      	ldr	r3, [pc, #200]	; (8004148 <HAL_GPIO_Init+0x354>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	43db      	mvns	r3, r3
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	4013      	ands	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040a0:	4a29      	ldr	r2, [pc, #164]	; (8004148 <HAL_GPIO_Init+0x354>)
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040a6:	4b28      	ldr	r3, [pc, #160]	; (8004148 <HAL_GPIO_Init+0x354>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	43db      	mvns	r3, r3
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	4013      	ands	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040ca:	4a1f      	ldr	r2, [pc, #124]	; (8004148 <HAL_GPIO_Init+0x354>)
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040d0:	4b1d      	ldr	r3, [pc, #116]	; (8004148 <HAL_GPIO_Init+0x354>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	43db      	mvns	r3, r3
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	4013      	ands	r3, r2
 80040de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040f4:	4a14      	ldr	r2, [pc, #80]	; (8004148 <HAL_GPIO_Init+0x354>)
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	3301      	adds	r3, #1
 80040fe:	61fb      	str	r3, [r7, #28]
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	2b0f      	cmp	r3, #15
 8004104:	f67f ae86 	bls.w	8003e14 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004108:	bf00      	nop
 800410a:	bf00      	nop
 800410c:	3724      	adds	r7, #36	; 0x24
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40023800 	.word	0x40023800
 800411c:	40013800 	.word	0x40013800
 8004120:	40020000 	.word	0x40020000
 8004124:	40020400 	.word	0x40020400
 8004128:	40020800 	.word	0x40020800
 800412c:	40020c00 	.word	0x40020c00
 8004130:	40021000 	.word	0x40021000
 8004134:	40021400 	.word	0x40021400
 8004138:	40021800 	.word	0x40021800
 800413c:	40021c00 	.word	0x40021c00
 8004140:	40022000 	.word	0x40022000
 8004144:	40022400 	.word	0x40022400
 8004148:	40013c00 	.word	0x40013c00

0800414c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004156:	2300      	movs	r3, #0
 8004158:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800415e:	2300      	movs	r3, #0
 8004160:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004162:	2300      	movs	r3, #0
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	e0d9      	b.n	800431c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004168:	2201      	movs	r2, #1
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	4013      	ands	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	429a      	cmp	r2, r3
 8004180:	f040 80c9 	bne.w	8004316 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004184:	4a6b      	ldr	r2, [pc, #428]	; (8004334 <HAL_GPIO_DeInit+0x1e8>)
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	089b      	lsrs	r3, r3, #2
 800418a:	3302      	adds	r3, #2
 800418c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004190:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f003 0303 	and.w	r3, r3, #3
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	220f      	movs	r2, #15
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	4013      	ands	r3, r2
 80041a4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a63      	ldr	r2, [pc, #396]	; (8004338 <HAL_GPIO_DeInit+0x1ec>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d037      	beq.n	800421e <HAL_GPIO_DeInit+0xd2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a62      	ldr	r2, [pc, #392]	; (800433c <HAL_GPIO_DeInit+0x1f0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d031      	beq.n	800421a <HAL_GPIO_DeInit+0xce>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a61      	ldr	r2, [pc, #388]	; (8004340 <HAL_GPIO_DeInit+0x1f4>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d02b      	beq.n	8004216 <HAL_GPIO_DeInit+0xca>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a60      	ldr	r2, [pc, #384]	; (8004344 <HAL_GPIO_DeInit+0x1f8>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d025      	beq.n	8004212 <HAL_GPIO_DeInit+0xc6>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a5f      	ldr	r2, [pc, #380]	; (8004348 <HAL_GPIO_DeInit+0x1fc>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d01f      	beq.n	800420e <HAL_GPIO_DeInit+0xc2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a5e      	ldr	r2, [pc, #376]	; (800434c <HAL_GPIO_DeInit+0x200>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d019      	beq.n	800420a <HAL_GPIO_DeInit+0xbe>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a5d      	ldr	r2, [pc, #372]	; (8004350 <HAL_GPIO_DeInit+0x204>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d013      	beq.n	8004206 <HAL_GPIO_DeInit+0xba>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a5c      	ldr	r2, [pc, #368]	; (8004354 <HAL_GPIO_DeInit+0x208>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00d      	beq.n	8004202 <HAL_GPIO_DeInit+0xb6>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a5b      	ldr	r2, [pc, #364]	; (8004358 <HAL_GPIO_DeInit+0x20c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d007      	beq.n	80041fe <HAL_GPIO_DeInit+0xb2>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a5a      	ldr	r2, [pc, #360]	; (800435c <HAL_GPIO_DeInit+0x210>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d101      	bne.n	80041fa <HAL_GPIO_DeInit+0xae>
 80041f6:	2309      	movs	r3, #9
 80041f8:	e012      	b.n	8004220 <HAL_GPIO_DeInit+0xd4>
 80041fa:	230a      	movs	r3, #10
 80041fc:	e010      	b.n	8004220 <HAL_GPIO_DeInit+0xd4>
 80041fe:	2308      	movs	r3, #8
 8004200:	e00e      	b.n	8004220 <HAL_GPIO_DeInit+0xd4>
 8004202:	2307      	movs	r3, #7
 8004204:	e00c      	b.n	8004220 <HAL_GPIO_DeInit+0xd4>
 8004206:	2306      	movs	r3, #6
 8004208:	e00a      	b.n	8004220 <HAL_GPIO_DeInit+0xd4>
 800420a:	2305      	movs	r3, #5
 800420c:	e008      	b.n	8004220 <HAL_GPIO_DeInit+0xd4>
 800420e:	2304      	movs	r3, #4
 8004210:	e006      	b.n	8004220 <HAL_GPIO_DeInit+0xd4>
 8004212:	2303      	movs	r3, #3
 8004214:	e004      	b.n	8004220 <HAL_GPIO_DeInit+0xd4>
 8004216:	2302      	movs	r3, #2
 8004218:	e002      	b.n	8004220 <HAL_GPIO_DeInit+0xd4>
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <HAL_GPIO_DeInit+0xd4>
 800421e:	2300      	movs	r3, #0
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	f002 0203 	and.w	r2, r2, #3
 8004226:	0092      	lsls	r2, r2, #2
 8004228:	4093      	lsls	r3, r2
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	429a      	cmp	r2, r3
 800422e:	d132      	bne.n	8004296 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004230:	4b4b      	ldr	r3, [pc, #300]	; (8004360 <HAL_GPIO_DeInit+0x214>)
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	43db      	mvns	r3, r3
 8004238:	4949      	ldr	r1, [pc, #292]	; (8004360 <HAL_GPIO_DeInit+0x214>)
 800423a:	4013      	ands	r3, r2
 800423c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800423e:	4b48      	ldr	r3, [pc, #288]	; (8004360 <HAL_GPIO_DeInit+0x214>)
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	43db      	mvns	r3, r3
 8004246:	4946      	ldr	r1, [pc, #280]	; (8004360 <HAL_GPIO_DeInit+0x214>)
 8004248:	4013      	ands	r3, r2
 800424a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800424c:	4b44      	ldr	r3, [pc, #272]	; (8004360 <HAL_GPIO_DeInit+0x214>)
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	43db      	mvns	r3, r3
 8004254:	4942      	ldr	r1, [pc, #264]	; (8004360 <HAL_GPIO_DeInit+0x214>)
 8004256:	4013      	ands	r3, r2
 8004258:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800425a:	4b41      	ldr	r3, [pc, #260]	; (8004360 <HAL_GPIO_DeInit+0x214>)
 800425c:	689a      	ldr	r2, [r3, #8]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	43db      	mvns	r3, r3
 8004262:	493f      	ldr	r1, [pc, #252]	; (8004360 <HAL_GPIO_DeInit+0x214>)
 8004264:	4013      	ands	r3, r2
 8004266:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	220f      	movs	r2, #15
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004278:	4a2e      	ldr	r2, [pc, #184]	; (8004334 <HAL_GPIO_DeInit+0x1e8>)
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	089b      	lsrs	r3, r3, #2
 800427e:	3302      	adds	r3, #2
 8004280:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	43da      	mvns	r2, r3
 8004288:	482a      	ldr	r0, [pc, #168]	; (8004334 <HAL_GPIO_DeInit+0x1e8>)
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	089b      	lsrs	r3, r3, #2
 800428e:	400a      	ands	r2, r1
 8004290:	3302      	adds	r3, #2
 8004292:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	2103      	movs	r1, #3
 80042a0:	fa01 f303 	lsl.w	r3, r1, r3
 80042a4:	43db      	mvns	r3, r3
 80042a6:	401a      	ands	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	08da      	lsrs	r2, r3, #3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3208      	adds	r2, #8
 80042b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	220f      	movs	r2, #15
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	43db      	mvns	r3, r3
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	08d2      	lsrs	r2, r2, #3
 80042cc:	4019      	ands	r1, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3208      	adds	r2, #8
 80042d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	2103      	movs	r1, #3
 80042e0:	fa01 f303 	lsl.w	r3, r1, r3
 80042e4:	43db      	mvns	r3, r3
 80042e6:	401a      	ands	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	2101      	movs	r1, #1
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	fa01 f303 	lsl.w	r3, r1, r3
 80042f8:	43db      	mvns	r3, r3
 80042fa:	401a      	ands	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	2103      	movs	r1, #3
 800430a:	fa01 f303 	lsl.w	r3, r1, r3
 800430e:	43db      	mvns	r3, r3
 8004310:	401a      	ands	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	3301      	adds	r3, #1
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	2b0f      	cmp	r3, #15
 8004320:	f67f af22 	bls.w	8004168 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004324:	bf00      	nop
 8004326:	bf00      	nop
 8004328:	371c      	adds	r7, #28
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40013800 	.word	0x40013800
 8004338:	40020000 	.word	0x40020000
 800433c:	40020400 	.word	0x40020400
 8004340:	40020800 	.word	0x40020800
 8004344:	40020c00 	.word	0x40020c00
 8004348:	40021000 	.word	0x40021000
 800434c:	40021400 	.word	0x40021400
 8004350:	40021800 	.word	0x40021800
 8004354:	40021c00 	.word	0x40021c00
 8004358:	40022000 	.word	0x40022000
 800435c:	40022400 	.word	0x40022400
 8004360:	40013c00 	.word	0x40013c00

08004364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	460b      	mov	r3, r1
 800436e:	807b      	strh	r3, [r7, #2]
 8004370:	4613      	mov	r3, r2
 8004372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004374:	787b      	ldrb	r3, [r7, #1]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800437a:	887a      	ldrh	r2, [r7, #2]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004380:	e003      	b.n	800438a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004382:	887b      	ldrh	r3, [r7, #2]
 8004384:	041a      	lsls	r2, r3, #16
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	619a      	str	r2, [r3, #24]
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
	...

08004398 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	4603      	mov	r3, r0
 80043a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80043a2:	4b08      	ldr	r3, [pc, #32]	; (80043c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043a4:	695a      	ldr	r2, [r3, #20]
 80043a6:	88fb      	ldrh	r3, [r7, #6]
 80043a8:	4013      	ands	r3, r2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d006      	beq.n	80043bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043ae:	4a05      	ldr	r2, [pc, #20]	; (80043c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043b0:	88fb      	ldrh	r3, [r7, #6]
 80043b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043b4:	88fb      	ldrh	r3, [r7, #6]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 f806 	bl	80043c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80043bc:	bf00      	nop
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40013c00 	.word	0x40013c00

080043c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	4603      	mov	r3, r0
 80043d0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80043d2:	bf00      	nop
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80043de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043e0:	b08f      	sub	sp, #60	; 0x3c
 80043e2:	af0a      	add	r7, sp, #40	; 0x28
 80043e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e054      	b.n	800449a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f00b ffb8 	bl	8010380 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2203      	movs	r2, #3
 8004414:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004420:	2b00      	cmp	r3, #0
 8004422:	d102      	bne.n	800442a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4618      	mov	r0, r3
 8004430:	f004 faa1 	bl	8008976 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	603b      	str	r3, [r7, #0]
 800443a:	687e      	ldr	r6, [r7, #4]
 800443c:	466d      	mov	r5, sp
 800443e:	f106 0410 	add.w	r4, r6, #16
 8004442:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004444:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004446:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004448:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800444a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800444e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004452:	1d33      	adds	r3, r6, #4
 8004454:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004456:	6838      	ldr	r0, [r7, #0]
 8004458:	f004 fa24 	bl	80088a4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2101      	movs	r1, #1
 8004462:	4618      	mov	r0, r3
 8004464:	f004 fa98 	bl	8008998 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	603b      	str	r3, [r7, #0]
 800446e:	687e      	ldr	r6, [r7, #4]
 8004470:	466d      	mov	r5, sp
 8004472:	f106 0410 	add.w	r4, r6, #16
 8004476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004478:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800447a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800447c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800447e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004482:	e885 0003 	stmia.w	r5, {r0, r1}
 8004486:	1d33      	adds	r3, r6, #4
 8004488:	cb0e      	ldmia	r3, {r1, r2, r3}
 800448a:	6838      	ldr	r0, [r7, #0]
 800448c:	f004 fc40 	bl	8008d10 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080044a2 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80044a2:	b590      	push	{r4, r7, lr}
 80044a4:	b089      	sub	sp, #36	; 0x24
 80044a6:	af04      	add	r7, sp, #16
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	4608      	mov	r0, r1
 80044ac:	4611      	mov	r1, r2
 80044ae:	461a      	mov	r2, r3
 80044b0:	4603      	mov	r3, r0
 80044b2:	70fb      	strb	r3, [r7, #3]
 80044b4:	460b      	mov	r3, r1
 80044b6:	70bb      	strb	r3, [r7, #2]
 80044b8:	4613      	mov	r3, r2
 80044ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d101      	bne.n	80044ca <HAL_HCD_HC_Init+0x28>
 80044c6:	2302      	movs	r3, #2
 80044c8:	e076      	b.n	80045b8 <HAL_HCD_HC_Init+0x116>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80044d2:	78fb      	ldrb	r3, [r7, #3]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	212c      	movs	r1, #44	; 0x2c
 80044d8:	fb01 f303 	mul.w	r3, r1, r3
 80044dc:	4413      	add	r3, r2
 80044de:	333d      	adds	r3, #61	; 0x3d
 80044e0:	2200      	movs	r2, #0
 80044e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80044e4:	78fb      	ldrb	r3, [r7, #3]
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	212c      	movs	r1, #44	; 0x2c
 80044ea:	fb01 f303 	mul.w	r3, r1, r3
 80044ee:	4413      	add	r3, r2
 80044f0:	3338      	adds	r3, #56	; 0x38
 80044f2:	787a      	ldrb	r2, [r7, #1]
 80044f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80044f6:	78fb      	ldrb	r3, [r7, #3]
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	212c      	movs	r1, #44	; 0x2c
 80044fc:	fb01 f303 	mul.w	r3, r1, r3
 8004500:	4413      	add	r3, r2
 8004502:	3340      	adds	r3, #64	; 0x40
 8004504:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004506:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	212c      	movs	r1, #44	; 0x2c
 800450e:	fb01 f303 	mul.w	r3, r1, r3
 8004512:	4413      	add	r3, r2
 8004514:	3339      	adds	r3, #57	; 0x39
 8004516:	78fa      	ldrb	r2, [r7, #3]
 8004518:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800451a:	78fb      	ldrb	r3, [r7, #3]
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	212c      	movs	r1, #44	; 0x2c
 8004520:	fb01 f303 	mul.w	r3, r1, r3
 8004524:	4413      	add	r3, r2
 8004526:	333f      	adds	r3, #63	; 0x3f
 8004528:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800452c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800452e:	78fb      	ldrb	r3, [r7, #3]
 8004530:	78ba      	ldrb	r2, [r7, #2]
 8004532:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004536:	b2d0      	uxtb	r0, r2
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	212c      	movs	r1, #44	; 0x2c
 800453c:	fb01 f303 	mul.w	r3, r1, r3
 8004540:	4413      	add	r3, r2
 8004542:	333a      	adds	r3, #58	; 0x3a
 8004544:	4602      	mov	r2, r0
 8004546:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004548:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800454c:	2b00      	cmp	r3, #0
 800454e:	da09      	bge.n	8004564 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004550:	78fb      	ldrb	r3, [r7, #3]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	212c      	movs	r1, #44	; 0x2c
 8004556:	fb01 f303 	mul.w	r3, r1, r3
 800455a:	4413      	add	r3, r2
 800455c:	333b      	adds	r3, #59	; 0x3b
 800455e:	2201      	movs	r2, #1
 8004560:	701a      	strb	r2, [r3, #0]
 8004562:	e008      	b.n	8004576 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004564:	78fb      	ldrb	r3, [r7, #3]
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	212c      	movs	r1, #44	; 0x2c
 800456a:	fb01 f303 	mul.w	r3, r1, r3
 800456e:	4413      	add	r3, r2
 8004570:	333b      	adds	r3, #59	; 0x3b
 8004572:	2200      	movs	r2, #0
 8004574:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004576:	78fb      	ldrb	r3, [r7, #3]
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	212c      	movs	r1, #44	; 0x2c
 800457c:	fb01 f303 	mul.w	r3, r1, r3
 8004580:	4413      	add	r3, r2
 8004582:	333c      	adds	r3, #60	; 0x3c
 8004584:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004588:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6818      	ldr	r0, [r3, #0]
 800458e:	787c      	ldrb	r4, [r7, #1]
 8004590:	78ba      	ldrb	r2, [r7, #2]
 8004592:	78f9      	ldrb	r1, [r7, #3]
 8004594:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004596:	9302      	str	r3, [sp, #8]
 8004598:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800459c:	9301      	str	r3, [sp, #4]
 800459e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	4623      	mov	r3, r4
 80045a6:	f004 fd2d 	bl	8009004 <USB_HC_Init>
 80045aa:	4603      	mov	r3, r0
 80045ac:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd90      	pop	{r4, r7, pc}

080045c0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	460b      	mov	r3, r1
 80045ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80045cc:	2300      	movs	r3, #0
 80045ce:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d101      	bne.n	80045de <HAL_HCD_HC_Halt+0x1e>
 80045da:	2302      	movs	r3, #2
 80045dc:	e00f      	b.n	80045fe <HAL_HCD_HC_Halt+0x3e>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	78fa      	ldrb	r2, [r7, #3]
 80045ec:	4611      	mov	r1, r2
 80045ee:	4618      	mov	r0, r3
 80045f0:	f004 ff7d 	bl	80094ee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
	...

08004608 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	4608      	mov	r0, r1
 8004612:	4611      	mov	r1, r2
 8004614:	461a      	mov	r2, r3
 8004616:	4603      	mov	r3, r0
 8004618:	70fb      	strb	r3, [r7, #3]
 800461a:	460b      	mov	r3, r1
 800461c:	70bb      	strb	r3, [r7, #2]
 800461e:	4613      	mov	r3, r2
 8004620:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004622:	78fb      	ldrb	r3, [r7, #3]
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	212c      	movs	r1, #44	; 0x2c
 8004628:	fb01 f303 	mul.w	r3, r1, r3
 800462c:	4413      	add	r3, r2
 800462e:	333b      	adds	r3, #59	; 0x3b
 8004630:	78ba      	ldrb	r2, [r7, #2]
 8004632:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004634:	78fb      	ldrb	r3, [r7, #3]
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	212c      	movs	r1, #44	; 0x2c
 800463a:	fb01 f303 	mul.w	r3, r1, r3
 800463e:	4413      	add	r3, r2
 8004640:	333f      	adds	r3, #63	; 0x3f
 8004642:	787a      	ldrb	r2, [r7, #1]
 8004644:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004646:	7c3b      	ldrb	r3, [r7, #16]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d112      	bne.n	8004672 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800464c:	78fb      	ldrb	r3, [r7, #3]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	212c      	movs	r1, #44	; 0x2c
 8004652:	fb01 f303 	mul.w	r3, r1, r3
 8004656:	4413      	add	r3, r2
 8004658:	3342      	adds	r3, #66	; 0x42
 800465a:	2203      	movs	r2, #3
 800465c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800465e:	78fb      	ldrb	r3, [r7, #3]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	212c      	movs	r1, #44	; 0x2c
 8004664:	fb01 f303 	mul.w	r3, r1, r3
 8004668:	4413      	add	r3, r2
 800466a:	333d      	adds	r3, #61	; 0x3d
 800466c:	7f3a      	ldrb	r2, [r7, #28]
 800466e:	701a      	strb	r2, [r3, #0]
 8004670:	e008      	b.n	8004684 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004672:	78fb      	ldrb	r3, [r7, #3]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	212c      	movs	r1, #44	; 0x2c
 8004678:	fb01 f303 	mul.w	r3, r1, r3
 800467c:	4413      	add	r3, r2
 800467e:	3342      	adds	r3, #66	; 0x42
 8004680:	2202      	movs	r2, #2
 8004682:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004684:	787b      	ldrb	r3, [r7, #1]
 8004686:	2b03      	cmp	r3, #3
 8004688:	f200 80c6 	bhi.w	8004818 <HAL_HCD_HC_SubmitRequest+0x210>
 800468c:	a201      	add	r2, pc, #4	; (adr r2, 8004694 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800468e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004692:	bf00      	nop
 8004694:	080046a5 	.word	0x080046a5
 8004698:	08004805 	.word	0x08004805
 800469c:	08004709 	.word	0x08004709
 80046a0:	08004787 	.word	0x08004787
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80046a4:	7c3b      	ldrb	r3, [r7, #16]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	f040 80b8 	bne.w	800481c <HAL_HCD_HC_SubmitRequest+0x214>
 80046ac:	78bb      	ldrb	r3, [r7, #2]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f040 80b4 	bne.w	800481c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80046b4:	8b3b      	ldrh	r3, [r7, #24]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d108      	bne.n	80046cc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80046ba:	78fb      	ldrb	r3, [r7, #3]
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	212c      	movs	r1, #44	; 0x2c
 80046c0:	fb01 f303 	mul.w	r3, r1, r3
 80046c4:	4413      	add	r3, r2
 80046c6:	3355      	adds	r3, #85	; 0x55
 80046c8:	2201      	movs	r2, #1
 80046ca:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80046cc:	78fb      	ldrb	r3, [r7, #3]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	212c      	movs	r1, #44	; 0x2c
 80046d2:	fb01 f303 	mul.w	r3, r1, r3
 80046d6:	4413      	add	r3, r2
 80046d8:	3355      	adds	r3, #85	; 0x55
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d109      	bne.n	80046f4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80046e0:	78fb      	ldrb	r3, [r7, #3]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	212c      	movs	r1, #44	; 0x2c
 80046e6:	fb01 f303 	mul.w	r3, r1, r3
 80046ea:	4413      	add	r3, r2
 80046ec:	3342      	adds	r3, #66	; 0x42
 80046ee:	2200      	movs	r2, #0
 80046f0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80046f2:	e093      	b.n	800481c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80046f4:	78fb      	ldrb	r3, [r7, #3]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	212c      	movs	r1, #44	; 0x2c
 80046fa:	fb01 f303 	mul.w	r3, r1, r3
 80046fe:	4413      	add	r3, r2
 8004700:	3342      	adds	r3, #66	; 0x42
 8004702:	2202      	movs	r2, #2
 8004704:	701a      	strb	r2, [r3, #0]
      break;
 8004706:	e089      	b.n	800481c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004708:	78bb      	ldrb	r3, [r7, #2]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d11d      	bne.n	800474a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800470e:	78fb      	ldrb	r3, [r7, #3]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	212c      	movs	r1, #44	; 0x2c
 8004714:	fb01 f303 	mul.w	r3, r1, r3
 8004718:	4413      	add	r3, r2
 800471a:	3355      	adds	r3, #85	; 0x55
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d109      	bne.n	8004736 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004722:	78fb      	ldrb	r3, [r7, #3]
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	212c      	movs	r1, #44	; 0x2c
 8004728:	fb01 f303 	mul.w	r3, r1, r3
 800472c:	4413      	add	r3, r2
 800472e:	3342      	adds	r3, #66	; 0x42
 8004730:	2200      	movs	r2, #0
 8004732:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004734:	e073      	b.n	800481e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004736:	78fb      	ldrb	r3, [r7, #3]
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	212c      	movs	r1, #44	; 0x2c
 800473c:	fb01 f303 	mul.w	r3, r1, r3
 8004740:	4413      	add	r3, r2
 8004742:	3342      	adds	r3, #66	; 0x42
 8004744:	2202      	movs	r2, #2
 8004746:	701a      	strb	r2, [r3, #0]
      break;
 8004748:	e069      	b.n	800481e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800474a:	78fb      	ldrb	r3, [r7, #3]
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	212c      	movs	r1, #44	; 0x2c
 8004750:	fb01 f303 	mul.w	r3, r1, r3
 8004754:	4413      	add	r3, r2
 8004756:	3354      	adds	r3, #84	; 0x54
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d109      	bne.n	8004772 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800475e:	78fb      	ldrb	r3, [r7, #3]
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	212c      	movs	r1, #44	; 0x2c
 8004764:	fb01 f303 	mul.w	r3, r1, r3
 8004768:	4413      	add	r3, r2
 800476a:	3342      	adds	r3, #66	; 0x42
 800476c:	2200      	movs	r2, #0
 800476e:	701a      	strb	r2, [r3, #0]
      break;
 8004770:	e055      	b.n	800481e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004772:	78fb      	ldrb	r3, [r7, #3]
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	212c      	movs	r1, #44	; 0x2c
 8004778:	fb01 f303 	mul.w	r3, r1, r3
 800477c:	4413      	add	r3, r2
 800477e:	3342      	adds	r3, #66	; 0x42
 8004780:	2202      	movs	r2, #2
 8004782:	701a      	strb	r2, [r3, #0]
      break;
 8004784:	e04b      	b.n	800481e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004786:	78bb      	ldrb	r3, [r7, #2]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d11d      	bne.n	80047c8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800478c:	78fb      	ldrb	r3, [r7, #3]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	212c      	movs	r1, #44	; 0x2c
 8004792:	fb01 f303 	mul.w	r3, r1, r3
 8004796:	4413      	add	r3, r2
 8004798:	3355      	adds	r3, #85	; 0x55
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d109      	bne.n	80047b4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80047a0:	78fb      	ldrb	r3, [r7, #3]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	212c      	movs	r1, #44	; 0x2c
 80047a6:	fb01 f303 	mul.w	r3, r1, r3
 80047aa:	4413      	add	r3, r2
 80047ac:	3342      	adds	r3, #66	; 0x42
 80047ae:	2200      	movs	r2, #0
 80047b0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80047b2:	e034      	b.n	800481e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80047b4:	78fb      	ldrb	r3, [r7, #3]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	212c      	movs	r1, #44	; 0x2c
 80047ba:	fb01 f303 	mul.w	r3, r1, r3
 80047be:	4413      	add	r3, r2
 80047c0:	3342      	adds	r3, #66	; 0x42
 80047c2:	2202      	movs	r2, #2
 80047c4:	701a      	strb	r2, [r3, #0]
      break;
 80047c6:	e02a      	b.n	800481e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80047c8:	78fb      	ldrb	r3, [r7, #3]
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	212c      	movs	r1, #44	; 0x2c
 80047ce:	fb01 f303 	mul.w	r3, r1, r3
 80047d2:	4413      	add	r3, r2
 80047d4:	3354      	adds	r3, #84	; 0x54
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d109      	bne.n	80047f0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80047dc:	78fb      	ldrb	r3, [r7, #3]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	212c      	movs	r1, #44	; 0x2c
 80047e2:	fb01 f303 	mul.w	r3, r1, r3
 80047e6:	4413      	add	r3, r2
 80047e8:	3342      	adds	r3, #66	; 0x42
 80047ea:	2200      	movs	r2, #0
 80047ec:	701a      	strb	r2, [r3, #0]
      break;
 80047ee:	e016      	b.n	800481e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80047f0:	78fb      	ldrb	r3, [r7, #3]
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	212c      	movs	r1, #44	; 0x2c
 80047f6:	fb01 f303 	mul.w	r3, r1, r3
 80047fa:	4413      	add	r3, r2
 80047fc:	3342      	adds	r3, #66	; 0x42
 80047fe:	2202      	movs	r2, #2
 8004800:	701a      	strb	r2, [r3, #0]
      break;
 8004802:	e00c      	b.n	800481e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004804:	78fb      	ldrb	r3, [r7, #3]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	212c      	movs	r1, #44	; 0x2c
 800480a:	fb01 f303 	mul.w	r3, r1, r3
 800480e:	4413      	add	r3, r2
 8004810:	3342      	adds	r3, #66	; 0x42
 8004812:	2200      	movs	r2, #0
 8004814:	701a      	strb	r2, [r3, #0]
      break;
 8004816:	e002      	b.n	800481e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004818:	bf00      	nop
 800481a:	e000      	b.n	800481e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800481c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800481e:	78fb      	ldrb	r3, [r7, #3]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	212c      	movs	r1, #44	; 0x2c
 8004824:	fb01 f303 	mul.w	r3, r1, r3
 8004828:	4413      	add	r3, r2
 800482a:	3344      	adds	r3, #68	; 0x44
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004830:	78fb      	ldrb	r3, [r7, #3]
 8004832:	8b3a      	ldrh	r2, [r7, #24]
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	202c      	movs	r0, #44	; 0x2c
 8004838:	fb00 f303 	mul.w	r3, r0, r3
 800483c:	440b      	add	r3, r1
 800483e:	334c      	adds	r3, #76	; 0x4c
 8004840:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004842:	78fb      	ldrb	r3, [r7, #3]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	212c      	movs	r1, #44	; 0x2c
 8004848:	fb01 f303 	mul.w	r3, r1, r3
 800484c:	4413      	add	r3, r2
 800484e:	3360      	adds	r3, #96	; 0x60
 8004850:	2200      	movs	r2, #0
 8004852:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004854:	78fb      	ldrb	r3, [r7, #3]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	212c      	movs	r1, #44	; 0x2c
 800485a:	fb01 f303 	mul.w	r3, r1, r3
 800485e:	4413      	add	r3, r2
 8004860:	3350      	adds	r3, #80	; 0x50
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004866:	78fb      	ldrb	r3, [r7, #3]
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	212c      	movs	r1, #44	; 0x2c
 800486c:	fb01 f303 	mul.w	r3, r1, r3
 8004870:	4413      	add	r3, r2
 8004872:	3339      	adds	r3, #57	; 0x39
 8004874:	78fa      	ldrb	r2, [r7, #3]
 8004876:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	212c      	movs	r1, #44	; 0x2c
 800487e:	fb01 f303 	mul.w	r3, r1, r3
 8004882:	4413      	add	r3, r2
 8004884:	3361      	adds	r3, #97	; 0x61
 8004886:	2200      	movs	r2, #0
 8004888:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6818      	ldr	r0, [r3, #0]
 800488e:	78fb      	ldrb	r3, [r7, #3]
 8004890:	222c      	movs	r2, #44	; 0x2c
 8004892:	fb02 f303 	mul.w	r3, r2, r3
 8004896:	3338      	adds	r3, #56	; 0x38
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	18d1      	adds	r1, r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	461a      	mov	r2, r3
 80048a4:	f004 fcd0 	bl	8009248 <USB_HC_StartXfer>
 80048a8:	4603      	mov	r3, r0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop

080048b4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f004 f9de 	bl	8008c8c <USB_GetMode>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	f040 80f6 	bne.w	8004ac4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4618      	mov	r0, r3
 80048de:	f004 f9a1 	bl	8008c24 <USB_ReadInterrupts>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 80ec 	beq.w	8004ac2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f004 f998 	bl	8008c24 <USB_ReadInterrupts>
 80048f4:	4603      	mov	r3, r0
 80048f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048fe:	d104      	bne.n	800490a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004908:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4618      	mov	r0, r3
 8004910:	f004 f988 	bl	8008c24 <USB_ReadInterrupts>
 8004914:	4603      	mov	r3, r0
 8004916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800491a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800491e:	d104      	bne.n	800492a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004928:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f004 f978 	bl	8008c24 <USB_ReadInterrupts>
 8004934:	4603      	mov	r3, r0
 8004936:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800493a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800493e:	d104      	bne.n	800494a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004948:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f004 f968 	bl	8008c24 <USB_ReadInterrupts>
 8004954:	4603      	mov	r3, r0
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b02      	cmp	r3, #2
 800495c:	d103      	bne.n	8004966 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2202      	movs	r2, #2
 8004964:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f004 f95a 	bl	8008c24 <USB_ReadInterrupts>
 8004970:	4603      	mov	r3, r0
 8004972:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004976:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800497a:	d11c      	bne.n	80049b6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004984:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10f      	bne.n	80049b6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004996:	2110      	movs	r1, #16
 8004998:	6938      	ldr	r0, [r7, #16]
 800499a:	f004 f849 	bl	8008a30 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800499e:	6938      	ldr	r0, [r7, #16]
 80049a0:	f004 f87a 	bl	8008a98 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2101      	movs	r1, #1
 80049aa:	4618      	mov	r0, r3
 80049ac:	f004 fa64 	bl	8008e78 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f00b fd65 	bl	8010480 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f004 f932 	bl	8008c24 <USB_ReadInterrupts>
 80049c0:	4603      	mov	r3, r0
 80049c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049ca:	d102      	bne.n	80049d2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f001 f9ce 	bl	8005d6e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f004 f924 	bl	8008c24 <USB_ReadInterrupts>
 80049dc:	4603      	mov	r3, r0
 80049de:	f003 0308 	and.w	r3, r3, #8
 80049e2:	2b08      	cmp	r3, #8
 80049e4:	d106      	bne.n	80049f4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f00b fd2e 	bl	8010448 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2208      	movs	r2, #8
 80049f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f004 f913 	bl	8008c24 <USB_ReadInterrupts>
 80049fe:	4603      	mov	r3, r0
 8004a00:	f003 0310 	and.w	r3, r3, #16
 8004a04:	2b10      	cmp	r3, #16
 8004a06:	d101      	bne.n	8004a0c <HAL_HCD_IRQHandler+0x158>
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e000      	b.n	8004a0e <HAL_HCD_IRQHandler+0x15a>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d012      	beq.n	8004a38 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	699a      	ldr	r2, [r3, #24]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 0210 	bic.w	r2, r2, #16
 8004a20:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f001 f8d1 	bl	8005bca <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699a      	ldr	r2, [r3, #24]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0210 	orr.w	r2, r2, #16
 8004a36:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f004 f8f1 	bl	8008c24 <USB_ReadInterrupts>
 8004a42:	4603      	mov	r3, r0
 8004a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a4c:	d13a      	bne.n	8004ac4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f004 fd3a 	bl	80094cc <USB_HC_ReadInterrupt>
 8004a58:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	617b      	str	r3, [r7, #20]
 8004a5e:	e025      	b.n	8004aac <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f003 030f 	and.w	r3, r3, #15
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	fa22 f303 	lsr.w	r3, r2, r3
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d018      	beq.n	8004aa6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a8a:	d106      	bne.n	8004a9a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	4619      	mov	r1, r3
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f8ab 	bl	8004bee <HCD_HC_IN_IRQHandler>
 8004a98:	e005      	b.n	8004aa6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 fcc6 	bl	8005432 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d3d4      	bcc.n	8004a60 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004abe:	615a      	str	r2, [r3, #20]
 8004ac0:	e000      	b.n	8004ac4 <HAL_HCD_IRQHandler+0x210>
      return;
 8004ac2:	bf00      	nop
    }
  }
}
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b082      	sub	sp, #8
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d101      	bne.n	8004ae0 <HAL_HCD_Start+0x16>
 8004adc:	2302      	movs	r3, #2
 8004ade:	e013      	b.n	8004b08 <HAL_HCD_Start+0x3e>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2101      	movs	r1, #1
 8004aee:	4618      	mov	r0, r3
 8004af0:	f004 fa26 	bl	8008f40 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f003 ff2b 	bl	8008954 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d101      	bne.n	8004b26 <HAL_HCD_Stop+0x16>
 8004b22:	2302      	movs	r3, #2
 8004b24:	e00d      	b.n	8004b42 <HAL_HCD_Stop+0x32>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f004 fe14 	bl	8009760 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b082      	sub	sp, #8
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f004 f9c8 	bl	8008eec <USB_ResetPort>
 8004b5c:	4603      	mov	r3, r0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004b72:	78fb      	ldrb	r3, [r7, #3]
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	212c      	movs	r1, #44	; 0x2c
 8004b78:	fb01 f303 	mul.w	r3, r1, r3
 8004b7c:	4413      	add	r3, r2
 8004b7e:	3360      	adds	r3, #96	; 0x60
 8004b80:	781b      	ldrb	r3, [r3, #0]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b083      	sub	sp, #12
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
 8004b96:	460b      	mov	r3, r1
 8004b98:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004b9a:	78fb      	ldrb	r3, [r7, #3]
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	212c      	movs	r1, #44	; 0x2c
 8004ba0:	fb01 f303 	mul.w	r3, r1, r3
 8004ba4:	4413      	add	r3, r2
 8004ba6:	3350      	adds	r3, #80	; 0x50
 8004ba8:	681b      	ldr	r3, [r3, #0]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b082      	sub	sp, #8
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f004 fa0c 	bl	8008fe0 <USB_GetCurrentFrame>
 8004bc8:	4603      	mov	r3, r0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b082      	sub	sp, #8
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f004 f9e7 	bl	8008fb2 <USB_GetHostSpeed>
 8004be4:	4603      	mov	r3, r0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b086      	sub	sp, #24
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004c04:	78fb      	ldrb	r3, [r7, #3]
 8004c06:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	b2d2      	uxtb	r2, r2
 8004c10:	4611      	mov	r1, r2
 8004c12:	4618      	mov	r0, r3
 8004c14:	f004 f819 	bl	8008c4a <USB_ReadChInterrupts>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	f003 0304 	and.w	r3, r3, #4
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	d11a      	bne.n	8004c58 <HCD_HC_IN_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c2e:	461a      	mov	r2, r3
 8004c30:	2304      	movs	r3, #4
 8004c32:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	212c      	movs	r1, #44	; 0x2c
 8004c3a:	fb01 f303 	mul.w	r3, r1, r3
 8004c3e:	4413      	add	r3, r2
 8004c40:	3361      	adds	r3, #97	; 0x61
 8004c42:	2207      	movs	r2, #7
 8004c44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	4611      	mov	r1, r2
 8004c50:	4618      	mov	r0, r3
 8004c52:	f004 fc4c 	bl	80094ee <USB_HC_Halt>
 8004c56:	e0a2      	b.n	8004d9e <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	b2d2      	uxtb	r2, r2
 8004c60:	4611      	mov	r1, r2
 8004c62:	4618      	mov	r0, r3
 8004c64:	f003 fff1 	bl	8008c4a <USB_ReadChInterrupts>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c72:	d11b      	bne.n	8004cac <HCD_HC_IN_IRQHandler+0xbe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c80:	461a      	mov	r2, r3
 8004c82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c86:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	212c      	movs	r1, #44	; 0x2c
 8004c8e:	fb01 f303 	mul.w	r3, r1, r3
 8004c92:	4413      	add	r3, r2
 8004c94:	3361      	adds	r3, #97	; 0x61
 8004c96:	2208      	movs	r2, #8
 8004c98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	b2d2      	uxtb	r2, r2
 8004ca2:	4611      	mov	r1, r2
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f004 fc22 	bl	80094ee <USB_HC_Halt>
 8004caa:	e078      	b.n	8004d9e <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	4611      	mov	r1, r2
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f003 ffc7 	bl	8008c4a <USB_ReadChInterrupts>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	2b08      	cmp	r3, #8
 8004cc4:	d11a      	bne.n	8004cfc <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	2308      	movs	r3, #8
 8004cd6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	212c      	movs	r1, #44	; 0x2c
 8004cde:	fb01 f303 	mul.w	r3, r1, r3
 8004ce2:	4413      	add	r3, r2
 8004ce4:	3361      	adds	r3, #97	; 0x61
 8004ce6:	2206      	movs	r2, #6
 8004ce8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	b2d2      	uxtb	r2, r2
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f004 fbfa 	bl	80094ee <USB_HC_Halt>
 8004cfa:	e050      	b.n	8004d9e <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	4611      	mov	r1, r2
 8004d06:	4618      	mov	r0, r3
 8004d08:	f003 ff9f 	bl	8008c4a <USB_ReadChInterrupts>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d16:	d11b      	bne.n	8004d50 <HCD_HC_IN_IRQHandler+0x162>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d24:	461a      	mov	r2, r3
 8004d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	212c      	movs	r1, #44	; 0x2c
 8004d32:	fb01 f303 	mul.w	r3, r1, r3
 8004d36:	4413      	add	r3, r2
 8004d38:	3361      	adds	r3, #97	; 0x61
 8004d3a:	2209      	movs	r2, #9
 8004d3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	b2d2      	uxtb	r2, r2
 8004d46:	4611      	mov	r1, r2
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f004 fbd0 	bl	80094ee <USB_HC_Halt>
 8004d4e:	e026      	b.n	8004d9e <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	b2d2      	uxtb	r2, r2
 8004d58:	4611      	mov	r1, r2
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f003 ff75 	bl	8008c4a <USB_ReadChInterrupts>
 8004d60:	4603      	mov	r3, r0
 8004d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d66:	2b80      	cmp	r3, #128	; 0x80
 8004d68:	d119      	bne.n	8004d9e <HCD_HC_IN_IRQHandler+0x1b0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d76:	461a      	mov	r2, r3
 8004d78:	2380      	movs	r3, #128	; 0x80
 8004d7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	212c      	movs	r1, #44	; 0x2c
 8004d82:	fb01 f303 	mul.w	r3, r1, r3
 8004d86:	4413      	add	r3, r2
 8004d88:	3361      	adds	r3, #97	; 0x61
 8004d8a:	2207      	movs	r2, #7
 8004d8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	4611      	mov	r1, r2
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f004 fba8 	bl	80094ee <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	b2d2      	uxtb	r2, r2
 8004da6:	4611      	mov	r1, r2
 8004da8:	4618      	mov	r0, r3
 8004daa:	f003 ff4e 	bl	8008c4a <USB_ReadChInterrupts>
 8004dae:	4603      	mov	r3, r0
 8004db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004db8:	d112      	bne.n	8004de0 <HCD_HC_IN_IRQHandler+0x1f2>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	b2d2      	uxtb	r2, r2
 8004dc2:	4611      	mov	r1, r2
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f004 fb92 	bl	80094ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ddc:	6093      	str	r3, [r2, #8]
 8004dde:	e325      	b.n	800542c <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	4611      	mov	r1, r2
 8004dea:	4618      	mov	r0, r3
 8004dec:	f003 ff2d 	bl	8008c4a <USB_ReadChInterrupts>
 8004df0:	4603      	mov	r3, r0
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	f040 80e8 	bne.w	8004fcc <HCD_HC_IN_IRQHandler+0x3de>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e08:	461a      	mov	r2, r3
 8004e0a:	2320      	movs	r3, #32
 8004e0c:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d019      	beq.n	8004e4a <HCD_HC_IN_IRQHandler+0x25c>
    {
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	212c      	movs	r1, #44	; 0x2c
 8004e1c:	fb01 f303 	mul.w	r3, r1, r3
 8004e20:	4413      	add	r3, r2
 8004e22:	3348      	adds	r3, #72	; 0x48
 8004e24:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	0159      	lsls	r1, r3, #5
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	440b      	add	r3, r1
 8004e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004e38:	1ad2      	subs	r2, r2, r3
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	202c      	movs	r0, #44	; 0x2c
 8004e40:	fb00 f303 	mul.w	r3, r0, r3
 8004e44:	440b      	add	r3, r1
 8004e46:	3350      	adds	r3, #80	; 0x50
 8004e48:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[ch_num].state = HC_XFRC;
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	212c      	movs	r1, #44	; 0x2c
 8004e50:	fb01 f303 	mul.w	r3, r1, r3
 8004e54:	4413      	add	r3, r2
 8004e56:	3361      	adds	r3, #97	; 0x61
 8004e58:	2201      	movs	r2, #1
 8004e5a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	212c      	movs	r1, #44	; 0x2c
 8004e62:	fb01 f303 	mul.w	r3, r1, r3
 8004e66:	4413      	add	r3, r2
 8004e68:	335c      	adds	r3, #92	; 0x5c
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	015a      	lsls	r2, r3, #5
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	212c      	movs	r1, #44	; 0x2c
 8004e86:	fb01 f303 	mul.w	r3, r1, r3
 8004e8a:	4413      	add	r3, r2
 8004e8c:	333f      	adds	r3, #63	; 0x3f
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d009      	beq.n	8004ea8 <HCD_HC_IN_IRQHandler+0x2ba>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	212c      	movs	r1, #44	; 0x2c
 8004e9a:	fb01 f303 	mul.w	r3, r1, r3
 8004e9e:	4413      	add	r3, r2
 8004ea0:	333f      	adds	r3, #63	; 0x3f
 8004ea2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d111      	bne.n	8004ecc <HCD_HC_IN_IRQHandler+0x2de>
    {
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	4611      	mov	r1, r2
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f004 fb1b 	bl	80094ee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	2310      	movs	r3, #16
 8004ec8:	6093      	str	r3, [r2, #8]
 8004eca:	e03a      	b.n	8004f42 <HCD_HC_IN_IRQHandler+0x354>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	212c      	movs	r1, #44	; 0x2c
 8004ed2:	fb01 f303 	mul.w	r3, r1, r3
 8004ed6:	4413      	add	r3, r2
 8004ed8:	333f      	adds	r3, #63	; 0x3f
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b03      	cmp	r3, #3
 8004ede:	d009      	beq.n	8004ef4 <HCD_HC_IN_IRQHandler+0x306>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	212c      	movs	r1, #44	; 0x2c
 8004ee6:	fb01 f303 	mul.w	r3, r1, r3
 8004eea:	4413      	add	r3, r2
 8004eec:	333f      	adds	r3, #63	; 0x3f
 8004eee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d126      	bne.n	8004f42 <HCD_HC_IN_IRQHandler+0x354>
    {
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	0151      	lsls	r1, r2, #5
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	440a      	add	r2, r1
 8004f0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f12:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	212c      	movs	r1, #44	; 0x2c
 8004f1a:	fb01 f303 	mul.w	r3, r1, r3
 8004f1e:	4413      	add	r3, r2
 8004f20:	3360      	adds	r3, #96	; 0x60
 8004f22:	2201      	movs	r2, #1
 8004f24:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	b2d9      	uxtb	r1, r3
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	202c      	movs	r0, #44	; 0x2c
 8004f30:	fb00 f303 	mul.w	r3, r0, r3
 8004f34:	4413      	add	r3, r2
 8004f36:	3360      	adds	r3, #96	; 0x60
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f00b faad 	bl	801049c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d12b      	bne.n	8004fa2 <HCD_HC_IN_IRQHandler+0x3b4>
    {
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	212c      	movs	r1, #44	; 0x2c
 8004f50:	fb01 f303 	mul.w	r3, r1, r3
 8004f54:	4413      	add	r3, r2
 8004f56:	3348      	adds	r3, #72	; 0x48
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6879      	ldr	r1, [r7, #4]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	202c      	movs	r0, #44	; 0x2c
 8004f60:	fb00 f202 	mul.w	r2, r0, r2
 8004f64:	440a      	add	r2, r1
 8004f66:	3240      	adds	r2, #64	; 0x40
 8004f68:	8812      	ldrh	r2, [r2, #0]
 8004f6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 825a 	beq.w	800542c <HCD_HC_IN_IRQHandler+0x83e>
      {
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	212c      	movs	r1, #44	; 0x2c
 8004f7e:	fb01 f303 	mul.w	r3, r1, r3
 8004f82:	4413      	add	r3, r2
 8004f84:	3354      	adds	r3, #84	; 0x54
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	f083 0301 	eor.w	r3, r3, #1
 8004f8c:	b2d8      	uxtb	r0, r3
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	212c      	movs	r1, #44	; 0x2c
 8004f94:	fb01 f303 	mul.w	r3, r1, r3
 8004f98:	4413      	add	r3, r2
 8004f9a:	3354      	adds	r3, #84	; 0x54
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	701a      	strb	r2, [r3, #0]
 8004fa0:	e244      	b.n	800542c <HCD_HC_IN_IRQHandler+0x83e>
      }
    }
    else
    {
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	212c      	movs	r1, #44	; 0x2c
 8004fa8:	fb01 f303 	mul.w	r3, r1, r3
 8004fac:	4413      	add	r3, r2
 8004fae:	3354      	adds	r3, #84	; 0x54
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	f083 0301 	eor.w	r3, r3, #1
 8004fb6:	b2d8      	uxtb	r0, r3
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	212c      	movs	r1, #44	; 0x2c
 8004fbe:	fb01 f303 	mul.w	r3, r1, r3
 8004fc2:	4413      	add	r3, r2
 8004fc4:	3354      	adds	r3, #84	; 0x54
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	701a      	strb	r2, [r3, #0]
 8004fca:	e22f      	b.n	800542c <HCD_HC_IN_IRQHandler+0x83e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	4611      	mov	r1, r2
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f003 fe37 	bl	8008c4a <USB_ReadChInterrupts>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	f003 0320 	and.w	r3, r3, #32
 8004fe2:	2b20      	cmp	r3, #32
 8004fe4:	d109      	bne.n	8004ffa <HCD_HC_IN_IRQHandler+0x40c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	2320      	movs	r3, #32
 8004ff6:	6093      	str	r3, [r2, #8]
 8004ff8:	e218      	b.n	800542c <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	4611      	mov	r1, r2
 8005004:	4618      	mov	r0, r3
 8005006:	f003 fe20 	bl	8008c4a <USB_ReadChInterrupts>
 800500a:	4603      	mov	r3, r0
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b02      	cmp	r3, #2
 8005012:	f040 816b 	bne.w	80052ec <HCD_HC_IN_IRQHandler+0x6fe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	4413      	add	r3, r2
 800501e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005022:	461a      	mov	r2, r3
 8005024:	2302      	movs	r3, #2
 8005026:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	212c      	movs	r1, #44	; 0x2c
 800502e:	fb01 f303 	mul.w	r3, r1, r3
 8005032:	4413      	add	r3, r2
 8005034:	3361      	adds	r3, #97	; 0x61
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d112      	bne.n	8005062 <HCD_HC_IN_IRQHandler+0x474>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	212c      	movs	r1, #44	; 0x2c
 8005042:	fb01 f303 	mul.w	r3, r1, r3
 8005046:	4413      	add	r3, r2
 8005048:	3361      	adds	r3, #97	; 0x61
 800504a:	2202      	movs	r2, #2
 800504c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	212c      	movs	r1, #44	; 0x2c
 8005054:	fb01 f303 	mul.w	r3, r1, r3
 8005058:	4413      	add	r3, r2
 800505a:	3360      	adds	r3, #96	; 0x60
 800505c:	2201      	movs	r2, #1
 800505e:	701a      	strb	r2, [r3, #0]
 8005060:	e135      	b.n	80052ce <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	212c      	movs	r1, #44	; 0x2c
 8005068:	fb01 f303 	mul.w	r3, r1, r3
 800506c:	4413      	add	r3, r2
 800506e:	3361      	adds	r3, #97	; 0x61
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	2b06      	cmp	r3, #6
 8005074:	d112      	bne.n	800509c <HCD_HC_IN_IRQHandler+0x4ae>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	212c      	movs	r1, #44	; 0x2c
 800507c:	fb01 f303 	mul.w	r3, r1, r3
 8005080:	4413      	add	r3, r2
 8005082:	3361      	adds	r3, #97	; 0x61
 8005084:	2202      	movs	r2, #2
 8005086:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	212c      	movs	r1, #44	; 0x2c
 800508e:	fb01 f303 	mul.w	r3, r1, r3
 8005092:	4413      	add	r3, r2
 8005094:	3360      	adds	r3, #96	; 0x60
 8005096:	2205      	movs	r2, #5
 8005098:	701a      	strb	r2, [r3, #0]
 800509a:	e118      	b.n	80052ce <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	212c      	movs	r1, #44	; 0x2c
 80050a2:	fb01 f303 	mul.w	r3, r1, r3
 80050a6:	4413      	add	r3, r2
 80050a8:	3361      	adds	r3, #97	; 0x61
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	2b07      	cmp	r3, #7
 80050ae:	d009      	beq.n	80050c4 <HCD_HC_IN_IRQHandler+0x4d6>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	212c      	movs	r1, #44	; 0x2c
 80050b6:	fb01 f303 	mul.w	r3, r1, r3
 80050ba:	4413      	add	r3, r2
 80050bc:	3361      	adds	r3, #97	; 0x61
 80050be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80050c0:	2b09      	cmp	r3, #9
 80050c2:	d159      	bne.n	8005178 <HCD_HC_IN_IRQHandler+0x58a>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	212c      	movs	r1, #44	; 0x2c
 80050ca:	fb01 f303 	mul.w	r3, r1, r3
 80050ce:	4413      	add	r3, r2
 80050d0:	3361      	adds	r3, #97	; 0x61
 80050d2:	2202      	movs	r2, #2
 80050d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	212c      	movs	r1, #44	; 0x2c
 80050dc:	fb01 f303 	mul.w	r3, r1, r3
 80050e0:	4413      	add	r3, r2
 80050e2:	335c      	adds	r3, #92	; 0x5c
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	6879      	ldr	r1, [r7, #4]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	202c      	movs	r0, #44	; 0x2c
 80050ee:	fb00 f303 	mul.w	r3, r0, r3
 80050f2:	440b      	add	r3, r1
 80050f4:	335c      	adds	r3, #92	; 0x5c
 80050f6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	212c      	movs	r1, #44	; 0x2c
 80050fe:	fb01 f303 	mul.w	r3, r1, r3
 8005102:	4413      	add	r3, r2
 8005104:	335c      	adds	r3, #92	; 0x5c
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b02      	cmp	r3, #2
 800510a:	d912      	bls.n	8005132 <HCD_HC_IN_IRQHandler+0x544>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	212c      	movs	r1, #44	; 0x2c
 8005112:	fb01 f303 	mul.w	r3, r1, r3
 8005116:	4413      	add	r3, r2
 8005118:	335c      	adds	r3, #92	; 0x5c
 800511a:	2200      	movs	r2, #0
 800511c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	212c      	movs	r1, #44	; 0x2c
 8005124:	fb01 f303 	mul.w	r3, r1, r3
 8005128:	4413      	add	r3, r2
 800512a:	3360      	adds	r3, #96	; 0x60
 800512c:	2204      	movs	r2, #4
 800512e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005130:	e0cd      	b.n	80052ce <HCD_HC_IN_IRQHandler+0x6e0>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	212c      	movs	r1, #44	; 0x2c
 8005138:	fb01 f303 	mul.w	r3, r1, r3
 800513c:	4413      	add	r3, r2
 800513e:	3360      	adds	r3, #96	; 0x60
 8005140:	2202      	movs	r2, #2
 8005142:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	4413      	add	r3, r2
 800514c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800515a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005162:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	4413      	add	r3, r2
 800516c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005170:	461a      	mov	r2, r3
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005176:	e0aa      	b.n	80052ce <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	212c      	movs	r1, #44	; 0x2c
 800517e:	fb01 f303 	mul.w	r3, r1, r3
 8005182:	4413      	add	r3, r2
 8005184:	3361      	adds	r3, #97	; 0x61
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	2b05      	cmp	r3, #5
 800518a:	d109      	bne.n	80051a0 <HCD_HC_IN_IRQHandler+0x5b2>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	212c      	movs	r1, #44	; 0x2c
 8005192:	fb01 f303 	mul.w	r3, r1, r3
 8005196:	4413      	add	r3, r2
 8005198:	3361      	adds	r3, #97	; 0x61
 800519a:	2202      	movs	r2, #2
 800519c:	701a      	strb	r2, [r3, #0]
 800519e:	e096      	b.n	80052ce <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	212c      	movs	r1, #44	; 0x2c
 80051a6:	fb01 f303 	mul.w	r3, r1, r3
 80051aa:	4413      	add	r3, r2
 80051ac:	3361      	adds	r3, #97	; 0x61
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b03      	cmp	r3, #3
 80051b2:	d109      	bne.n	80051c8 <HCD_HC_IN_IRQHandler+0x5da>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	212c      	movs	r1, #44	; 0x2c
 80051ba:	fb01 f303 	mul.w	r3, r1, r3
 80051be:	4413      	add	r3, r2
 80051c0:	3361      	adds	r3, #97	; 0x61
 80051c2:	2202      	movs	r2, #2
 80051c4:	701a      	strb	r2, [r3, #0]
 80051c6:	e082      	b.n	80052ce <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	212c      	movs	r1, #44	; 0x2c
 80051ce:	fb01 f303 	mul.w	r3, r1, r3
 80051d2:	4413      	add	r3, r2
 80051d4:	3361      	adds	r3, #97	; 0x61
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	2b04      	cmp	r3, #4
 80051da:	d13f      	bne.n	800525c <HCD_HC_IN_IRQHandler+0x66e>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	212c      	movs	r1, #44	; 0x2c
 80051e2:	fb01 f303 	mul.w	r3, r1, r3
 80051e6:	4413      	add	r3, r2
 80051e8:	3361      	adds	r3, #97	; 0x61
 80051ea:	2202      	movs	r2, #2
 80051ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	212c      	movs	r1, #44	; 0x2c
 80051f4:	fb01 f303 	mul.w	r3, r1, r3
 80051f8:	4413      	add	r3, r2
 80051fa:	3360      	adds	r3, #96	; 0x60
 80051fc:	2202      	movs	r2, #2
 80051fe:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	212c      	movs	r1, #44	; 0x2c
 8005206:	fb01 f303 	mul.w	r3, r1, r3
 800520a:	4413      	add	r3, r2
 800520c:	333f      	adds	r3, #63	; 0x3f
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d009      	beq.n	8005228 <HCD_HC_IN_IRQHandler+0x63a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	212c      	movs	r1, #44	; 0x2c
 800521a:	fb01 f303 	mul.w	r3, r1, r3
 800521e:	4413      	add	r3, r2
 8005220:	333f      	adds	r3, #63	; 0x3f
 8005222:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005224:	2b02      	cmp	r3, #2
 8005226:	d152      	bne.n	80052ce <HCD_HC_IN_IRQHandler+0x6e0>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	4413      	add	r3, r2
 8005230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800523e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005246:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	4413      	add	r3, r2
 8005250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005254:	461a      	mov	r2, r3
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	6013      	str	r3, [r2, #0]
 800525a:	e038      	b.n	80052ce <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	212c      	movs	r1, #44	; 0x2c
 8005262:	fb01 f303 	mul.w	r3, r1, r3
 8005266:	4413      	add	r3, r2
 8005268:	3361      	adds	r3, #97	; 0x61
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	2b08      	cmp	r3, #8
 800526e:	d123      	bne.n	80052b8 <HCD_HC_IN_IRQHandler+0x6ca>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	212c      	movs	r1, #44	; 0x2c
 8005276:	fb01 f303 	mul.w	r3, r1, r3
 800527a:	4413      	add	r3, r2
 800527c:	3361      	adds	r3, #97	; 0x61
 800527e:	2202      	movs	r2, #2
 8005280:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	212c      	movs	r1, #44	; 0x2c
 8005288:	fb01 f303 	mul.w	r3, r1, r3
 800528c:	4413      	add	r3, r2
 800528e:	335c      	adds	r3, #92	; 0x5c
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	1c5a      	adds	r2, r3, #1
 8005294:	6879      	ldr	r1, [r7, #4]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	202c      	movs	r0, #44	; 0x2c
 800529a:	fb00 f303 	mul.w	r3, r0, r3
 800529e:	440b      	add	r3, r1
 80052a0:	335c      	adds	r3, #92	; 0x5c
 80052a2:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	212c      	movs	r1, #44	; 0x2c
 80052aa:	fb01 f303 	mul.w	r3, r1, r3
 80052ae:	4413      	add	r3, r2
 80052b0:	3360      	adds	r3, #96	; 0x60
 80052b2:	2204      	movs	r2, #4
 80052b4:	701a      	strb	r2, [r3, #0]
 80052b6:	e00a      	b.n	80052ce <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else
    {
      if (hhcd->hc[ch_num].state == HC_HALTED)
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	212c      	movs	r1, #44	; 0x2c
 80052be:	fb01 f303 	mul.w	r3, r1, r3
 80052c2:	4413      	add	r3, r2
 80052c4:	3361      	adds	r3, #97	; 0x61
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	f000 80ae 	beq.w	800542a <HCD_HC_IN_IRQHandler+0x83c>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	b2d9      	uxtb	r1, r3
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	202c      	movs	r0, #44	; 0x2c
 80052d8:	fb00 f303 	mul.w	r3, r0, r3
 80052dc:	4413      	add	r3, r2
 80052de:	3360      	adds	r3, #96	; 0x60
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f00b f8d9 	bl	801049c <HAL_HCD_HC_NotifyURBChange_Callback>
 80052ea:	e09f      	b.n	800542c <HCD_HC_IN_IRQHandler+0x83e>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	4611      	mov	r1, r2
 80052f6:	4618      	mov	r0, r3
 80052f8:	f003 fca7 	bl	8008c4a <USB_ReadChInterrupts>
 80052fc:	4603      	mov	r3, r0
 80052fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005302:	2b40      	cmp	r3, #64	; 0x40
 8005304:	d123      	bne.n	800534e <HCD_HC_IN_IRQHandler+0x760>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	015a      	lsls	r2, r3, #5
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	4413      	add	r3, r2
 800530e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005312:	461a      	mov	r2, r3
 8005314:	2340      	movs	r3, #64	; 0x40
 8005316:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	212c      	movs	r1, #44	; 0x2c
 800531e:	fb01 f303 	mul.w	r3, r1, r3
 8005322:	4413      	add	r3, r2
 8005324:	3361      	adds	r3, #97	; 0x61
 8005326:	2205      	movs	r2, #5
 8005328:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	212c      	movs	r1, #44	; 0x2c
 8005330:	fb01 f303 	mul.w	r3, r1, r3
 8005334:	4413      	add	r3, r2
 8005336:	335c      	adds	r3, #92	; 0x5c
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	4611      	mov	r1, r2
 8005346:	4618      	mov	r0, r3
 8005348:	f004 f8d1 	bl	80094ee <USB_HC_Halt>
 800534c:	e06e      	b.n	800542c <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	b2d2      	uxtb	r2, r2
 8005356:	4611      	mov	r1, r2
 8005358:	4618      	mov	r0, r3
 800535a:	f003 fc76 	bl	8008c4a <USB_ReadChInterrupts>
 800535e:	4603      	mov	r3, r0
 8005360:	f003 0310 	and.w	r3, r3, #16
 8005364:	2b10      	cmp	r3, #16
 8005366:	d161      	bne.n	800542c <HCD_HC_IN_IRQHandler+0x83e>
  {
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	212c      	movs	r1, #44	; 0x2c
 800536e:	fb01 f303 	mul.w	r3, r1, r3
 8005372:	4413      	add	r3, r2
 8005374:	333f      	adds	r3, #63	; 0x3f
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b03      	cmp	r3, #3
 800537a:	d11a      	bne.n	80053b2 <HCD_HC_IN_IRQHandler+0x7c4>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	212c      	movs	r1, #44	; 0x2c
 8005382:	fb01 f303 	mul.w	r3, r1, r3
 8005386:	4413      	add	r3, r2
 8005388:	335c      	adds	r3, #92	; 0x5c
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	212c      	movs	r1, #44	; 0x2c
 8005394:	fb01 f303 	mul.w	r3, r1, r3
 8005398:	4413      	add	r3, r2
 800539a:	3361      	adds	r3, #97	; 0x61
 800539c:	2204      	movs	r2, #4
 800539e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	4611      	mov	r1, r2
 80053aa:	4618      	mov	r0, r3
 80053ac:	f004 f89f 	bl	80094ee <USB_HC_Halt>
 80053b0:	e031      	b.n	8005416 <HCD_HC_IN_IRQHandler+0x828>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	212c      	movs	r1, #44	; 0x2c
 80053b8:	fb01 f303 	mul.w	r3, r1, r3
 80053bc:	4413      	add	r3, r2
 80053be:	333f      	adds	r3, #63	; 0x3f
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d009      	beq.n	80053da <HCD_HC_IN_IRQHandler+0x7ec>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	212c      	movs	r1, #44	; 0x2c
 80053cc:	fb01 f303 	mul.w	r3, r1, r3
 80053d0:	4413      	add	r3, r2
 80053d2:	333f      	adds	r3, #63	; 0x3f
 80053d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d11d      	bne.n	8005416 <HCD_HC_IN_IRQHandler+0x828>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	212c      	movs	r1, #44	; 0x2c
 80053e0:	fb01 f303 	mul.w	r3, r1, r3
 80053e4:	4413      	add	r3, r2
 80053e6:	335c      	adds	r3, #92	; 0x5c
 80053e8:	2200      	movs	r2, #0
 80053ea:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d110      	bne.n	8005416 <HCD_HC_IN_IRQHandler+0x828>
      {
        hhcd->hc[ch_num].state = HC_NAK;
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	212c      	movs	r1, #44	; 0x2c
 80053fa:	fb01 f303 	mul.w	r3, r1, r3
 80053fe:	4413      	add	r3, r2
 8005400:	3361      	adds	r3, #97	; 0x61
 8005402:	2204      	movs	r2, #4
 8005404:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	b2d2      	uxtb	r2, r2
 800540e:	4611      	mov	r1, r2
 8005410:	4618      	mov	r0, r3
 8005412:	f004 f86c 	bl	80094ee <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	4413      	add	r3, r2
 800541e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005422:	461a      	mov	r2, r3
 8005424:	2310      	movs	r3, #16
 8005426:	6093      	str	r3, [r2, #8]
 8005428:	e000      	b.n	800542c <HCD_HC_IN_IRQHandler+0x83e>
        return;
 800542a:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800542c:	3718      	adds	r7, #24
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b088      	sub	sp, #32
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
 800543a:	460b      	mov	r3, r1
 800543c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005448:	78fb      	ldrb	r3, [r7, #3]
 800544a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	4611      	mov	r1, r2
 8005456:	4618      	mov	r0, r3
 8005458:	f003 fbf7 	bl	8008c4a <USB_ReadChInterrupts>
 800545c:	4603      	mov	r3, r0
 800545e:	f003 0304 	and.w	r3, r3, #4
 8005462:	2b04      	cmp	r3, #4
 8005464:	d11a      	bne.n	800549c <HCD_HC_OUT_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	4413      	add	r3, r2
 800546e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005472:	461a      	mov	r2, r3
 8005474:	2304      	movs	r3, #4
 8005476:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	212c      	movs	r1, #44	; 0x2c
 800547e:	fb01 f303 	mul.w	r3, r1, r3
 8005482:	4413      	add	r3, r2
 8005484:	3361      	adds	r3, #97	; 0x61
 8005486:	2207      	movs	r2, #7
 8005488:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	b2d2      	uxtb	r2, r2
 8005492:	4611      	mov	r1, r2
 8005494:	4618      	mov	r0, r3
 8005496:	f004 f82a 	bl	80094ee <USB_HC_Halt>
 800549a:	e393      	b.n	8005bc4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	b2d2      	uxtb	r2, r2
 80054a4:	4611      	mov	r1, r2
 80054a6:	4618      	mov	r0, r3
 80054a8:	f003 fbcf 	bl	8008c4a <USB_ReadChInterrupts>
 80054ac:	4603      	mov	r3, r0
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b20      	cmp	r3, #32
 80054b4:	d137      	bne.n	8005526 <HCD_HC_OUT_IRQHandler+0xf4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c2:	461a      	mov	r2, r3
 80054c4:	2320      	movs	r3, #32
 80054c6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[ch_num].do_ping == 1U)
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	212c      	movs	r1, #44	; 0x2c
 80054ce:	fb01 f303 	mul.w	r3, r1, r3
 80054d2:	4413      	add	r3, r2
 80054d4:	333d      	adds	r3, #61	; 0x3d
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	f040 8373 	bne.w	8005bc4 <HCD_HC_OUT_IRQHandler+0x792>
    {
      hhcd->hc[ch_num].do_ping = 0U;
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	212c      	movs	r1, #44	; 0x2c
 80054e4:	fb01 f303 	mul.w	r3, r1, r3
 80054e8:	4413      	add	r3, r2
 80054ea:	333d      	adds	r3, #61	; 0x3d
 80054ec:	2200      	movs	r2, #0
 80054ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	212c      	movs	r1, #44	; 0x2c
 80054f6:	fb01 f303 	mul.w	r3, r1, r3
 80054fa:	4413      	add	r3, r2
 80054fc:	3360      	adds	r3, #96	; 0x60
 80054fe:	2202      	movs	r2, #2
 8005500:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_ACK;
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	212c      	movs	r1, #44	; 0x2c
 8005508:	fb01 f303 	mul.w	r3, r1, r3
 800550c:	4413      	add	r3, r2
 800550e:	3361      	adds	r3, #97	; 0x61
 8005510:	2203      	movs	r2, #3
 8005512:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	b2d2      	uxtb	r2, r2
 800551c:	4611      	mov	r1, r2
 800551e:	4618      	mov	r0, r3
 8005520:	f003 ffe5 	bl	80094ee <USB_HC_Halt>
 8005524:	e34e      	b.n	8005bc4 <HCD_HC_OUT_IRQHandler+0x792>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	b2d2      	uxtb	r2, r2
 800552e:	4611      	mov	r1, r2
 8005530:	4618      	mov	r0, r3
 8005532:	f003 fb8a 	bl	8008c4a <USB_ReadChInterrupts>
 8005536:	4603      	mov	r3, r0
 8005538:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800553c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005540:	d112      	bne.n	8005568 <HCD_HC_OUT_IRQHandler+0x136>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	4413      	add	r3, r2
 800554a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800554e:	461a      	mov	r2, r3
 8005550:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005554:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	b2d2      	uxtb	r2, r2
 800555e:	4611      	mov	r1, r2
 8005560:	4618      	mov	r0, r3
 8005562:	f003 ffc4 	bl	80094ee <USB_HC_Halt>
 8005566:	e32d      	b.n	8005bc4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	4611      	mov	r1, r2
 8005572:	4618      	mov	r0, r3
 8005574:	f003 fb69 	bl	8008c4a <USB_ReadChInterrupts>
 8005578:	4603      	mov	r3, r0
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b01      	cmp	r3, #1
 8005580:	d142      	bne.n	8005608 <HCD_HC_OUT_IRQHandler+0x1d6>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	212c      	movs	r1, #44	; 0x2c
 8005588:	fb01 f303 	mul.w	r3, r1, r3
 800558c:	4413      	add	r3, r2
 800558e:	335c      	adds	r3, #92	; 0x5c
 8005590:	2200      	movs	r2, #0
 8005592:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	4611      	mov	r1, r2
 800559e:	4618      	mov	r0, r3
 80055a0:	f003 fb53 	bl	8008c4a <USB_ReadChInterrupts>
 80055a4:	4603      	mov	r3, r0
 80055a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055aa:	2b40      	cmp	r3, #64	; 0x40
 80055ac:	d111      	bne.n	80055d2 <HCD_HC_OUT_IRQHandler+0x1a0>
    {
      hhcd->hc[ch_num].do_ping = 1U;
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	212c      	movs	r1, #44	; 0x2c
 80055b4:	fb01 f303 	mul.w	r3, r1, r3
 80055b8:	4413      	add	r3, r2
 80055ba:	333d      	adds	r3, #61	; 0x3d
 80055bc:	2201      	movs	r2, #1
 80055be:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055cc:	461a      	mov	r2, r3
 80055ce:	2340      	movs	r3, #64	; 0x40
 80055d0:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055de:	461a      	mov	r2, r3
 80055e0:	2301      	movs	r3, #1
 80055e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	212c      	movs	r1, #44	; 0x2c
 80055ea:	fb01 f303 	mul.w	r3, r1, r3
 80055ee:	4413      	add	r3, r2
 80055f0:	3361      	adds	r3, #97	; 0x61
 80055f2:	2201      	movs	r2, #1
 80055f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	b2d2      	uxtb	r2, r2
 80055fe:	4611      	mov	r1, r2
 8005600:	4618      	mov	r0, r3
 8005602:	f003 ff74 	bl	80094ee <USB_HC_Halt>
 8005606:	e2dd      	b.n	8005bc4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	b2d2      	uxtb	r2, r2
 8005610:	4611      	mov	r1, r2
 8005612:	4618      	mov	r0, r3
 8005614:	f003 fb19 	bl	8008c4a <USB_ReadChInterrupts>
 8005618:	4603      	mov	r3, r0
 800561a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561e:	2b40      	cmp	r3, #64	; 0x40
 8005620:	d12c      	bne.n	800567c <HCD_HC_OUT_IRQHandler+0x24a>
  {
    hhcd->hc[ch_num].state = HC_NYET;
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	212c      	movs	r1, #44	; 0x2c
 8005628:	fb01 f303 	mul.w	r3, r1, r3
 800562c:	4413      	add	r3, r2
 800562e:	3361      	adds	r3, #97	; 0x61
 8005630:	2205      	movs	r2, #5
 8005632:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	212c      	movs	r1, #44	; 0x2c
 800563a:	fb01 f303 	mul.w	r3, r1, r3
 800563e:	4413      	add	r3, r2
 8005640:	333d      	adds	r3, #61	; 0x3d
 8005642:	2201      	movs	r2, #1
 8005644:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	212c      	movs	r1, #44	; 0x2c
 800564c:	fb01 f303 	mul.w	r3, r1, r3
 8005650:	4413      	add	r3, r2
 8005652:	335c      	adds	r3, #92	; 0x5c
 8005654:	2200      	movs	r2, #0
 8005656:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	b2d2      	uxtb	r2, r2
 8005660:	4611      	mov	r1, r2
 8005662:	4618      	mov	r0, r3
 8005664:	f003 ff43 	bl	80094ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	4413      	add	r3, r2
 8005670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005674:	461a      	mov	r2, r3
 8005676:	2340      	movs	r3, #64	; 0x40
 8005678:	6093      	str	r3, [r2, #8]
 800567a:	e2a3      	b.n	8005bc4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	b2d2      	uxtb	r2, r2
 8005684:	4611      	mov	r1, r2
 8005686:	4618      	mov	r0, r3
 8005688:	f003 fadf 	bl	8008c4a <USB_ReadChInterrupts>
 800568c:	4603      	mov	r3, r0
 800568e:	f003 0308 	and.w	r3, r3, #8
 8005692:	2b08      	cmp	r3, #8
 8005694:	d11a      	bne.n	80056cc <HCD_HC_OUT_IRQHandler+0x29a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	4413      	add	r3, r2
 800569e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a2:	461a      	mov	r2, r3
 80056a4:	2308      	movs	r3, #8
 80056a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	212c      	movs	r1, #44	; 0x2c
 80056ae:	fb01 f303 	mul.w	r3, r1, r3
 80056b2:	4413      	add	r3, r2
 80056b4:	3361      	adds	r3, #97	; 0x61
 80056b6:	2206      	movs	r2, #6
 80056b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	b2d2      	uxtb	r2, r2
 80056c2:	4611      	mov	r1, r2
 80056c4:	4618      	mov	r0, r3
 80056c6:	f003 ff12 	bl	80094ee <USB_HC_Halt>
 80056ca:	e27b      	b.n	8005bc4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	4611      	mov	r1, r2
 80056d6:	4618      	mov	r0, r3
 80056d8:	f003 fab7 	bl	8008c4a <USB_ReadChInterrupts>
 80056dc:	4603      	mov	r3, r0
 80056de:	f003 0310 	and.w	r3, r3, #16
 80056e2:	2b10      	cmp	r3, #16
 80056e4:	d140      	bne.n	8005768 <HCD_HC_OUT_IRQHandler+0x336>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	212c      	movs	r1, #44	; 0x2c
 80056ec:	fb01 f303 	mul.w	r3, r1, r3
 80056f0:	4413      	add	r3, r2
 80056f2:	335c      	adds	r3, #92	; 0x5c
 80056f4:	2200      	movs	r2, #0
 80056f6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	212c      	movs	r1, #44	; 0x2c
 80056fe:	fb01 f303 	mul.w	r3, r1, r3
 8005702:	4413      	add	r3, r2
 8005704:	3361      	adds	r3, #97	; 0x61
 8005706:	2204      	movs	r2, #4
 8005708:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num].do_ping == 0U)
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	212c      	movs	r1, #44	; 0x2c
 8005710:	fb01 f303 	mul.w	r3, r1, r3
 8005714:	4413      	add	r3, r2
 8005716:	333d      	adds	r3, #61	; 0x3d
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d112      	bne.n	8005744 <HCD_HC_OUT_IRQHandler+0x312>
    {
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	212c      	movs	r1, #44	; 0x2c
 8005724:	fb01 f303 	mul.w	r3, r1, r3
 8005728:	4413      	add	r3, r2
 800572a:	333c      	adds	r3, #60	; 0x3c
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d108      	bne.n	8005744 <HCD_HC_OUT_IRQHandler+0x312>
      {
        hhcd->hc[ch_num].do_ping = 1U;
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	212c      	movs	r1, #44	; 0x2c
 8005738:	fb01 f303 	mul.w	r3, r1, r3
 800573c:	4413      	add	r3, r2
 800573e:	333d      	adds	r3, #61	; 0x3d
 8005740:	2201      	movs	r2, #1
 8005742:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	b2d2      	uxtb	r2, r2
 800574c:	4611      	mov	r1, r2
 800574e:	4618      	mov	r0, r3
 8005750:	f003 fecd 	bl	80094ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	4413      	add	r3, r2
 800575c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005760:	461a      	mov	r2, r3
 8005762:	2310      	movs	r3, #16
 8005764:	6093      	str	r3, [r2, #8]
 8005766:	e22d      	b.n	8005bc4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	b2d2      	uxtb	r2, r2
 8005770:	4611      	mov	r1, r2
 8005772:	4618      	mov	r0, r3
 8005774:	f003 fa69 	bl	8008c4a <USB_ReadChInterrupts>
 8005778:	4603      	mov	r3, r0
 800577a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800577e:	2b80      	cmp	r3, #128	; 0x80
 8005780:	d164      	bne.n	800584c <HCD_HC_OUT_IRQHandler+0x41a>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d111      	bne.n	80057ae <HCD_HC_OUT_IRQHandler+0x37c>
    {
      hhcd->hc[ch_num].state = HC_XACTERR;
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	212c      	movs	r1, #44	; 0x2c
 8005790:	fb01 f303 	mul.w	r3, r1, r3
 8005794:	4413      	add	r3, r2
 8005796:	3361      	adds	r3, #97	; 0x61
 8005798:	2207      	movs	r2, #7
 800579a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	4611      	mov	r1, r2
 80057a6:	4618      	mov	r0, r3
 80057a8:	f003 fea1 	bl	80094ee <USB_HC_Halt>
 80057ac:	e044      	b.n	8005838 <HCD_HC_OUT_IRQHandler+0x406>
    }
    else
    {
      hhcd->hc[ch_num].ErrCnt++;
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	212c      	movs	r1, #44	; 0x2c
 80057b4:	fb01 f303 	mul.w	r3, r1, r3
 80057b8:	4413      	add	r3, r2
 80057ba:	335c      	adds	r3, #92	; 0x5c
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	6879      	ldr	r1, [r7, #4]
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	202c      	movs	r0, #44	; 0x2c
 80057c6:	fb00 f303 	mul.w	r3, r0, r3
 80057ca:	440b      	add	r3, r1
 80057cc:	335c      	adds	r3, #92	; 0x5c
 80057ce:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	212c      	movs	r1, #44	; 0x2c
 80057d6:	fb01 f303 	mul.w	r3, r1, r3
 80057da:	4413      	add	r3, r2
 80057dc:	335c      	adds	r3, #92	; 0x5c
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d920      	bls.n	8005826 <HCD_HC_OUT_IRQHandler+0x3f4>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	212c      	movs	r1, #44	; 0x2c
 80057ea:	fb01 f303 	mul.w	r3, r1, r3
 80057ee:	4413      	add	r3, r2
 80057f0:	335c      	adds	r3, #92	; 0x5c
 80057f2:	2200      	movs	r2, #0
 80057f4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	212c      	movs	r1, #44	; 0x2c
 80057fc:	fb01 f303 	mul.w	r3, r1, r3
 8005800:	4413      	add	r3, r2
 8005802:	3360      	adds	r3, #96	; 0x60
 8005804:	2204      	movs	r2, #4
 8005806:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	b2d9      	uxtb	r1, r3
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	202c      	movs	r0, #44	; 0x2c
 8005812:	fb00 f303 	mul.w	r3, r0, r3
 8005816:	4413      	add	r3, r2
 8005818:	3360      	adds	r3, #96	; 0x60
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	461a      	mov	r2, r3
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f00a fe3c 	bl	801049c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005824:	e008      	b.n	8005838 <HCD_HC_OUT_IRQHandler+0x406>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	212c      	movs	r1, #44	; 0x2c
 800582c:	fb01 f303 	mul.w	r3, r1, r3
 8005830:	4413      	add	r3, r2
 8005832:	3360      	adds	r3, #96	; 0x60
 8005834:	2202      	movs	r2, #2
 8005836:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	4413      	add	r3, r2
 8005840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005844:	461a      	mov	r2, r3
 8005846:	2380      	movs	r3, #128	; 0x80
 8005848:	6093      	str	r3, [r2, #8]
 800584a:	e1bb      	b.n	8005bc4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	b2d2      	uxtb	r2, r2
 8005854:	4611      	mov	r1, r2
 8005856:	4618      	mov	r0, r3
 8005858:	f003 f9f7 	bl	8008c4a <USB_ReadChInterrupts>
 800585c:	4603      	mov	r3, r0
 800585e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005866:	d11b      	bne.n	80058a0 <HCD_HC_OUT_IRQHandler+0x46e>
  {
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	212c      	movs	r1, #44	; 0x2c
 800586e:	fb01 f303 	mul.w	r3, r1, r3
 8005872:	4413      	add	r3, r2
 8005874:	3361      	adds	r3, #97	; 0x61
 8005876:	2209      	movs	r2, #9
 8005878:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	4611      	mov	r1, r2
 8005884:	4618      	mov	r0, r3
 8005886:	f003 fe32 	bl	80094ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	4413      	add	r3, r2
 8005892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005896:	461a      	mov	r2, r3
 8005898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800589c:	6093      	str	r3, [r2, #8]
 800589e:	e191      	b.n	8005bc4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	4611      	mov	r1, r2
 80058aa:	4618      	mov	r0, r3
 80058ac:	f003 f9cd 	bl	8008c4a <USB_ReadChInterrupts>
 80058b0:	4603      	mov	r3, r0
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	f040 8184 	bne.w	8005bc4 <HCD_HC_OUT_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c8:	461a      	mov	r2, r3
 80058ca:	2302      	movs	r3, #2
 80058cc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	212c      	movs	r1, #44	; 0x2c
 80058d4:	fb01 f303 	mul.w	r3, r1, r3
 80058d8:	4413      	add	r3, r2
 80058da:	3361      	adds	r3, #97	; 0x61
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	f040 8087 	bne.w	80059f2 <HCD_HC_OUT_IRQHandler+0x5c0>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	212c      	movs	r1, #44	; 0x2c
 80058ea:	fb01 f303 	mul.w	r3, r1, r3
 80058ee:	4413      	add	r3, r2
 80058f0:	3361      	adds	r3, #97	; 0x61
 80058f2:	2202      	movs	r2, #2
 80058f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	212c      	movs	r1, #44	; 0x2c
 80058fc:	fb01 f303 	mul.w	r3, r1, r3
 8005900:	4413      	add	r3, r2
 8005902:	3360      	adds	r3, #96	; 0x60
 8005904:	2201      	movs	r2, #1
 8005906:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	212c      	movs	r1, #44	; 0x2c
 800590e:	fb01 f303 	mul.w	r3, r1, r3
 8005912:	4413      	add	r3, r2
 8005914:	333f      	adds	r3, #63	; 0x3f
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	2b02      	cmp	r3, #2
 800591a:	d00a      	beq.n	8005932 <HCD_HC_OUT_IRQHandler+0x500>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	212c      	movs	r1, #44	; 0x2c
 8005922:	fb01 f303 	mul.w	r3, r1, r3
 8005926:	4413      	add	r3, r2
 8005928:	333f      	adds	r3, #63	; 0x3f
 800592a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800592c:	2b03      	cmp	r3, #3
 800592e:	f040 8139 	bne.w	8005ba4 <HCD_HC_OUT_IRQHandler+0x772>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d113      	bne.n	8005962 <HCD_HC_OUT_IRQHandler+0x530>
        {
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	212c      	movs	r1, #44	; 0x2c
 8005940:	fb01 f303 	mul.w	r3, r1, r3
 8005944:	4413      	add	r3, r2
 8005946:	3355      	adds	r3, #85	; 0x55
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	f083 0301 	eor.w	r3, r3, #1
 800594e:	b2d8      	uxtb	r0, r3
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	212c      	movs	r1, #44	; 0x2c
 8005956:	fb01 f303 	mul.w	r3, r1, r3
 800595a:	4413      	add	r3, r2
 800595c:	3355      	adds	r3, #85	; 0x55
 800595e:	4602      	mov	r2, r0
 8005960:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	2b01      	cmp	r3, #1
 8005968:	f040 811c 	bne.w	8005ba4 <HCD_HC_OUT_IRQHandler+0x772>
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	212c      	movs	r1, #44	; 0x2c
 8005972:	fb01 f303 	mul.w	r3, r1, r3
 8005976:	4413      	add	r3, r2
 8005978:	334c      	adds	r3, #76	; 0x4c
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 8111 	beq.w	8005ba4 <HCD_HC_OUT_IRQHandler+0x772>
        {
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	212c      	movs	r1, #44	; 0x2c
 8005988:	fb01 f303 	mul.w	r3, r1, r3
 800598c:	4413      	add	r3, r2
 800598e:	334c      	adds	r3, #76	; 0x4c
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6879      	ldr	r1, [r7, #4]
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	202c      	movs	r0, #44	; 0x2c
 8005998:	fb00 f202 	mul.w	r2, r0, r2
 800599c:	440a      	add	r2, r1
 800599e:	3240      	adds	r2, #64	; 0x40
 80059a0:	8812      	ldrh	r2, [r2, #0]
 80059a2:	4413      	add	r3, r2
 80059a4:	3b01      	subs	r3, #1
 80059a6:	6879      	ldr	r1, [r7, #4]
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	202c      	movs	r0, #44	; 0x2c
 80059ac:	fb00 f202 	mul.w	r2, r0, r2
 80059b0:	440a      	add	r2, r1
 80059b2:	3240      	adds	r2, #64	; 0x40
 80059b4:	8812      	ldrh	r2, [r2, #0]
 80059b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]

          if ((num_packets & 1U) != 0U)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 80ee 	beq.w	8005ba4 <HCD_HC_OUT_IRQHandler+0x772>
          {
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	212c      	movs	r1, #44	; 0x2c
 80059ce:	fb01 f303 	mul.w	r3, r1, r3
 80059d2:	4413      	add	r3, r2
 80059d4:	3355      	adds	r3, #85	; 0x55
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	f083 0301 	eor.w	r3, r3, #1
 80059dc:	b2d8      	uxtb	r0, r3
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	212c      	movs	r1, #44	; 0x2c
 80059e4:	fb01 f303 	mul.w	r3, r1, r3
 80059e8:	4413      	add	r3, r2
 80059ea:	3355      	adds	r3, #85	; 0x55
 80059ec:	4602      	mov	r2, r0
 80059ee:	701a      	strb	r2, [r3, #0]
 80059f0:	e0d8      	b.n	8005ba4 <HCD_HC_OUT_IRQHandler+0x772>
          }
        }
      }
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	212c      	movs	r1, #44	; 0x2c
 80059f8:	fb01 f303 	mul.w	r3, r1, r3
 80059fc:	4413      	add	r3, r2
 80059fe:	3361      	adds	r3, #97	; 0x61
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b03      	cmp	r3, #3
 8005a04:	d109      	bne.n	8005a1a <HCD_HC_OUT_IRQHandler+0x5e8>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	212c      	movs	r1, #44	; 0x2c
 8005a0c:	fb01 f303 	mul.w	r3, r1, r3
 8005a10:	4413      	add	r3, r2
 8005a12:	3361      	adds	r3, #97	; 0x61
 8005a14:	2202      	movs	r2, #2
 8005a16:	701a      	strb	r2, [r3, #0]
 8005a18:	e0c4      	b.n	8005ba4 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	212c      	movs	r1, #44	; 0x2c
 8005a20:	fb01 f303 	mul.w	r3, r1, r3
 8005a24:	4413      	add	r3, r2
 8005a26:	3361      	adds	r3, #97	; 0x61
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d112      	bne.n	8005a54 <HCD_HC_OUT_IRQHandler+0x622>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	212c      	movs	r1, #44	; 0x2c
 8005a34:	fb01 f303 	mul.w	r3, r1, r3
 8005a38:	4413      	add	r3, r2
 8005a3a:	3361      	adds	r3, #97	; 0x61
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	212c      	movs	r1, #44	; 0x2c
 8005a46:	fb01 f303 	mul.w	r3, r1, r3
 8005a4a:	4413      	add	r3, r2
 8005a4c:	3360      	adds	r3, #96	; 0x60
 8005a4e:	2202      	movs	r2, #2
 8005a50:	701a      	strb	r2, [r3, #0]
 8005a52:	e0a7      	b.n	8005ba4 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	212c      	movs	r1, #44	; 0x2c
 8005a5a:	fb01 f303 	mul.w	r3, r1, r3
 8005a5e:	4413      	add	r3, r2
 8005a60:	3361      	adds	r3, #97	; 0x61
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	2b05      	cmp	r3, #5
 8005a66:	d112      	bne.n	8005a8e <HCD_HC_OUT_IRQHandler+0x65c>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	212c      	movs	r1, #44	; 0x2c
 8005a6e:	fb01 f303 	mul.w	r3, r1, r3
 8005a72:	4413      	add	r3, r2
 8005a74:	3361      	adds	r3, #97	; 0x61
 8005a76:	2202      	movs	r2, #2
 8005a78:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	212c      	movs	r1, #44	; 0x2c
 8005a80:	fb01 f303 	mul.w	r3, r1, r3
 8005a84:	4413      	add	r3, r2
 8005a86:	3360      	adds	r3, #96	; 0x60
 8005a88:	2202      	movs	r2, #2
 8005a8a:	701a      	strb	r2, [r3, #0]
 8005a8c:	e08a      	b.n	8005ba4 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	212c      	movs	r1, #44	; 0x2c
 8005a94:	fb01 f303 	mul.w	r3, r1, r3
 8005a98:	4413      	add	r3, r2
 8005a9a:	3361      	adds	r3, #97	; 0x61
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	2b06      	cmp	r3, #6
 8005aa0:	d112      	bne.n	8005ac8 <HCD_HC_OUT_IRQHandler+0x696>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	212c      	movs	r1, #44	; 0x2c
 8005aa8:	fb01 f303 	mul.w	r3, r1, r3
 8005aac:	4413      	add	r3, r2
 8005aae:	3361      	adds	r3, #97	; 0x61
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	212c      	movs	r1, #44	; 0x2c
 8005aba:	fb01 f303 	mul.w	r3, r1, r3
 8005abe:	4413      	add	r3, r2
 8005ac0:	3360      	adds	r3, #96	; 0x60
 8005ac2:	2205      	movs	r2, #5
 8005ac4:	701a      	strb	r2, [r3, #0]
 8005ac6:	e06d      	b.n	8005ba4 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	212c      	movs	r1, #44	; 0x2c
 8005ace:	fb01 f303 	mul.w	r3, r1, r3
 8005ad2:	4413      	add	r3, r2
 8005ad4:	3361      	adds	r3, #97	; 0x61
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b07      	cmp	r3, #7
 8005ada:	d009      	beq.n	8005af0 <HCD_HC_OUT_IRQHandler+0x6be>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	212c      	movs	r1, #44	; 0x2c
 8005ae2:	fb01 f303 	mul.w	r3, r1, r3
 8005ae6:	4413      	add	r3, r2
 8005ae8:	3361      	adds	r3, #97	; 0x61
 8005aea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005aec:	2b09      	cmp	r3, #9
 8005aee:	d168      	bne.n	8005bc2 <HCD_HC_OUT_IRQHandler+0x790>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	212c      	movs	r1, #44	; 0x2c
 8005af6:	fb01 f303 	mul.w	r3, r1, r3
 8005afa:	4413      	add	r3, r2
 8005afc:	3361      	adds	r3, #97	; 0x61
 8005afe:	2202      	movs	r2, #2
 8005b00:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	212c      	movs	r1, #44	; 0x2c
 8005b08:	fb01 f303 	mul.w	r3, r1, r3
 8005b0c:	4413      	add	r3, r2
 8005b0e:	335c      	adds	r3, #92	; 0x5c
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	1c5a      	adds	r2, r3, #1
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	202c      	movs	r0, #44	; 0x2c
 8005b1a:	fb00 f303 	mul.w	r3, r0, r3
 8005b1e:	440b      	add	r3, r1
 8005b20:	335c      	adds	r3, #92	; 0x5c
 8005b22:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	212c      	movs	r1, #44	; 0x2c
 8005b2a:	fb01 f303 	mul.w	r3, r1, r3
 8005b2e:	4413      	add	r3, r2
 8005b30:	335c      	adds	r3, #92	; 0x5c
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d912      	bls.n	8005b5e <HCD_HC_OUT_IRQHandler+0x72c>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	212c      	movs	r1, #44	; 0x2c
 8005b3e:	fb01 f303 	mul.w	r3, r1, r3
 8005b42:	4413      	add	r3, r2
 8005b44:	335c      	adds	r3, #92	; 0x5c
 8005b46:	2200      	movs	r2, #0
 8005b48:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	212c      	movs	r1, #44	; 0x2c
 8005b50:	fb01 f303 	mul.w	r3, r1, r3
 8005b54:	4413      	add	r3, r2
 8005b56:	3360      	adds	r3, #96	; 0x60
 8005b58:	2204      	movs	r2, #4
 8005b5a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005b5c:	e021      	b.n	8005ba2 <HCD_HC_OUT_IRQHandler+0x770>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	212c      	movs	r1, #44	; 0x2c
 8005b64:	fb01 f303 	mul.w	r3, r1, r3
 8005b68:	4413      	add	r3, r2
 8005b6a:	3360      	adds	r3, #96	; 0x60
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b86:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b8e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005ba2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	b2d9      	uxtb	r1, r3
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	202c      	movs	r0, #44	; 0x2c
 8005bae:	fb00 f303 	mul.w	r3, r0, r3
 8005bb2:	4413      	add	r3, r2
 8005bb4:	3360      	adds	r3, #96	; 0x60
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	461a      	mov	r2, r3
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f00a fc6e 	bl	801049c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005bc0:	e000      	b.n	8005bc4 <HCD_HC_OUT_IRQHandler+0x792>
      return;
 8005bc2:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8005bc4:	3720      	adds	r7, #32
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b08a      	sub	sp, #40	; 0x28
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	f003 030f 	and.w	r3, r3, #15
 8005bea:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	0c5b      	lsrs	r3, r3, #17
 8005bf0:	f003 030f 	and.w	r3, r3, #15
 8005bf4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	091b      	lsrs	r3, r3, #4
 8005bfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bfe:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d004      	beq.n	8005c10 <HCD_RXQLVL_IRQHandler+0x46>
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	2b05      	cmp	r3, #5
 8005c0a:	f000 80a9 	beq.w	8005d60 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005c0e:	e0aa      	b.n	8005d66 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 80a6 	beq.w	8005d64 <HCD_RXQLVL_IRQHandler+0x19a>
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	212c      	movs	r1, #44	; 0x2c
 8005c1e:	fb01 f303 	mul.w	r3, r1, r3
 8005c22:	4413      	add	r3, r2
 8005c24:	3344      	adds	r3, #68	; 0x44
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 809b 	beq.w	8005d64 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	212c      	movs	r1, #44	; 0x2c
 8005c34:	fb01 f303 	mul.w	r3, r1, r3
 8005c38:	4413      	add	r3, r2
 8005c3a:	3350      	adds	r3, #80	; 0x50
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	441a      	add	r2, r3
 8005c42:	6879      	ldr	r1, [r7, #4]
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	202c      	movs	r0, #44	; 0x2c
 8005c48:	fb00 f303 	mul.w	r3, r0, r3
 8005c4c:	440b      	add	r3, r1
 8005c4e:	334c      	adds	r3, #76	; 0x4c
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d87a      	bhi.n	8005d4c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6818      	ldr	r0, [r3, #0]
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	212c      	movs	r1, #44	; 0x2c
 8005c60:	fb01 f303 	mul.w	r3, r1, r3
 8005c64:	4413      	add	r3, r2
 8005c66:	3344      	adds	r3, #68	; 0x44
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	b292      	uxth	r2, r2
 8005c6e:	4619      	mov	r1, r3
 8005c70:	f002 ff80 	bl	8008b74 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	212c      	movs	r1, #44	; 0x2c
 8005c7a:	fb01 f303 	mul.w	r3, r1, r3
 8005c7e:	4413      	add	r3, r2
 8005c80:	3344      	adds	r3, #68	; 0x44
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	441a      	add	r2, r3
 8005c88:	6879      	ldr	r1, [r7, #4]
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	202c      	movs	r0, #44	; 0x2c
 8005c8e:	fb00 f303 	mul.w	r3, r0, r3
 8005c92:	440b      	add	r3, r1
 8005c94:	3344      	adds	r3, #68	; 0x44
 8005c96:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	212c      	movs	r1, #44	; 0x2c
 8005c9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ca2:	4413      	add	r3, r2
 8005ca4:	3350      	adds	r3, #80	; 0x50
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	441a      	add	r2, r3
 8005cac:	6879      	ldr	r1, [r7, #4]
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	202c      	movs	r0, #44	; 0x2c
 8005cb2:	fb00 f303 	mul.w	r3, r0, r3
 8005cb6:	440b      	add	r3, r1
 8005cb8:	3350      	adds	r3, #80	; 0x50
 8005cba:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	0cdb      	lsrs	r3, r3, #19
 8005ccc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cd0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	212c      	movs	r1, #44	; 0x2c
 8005cd8:	fb01 f303 	mul.w	r3, r1, r3
 8005cdc:	4413      	add	r3, r2
 8005cde:	3340      	adds	r3, #64	; 0x40
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d13c      	bne.n	8005d64 <HCD_RXQLVL_IRQHandler+0x19a>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d039      	beq.n	8005d64 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	6a3b      	ldr	r3, [r7, #32]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d06:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d0e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	6a3b      	ldr	r3, [r7, #32]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	212c      	movs	r1, #44	; 0x2c
 8005d28:	fb01 f303 	mul.w	r3, r1, r3
 8005d2c:	4413      	add	r3, r2
 8005d2e:	3354      	adds	r3, #84	; 0x54
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	f083 0301 	eor.w	r3, r3, #1
 8005d36:	b2d8      	uxtb	r0, r3
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	212c      	movs	r1, #44	; 0x2c
 8005d3e:	fb01 f303 	mul.w	r3, r1, r3
 8005d42:	4413      	add	r3, r2
 8005d44:	3354      	adds	r3, #84	; 0x54
 8005d46:	4602      	mov	r2, r0
 8005d48:	701a      	strb	r2, [r3, #0]
      break;
 8005d4a:	e00b      	b.n	8005d64 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	212c      	movs	r1, #44	; 0x2c
 8005d52:	fb01 f303 	mul.w	r3, r1, r3
 8005d56:	4413      	add	r3, r2
 8005d58:	3360      	adds	r3, #96	; 0x60
 8005d5a:	2204      	movs	r2, #4
 8005d5c:	701a      	strb	r2, [r3, #0]
      break;
 8005d5e:	e001      	b.n	8005d64 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005d60:	bf00      	nop
 8005d62:	e000      	b.n	8005d66 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005d64:	bf00      	nop
  }
}
 8005d66:	bf00      	nop
 8005d68:	3728      	adds	r7, #40	; 0x28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b086      	sub	sp, #24
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005d9a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d10b      	bne.n	8005dbe <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d102      	bne.n	8005db6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f00a fb57 	bl	8010464 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	f043 0302 	orr.w	r3, r3, #2
 8005dbc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f003 0308 	and.w	r3, r3, #8
 8005dc4:	2b08      	cmp	r3, #8
 8005dc6:	d132      	bne.n	8005e2e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	f043 0308 	orr.w	r3, r3, #8
 8005dce:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f003 0304 	and.w	r3, r3, #4
 8005dd6:	2b04      	cmp	r3, #4
 8005dd8:	d126      	bne.n	8005e28 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d113      	bne.n	8005e0a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005de8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005dec:	d106      	bne.n	8005dfc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2102      	movs	r1, #2
 8005df4:	4618      	mov	r0, r3
 8005df6:	f003 f83f 	bl	8008e78 <USB_InitFSLSPClkSel>
 8005dfa:	e011      	b.n	8005e20 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2101      	movs	r1, #1
 8005e02:	4618      	mov	r0, r3
 8005e04:	f003 f838 	bl	8008e78 <USB_InitFSLSPClkSel>
 8005e08:	e00a      	b.n	8005e20 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d106      	bne.n	8005e20 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e18:	461a      	mov	r2, r3
 8005e1a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005e1e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f00a fb49 	bl	80104b8 <HAL_HCD_PortEnabled_Callback>
 8005e26:	e002      	b.n	8005e2e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f00a fb53 	bl	80104d4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f003 0320 	and.w	r3, r3, #32
 8005e34:	2b20      	cmp	r3, #32
 8005e36:	d103      	bne.n	8005e40 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	f043 0320 	orr.w	r3, r3, #32
 8005e3e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e46:	461a      	mov	r2, r3
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	6013      	str	r3, [r2, #0]
}
 8005e4c:	bf00      	nop
 8005e4e:	3718      	adds	r7, #24
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e07f      	b.n	8005f66 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d106      	bne.n	8005e80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7fa fcbc 	bl	80007f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2224      	movs	r2, #36	; 0x24
 8005e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 0201 	bic.w	r2, r2, #1
 8005e96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005ea4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689a      	ldr	r2, [r3, #8]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005eb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d107      	bne.n	8005ece <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	689a      	ldr	r2, [r3, #8]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005eca:	609a      	str	r2, [r3, #8]
 8005ecc:	e006      	b.n	8005edc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689a      	ldr	r2, [r3, #8]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005eda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d104      	bne.n	8005eee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005eec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6859      	ldr	r1, [r3, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	4b1d      	ldr	r3, [pc, #116]	; (8005f70 <HAL_I2C_Init+0x11c>)
 8005efa:	430b      	orrs	r3, r1
 8005efc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68da      	ldr	r2, [r3, #12]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	691a      	ldr	r2, [r3, #16]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	430a      	orrs	r2, r1
 8005f26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	69d9      	ldr	r1, [r3, #28]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a1a      	ldr	r2, [r3, #32]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	430a      	orrs	r2, r1
 8005f36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f042 0201 	orr.w	r2, r2, #1
 8005f46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2220      	movs	r2, #32
 8005f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	02008000 	.word	0x02008000

08005f74 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e021      	b.n	8005fca <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2224      	movs	r2, #36	; 0x24
 8005f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0201 	bic.w	r2, r2, #1
 8005f9c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fa fc8a 	bl	80008b8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
	...

08005fd4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b088      	sub	sp, #32
 8005fd8:	af02      	add	r7, sp, #8
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	4608      	mov	r0, r1
 8005fde:	4611      	mov	r1, r2
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	817b      	strh	r3, [r7, #10]
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	813b      	strh	r3, [r7, #8]
 8005fea:	4613      	mov	r3, r2
 8005fec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b20      	cmp	r3, #32
 8005ff8:	f040 80f9 	bne.w	80061ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d002      	beq.n	8006008 <HAL_I2C_Mem_Write+0x34>
 8006002:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006004:	2b00      	cmp	r3, #0
 8006006:	d105      	bne.n	8006014 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800600e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e0ed      	b.n	80061f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800601a:	2b01      	cmp	r3, #1
 800601c:	d101      	bne.n	8006022 <HAL_I2C_Mem_Write+0x4e>
 800601e:	2302      	movs	r3, #2
 8006020:	e0e6      	b.n	80061f0 <HAL_I2C_Mem_Write+0x21c>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800602a:	f7fd f95b 	bl	80032e4 <HAL_GetTick>
 800602e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	2319      	movs	r3, #25
 8006036:	2201      	movs	r2, #1
 8006038:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 fad1 	bl	80065e4 <I2C_WaitOnFlagUntilTimeout>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d001      	beq.n	800604c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e0d1      	b.n	80061f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2221      	movs	r2, #33	; 0x21
 8006050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2240      	movs	r2, #64	; 0x40
 8006058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6a3a      	ldr	r2, [r7, #32]
 8006066:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800606c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006074:	88f8      	ldrh	r0, [r7, #6]
 8006076:	893a      	ldrh	r2, [r7, #8]
 8006078:	8979      	ldrh	r1, [r7, #10]
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	9301      	str	r3, [sp, #4]
 800607e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	4603      	mov	r3, r0
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 f9e1 	bl	800644c <I2C_RequestMemoryWrite>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d005      	beq.n	800609c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e0a9      	b.n	80061f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	2bff      	cmp	r3, #255	; 0xff
 80060a4:	d90e      	bls.n	80060c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	22ff      	movs	r2, #255	; 0xff
 80060aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b0:	b2da      	uxtb	r2, r3
 80060b2:	8979      	ldrh	r1, [r7, #10]
 80060b4:	2300      	movs	r3, #0
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f000 fc2d 	bl	800691c <I2C_TransferConfig>
 80060c2:	e00f      	b.n	80060e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	8979      	ldrh	r1, [r7, #10]
 80060d6:	2300      	movs	r3, #0
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f000 fc1c 	bl	800691c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f000 fabb 	bl	8006664 <I2C_WaitOnTXISFlagUntilTimeout>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d001      	beq.n	80060f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e07b      	b.n	80061f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	781a      	ldrb	r2, [r3, #0]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006112:	b29b      	uxth	r3, r3
 8006114:	3b01      	subs	r3, #1
 8006116:	b29a      	uxth	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006120:	3b01      	subs	r3, #1
 8006122:	b29a      	uxth	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800612c:	b29b      	uxth	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d034      	beq.n	800619c <HAL_I2C_Mem_Write+0x1c8>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006136:	2b00      	cmp	r3, #0
 8006138:	d130      	bne.n	800619c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006140:	2200      	movs	r2, #0
 8006142:	2180      	movs	r1, #128	; 0x80
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 fa4d 	bl	80065e4 <I2C_WaitOnFlagUntilTimeout>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e04d      	b.n	80061f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006158:	b29b      	uxth	r3, r3
 800615a:	2bff      	cmp	r3, #255	; 0xff
 800615c:	d90e      	bls.n	800617c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	22ff      	movs	r2, #255	; 0xff
 8006162:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006168:	b2da      	uxtb	r2, r3
 800616a:	8979      	ldrh	r1, [r7, #10]
 800616c:	2300      	movs	r3, #0
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f000 fbd1 	bl	800691c <I2C_TransferConfig>
 800617a:	e00f      	b.n	800619c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006180:	b29a      	uxth	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800618a:	b2da      	uxtb	r2, r3
 800618c:	8979      	ldrh	r1, [r7, #10]
 800618e:	2300      	movs	r3, #0
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 fbc0 	bl	800691c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d19e      	bne.n	80060e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 fa9a 	bl	80066e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e01a      	b.n	80061f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2220      	movs	r2, #32
 80061c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6859      	ldr	r1, [r3, #4]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	4b0a      	ldr	r3, [pc, #40]	; (80061f8 <HAL_I2C_Mem_Write+0x224>)
 80061ce:	400b      	ands	r3, r1
 80061d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2220      	movs	r2, #32
 80061d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	e000      	b.n	80061f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80061ee:	2302      	movs	r3, #2
  }
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3718      	adds	r7, #24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	fe00e800 	.word	0xfe00e800

080061fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b088      	sub	sp, #32
 8006200:	af02      	add	r7, sp, #8
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	4608      	mov	r0, r1
 8006206:	4611      	mov	r1, r2
 8006208:	461a      	mov	r2, r3
 800620a:	4603      	mov	r3, r0
 800620c:	817b      	strh	r3, [r7, #10]
 800620e:	460b      	mov	r3, r1
 8006210:	813b      	strh	r3, [r7, #8]
 8006212:	4613      	mov	r3, r2
 8006214:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b20      	cmp	r3, #32
 8006220:	f040 80fd 	bne.w	800641e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d002      	beq.n	8006230 <HAL_I2C_Mem_Read+0x34>
 800622a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800622c:	2b00      	cmp	r3, #0
 800622e:	d105      	bne.n	800623c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006236:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e0f1      	b.n	8006420 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006242:	2b01      	cmp	r3, #1
 8006244:	d101      	bne.n	800624a <HAL_I2C_Mem_Read+0x4e>
 8006246:	2302      	movs	r3, #2
 8006248:	e0ea      	b.n	8006420 <HAL_I2C_Mem_Read+0x224>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006252:	f7fd f847 	bl	80032e4 <HAL_GetTick>
 8006256:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	2319      	movs	r3, #25
 800625e:	2201      	movs	r2, #1
 8006260:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 f9bd 	bl	80065e4 <I2C_WaitOnFlagUntilTimeout>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e0d5      	b.n	8006420 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2222      	movs	r2, #34	; 0x22
 8006278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2240      	movs	r2, #64	; 0x40
 8006280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6a3a      	ldr	r2, [r7, #32]
 800628e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006294:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800629c:	88f8      	ldrh	r0, [r7, #6]
 800629e:	893a      	ldrh	r2, [r7, #8]
 80062a0:	8979      	ldrh	r1, [r7, #10]
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	9301      	str	r3, [sp, #4]
 80062a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	4603      	mov	r3, r0
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 f921 	bl	80064f4 <I2C_RequestMemoryRead>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d005      	beq.n	80062c4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e0ad      	b.n	8006420 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	2bff      	cmp	r3, #255	; 0xff
 80062cc:	d90e      	bls.n	80062ec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	22ff      	movs	r2, #255	; 0xff
 80062d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	8979      	ldrh	r1, [r7, #10]
 80062dc:	4b52      	ldr	r3, [pc, #328]	; (8006428 <HAL_I2C_Mem_Read+0x22c>)
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f000 fb19 	bl	800691c <I2C_TransferConfig>
 80062ea:	e00f      	b.n	800630c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	8979      	ldrh	r1, [r7, #10]
 80062fe:	4b4a      	ldr	r3, [pc, #296]	; (8006428 <HAL_I2C_Mem_Read+0x22c>)
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 fb08 	bl	800691c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006312:	2200      	movs	r2, #0
 8006314:	2104      	movs	r1, #4
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f000 f964 	bl	80065e4 <I2C_WaitOnFlagUntilTimeout>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d001      	beq.n	8006326 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e07c      	b.n	8006420 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	b2d2      	uxtb	r2, r2
 8006332:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006342:	3b01      	subs	r3, #1
 8006344:	b29a      	uxth	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800634e:	b29b      	uxth	r3, r3
 8006350:	3b01      	subs	r3, #1
 8006352:	b29a      	uxth	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800635c:	b29b      	uxth	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d034      	beq.n	80063cc <HAL_I2C_Mem_Read+0x1d0>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006366:	2b00      	cmp	r3, #0
 8006368:	d130      	bne.n	80063cc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006370:	2200      	movs	r2, #0
 8006372:	2180      	movs	r1, #128	; 0x80
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 f935 	bl	80065e4 <I2C_WaitOnFlagUntilTimeout>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e04d      	b.n	8006420 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006388:	b29b      	uxth	r3, r3
 800638a:	2bff      	cmp	r3, #255	; 0xff
 800638c:	d90e      	bls.n	80063ac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	22ff      	movs	r2, #255	; 0xff
 8006392:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006398:	b2da      	uxtb	r2, r3
 800639a:	8979      	ldrh	r1, [r7, #10]
 800639c:	2300      	movs	r3, #0
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f000 fab9 	bl	800691c <I2C_TransferConfig>
 80063aa:	e00f      	b.n	80063cc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	8979      	ldrh	r1, [r7, #10]
 80063be:	2300      	movs	r3, #0
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 faa8 	bl	800691c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d19a      	bne.n	800630c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f000 f982 	bl	80066e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e01a      	b.n	8006420 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2220      	movs	r2, #32
 80063f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6859      	ldr	r1, [r3, #4]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	4b0b      	ldr	r3, [pc, #44]	; (800642c <HAL_I2C_Mem_Read+0x230>)
 80063fe:	400b      	ands	r3, r1
 8006400:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2220      	movs	r2, #32
 8006406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800641a:	2300      	movs	r3, #0
 800641c:	e000      	b.n	8006420 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800641e:	2302      	movs	r3, #2
  }
}
 8006420:	4618      	mov	r0, r3
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	80002400 	.word	0x80002400
 800642c:	fe00e800 	.word	0xfe00e800

08006430 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800643e:	b2db      	uxtb	r3, r3
}
 8006440:	4618      	mov	r0, r3
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af02      	add	r7, sp, #8
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	4608      	mov	r0, r1
 8006456:	4611      	mov	r1, r2
 8006458:	461a      	mov	r2, r3
 800645a:	4603      	mov	r3, r0
 800645c:	817b      	strh	r3, [r7, #10]
 800645e:	460b      	mov	r3, r1
 8006460:	813b      	strh	r3, [r7, #8]
 8006462:	4613      	mov	r3, r2
 8006464:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006466:	88fb      	ldrh	r3, [r7, #6]
 8006468:	b2da      	uxtb	r2, r3
 800646a:	8979      	ldrh	r1, [r7, #10]
 800646c:	4b20      	ldr	r3, [pc, #128]	; (80064f0 <I2C_RequestMemoryWrite+0xa4>)
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f000 fa51 	bl	800691c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800647a:	69fa      	ldr	r2, [r7, #28]
 800647c:	69b9      	ldr	r1, [r7, #24]
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f000 f8f0 	bl	8006664 <I2C_WaitOnTXISFlagUntilTimeout>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e02c      	b.n	80064e8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800648e:	88fb      	ldrh	r3, [r7, #6]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d105      	bne.n	80064a0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006494:	893b      	ldrh	r3, [r7, #8]
 8006496:	b2da      	uxtb	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	629a      	str	r2, [r3, #40]	; 0x28
 800649e:	e015      	b.n	80064cc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80064a0:	893b      	ldrh	r3, [r7, #8]
 80064a2:	0a1b      	lsrs	r3, r3, #8
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064ae:	69fa      	ldr	r2, [r7, #28]
 80064b0:	69b9      	ldr	r1, [r7, #24]
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 f8d6 	bl	8006664 <I2C_WaitOnTXISFlagUntilTimeout>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e012      	b.n	80064e8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064c2:	893b      	ldrh	r3, [r7, #8]
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	2200      	movs	r2, #0
 80064d4:	2180      	movs	r1, #128	; 0x80
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f000 f884 	bl	80065e4 <I2C_WaitOnFlagUntilTimeout>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e000      	b.n	80064e8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	80002000 	.word	0x80002000

080064f4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af02      	add	r7, sp, #8
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	4608      	mov	r0, r1
 80064fe:	4611      	mov	r1, r2
 8006500:	461a      	mov	r2, r3
 8006502:	4603      	mov	r3, r0
 8006504:	817b      	strh	r3, [r7, #10]
 8006506:	460b      	mov	r3, r1
 8006508:	813b      	strh	r3, [r7, #8]
 800650a:	4613      	mov	r3, r2
 800650c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800650e:	88fb      	ldrh	r3, [r7, #6]
 8006510:	b2da      	uxtb	r2, r3
 8006512:	8979      	ldrh	r1, [r7, #10]
 8006514:	4b20      	ldr	r3, [pc, #128]	; (8006598 <I2C_RequestMemoryRead+0xa4>)
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	2300      	movs	r3, #0
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f000 f9fe 	bl	800691c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006520:	69fa      	ldr	r2, [r7, #28]
 8006522:	69b9      	ldr	r1, [r7, #24]
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 f89d 	bl	8006664 <I2C_WaitOnTXISFlagUntilTimeout>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e02c      	b.n	800658e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006534:	88fb      	ldrh	r3, [r7, #6]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d105      	bne.n	8006546 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800653a:	893b      	ldrh	r3, [r7, #8]
 800653c:	b2da      	uxtb	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	629a      	str	r2, [r3, #40]	; 0x28
 8006544:	e015      	b.n	8006572 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006546:	893b      	ldrh	r3, [r7, #8]
 8006548:	0a1b      	lsrs	r3, r3, #8
 800654a:	b29b      	uxth	r3, r3
 800654c:	b2da      	uxtb	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006554:	69fa      	ldr	r2, [r7, #28]
 8006556:	69b9      	ldr	r1, [r7, #24]
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f000 f883 	bl	8006664 <I2C_WaitOnTXISFlagUntilTimeout>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e012      	b.n	800658e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006568:	893b      	ldrh	r3, [r7, #8]
 800656a:	b2da      	uxtb	r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	2200      	movs	r2, #0
 800657a:	2140      	movs	r1, #64	; 0x40
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 f831 	bl	80065e4 <I2C_WaitOnFlagUntilTimeout>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e000      	b.n	800658e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	80002000 	.word	0x80002000

0800659c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d103      	bne.n	80065ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2200      	movs	r2, #0
 80065b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d007      	beq.n	80065d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	699a      	ldr	r2, [r3, #24]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f042 0201 	orr.w	r2, r2, #1
 80065d6:	619a      	str	r2, [r3, #24]
  }
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	603b      	str	r3, [r7, #0]
 80065f0:	4613      	mov	r3, r2
 80065f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065f4:	e022      	b.n	800663c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fc:	d01e      	beq.n	800663c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065fe:	f7fc fe71 	bl	80032e4 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	429a      	cmp	r2, r3
 800660c:	d302      	bcc.n	8006614 <I2C_WaitOnFlagUntilTimeout+0x30>
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d113      	bne.n	800663c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006618:	f043 0220 	orr.w	r2, r3, #32
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2220      	movs	r2, #32
 8006624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e00f      	b.n	800665c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	699a      	ldr	r2, [r3, #24]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	4013      	ands	r3, r2
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	429a      	cmp	r2, r3
 800664a:	bf0c      	ite	eq
 800664c:	2301      	moveq	r3, #1
 800664e:	2300      	movne	r3, #0
 8006650:	b2db      	uxtb	r3, r3
 8006652:	461a      	mov	r2, r3
 8006654:	79fb      	ldrb	r3, [r7, #7]
 8006656:	429a      	cmp	r2, r3
 8006658:	d0cd      	beq.n	80065f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006670:	e02c      	b.n	80066cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	68b9      	ldr	r1, [r7, #8]
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 f870 	bl	800675c <I2C_IsErrorOccurred>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e02a      	b.n	80066dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668c:	d01e      	beq.n	80066cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800668e:	f7fc fe29 	bl	80032e4 <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	429a      	cmp	r2, r3
 800669c:	d302      	bcc.n	80066a4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d113      	bne.n	80066cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a8:	f043 0220 	orr.w	r2, r3, #32
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e007      	b.n	80066dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d1cb      	bne.n	8006672 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066f0:	e028      	b.n	8006744 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	68b9      	ldr	r1, [r7, #8]
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f000 f830 	bl	800675c <I2C_IsErrorOccurred>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e026      	b.n	8006754 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006706:	f7fc fded 	bl	80032e4 <HAL_GetTick>
 800670a:	4602      	mov	r2, r0
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	429a      	cmp	r2, r3
 8006714:	d302      	bcc.n	800671c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d113      	bne.n	8006744 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006720:	f043 0220 	orr.w	r2, r3, #32
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2220      	movs	r2, #32
 800672c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e007      	b.n	8006754 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	f003 0320 	and.w	r3, r3, #32
 800674e:	2b20      	cmp	r3, #32
 8006750:	d1cf      	bne.n	80066f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b08a      	sub	sp, #40	; 0x28
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006768:	2300      	movs	r3, #0
 800676a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006776:	2300      	movs	r3, #0
 8006778:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	f003 0310 	and.w	r3, r3, #16
 8006784:	2b00      	cmp	r3, #0
 8006786:	d068      	beq.n	800685a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2210      	movs	r2, #16
 800678e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006790:	e049      	b.n	8006826 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006798:	d045      	beq.n	8006826 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800679a:	f7fc fda3 	bl	80032e4 <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	68ba      	ldr	r2, [r7, #8]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d302      	bcc.n	80067b0 <I2C_IsErrorOccurred+0x54>
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d13a      	bne.n	8006826 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067d2:	d121      	bne.n	8006818 <I2C_IsErrorOccurred+0xbc>
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067da:	d01d      	beq.n	8006818 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80067dc:	7cfb      	ldrb	r3, [r7, #19]
 80067de:	2b20      	cmp	r3, #32
 80067e0:	d01a      	beq.n	8006818 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	685a      	ldr	r2, [r3, #4]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067f0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80067f2:	f7fc fd77 	bl	80032e4 <HAL_GetTick>
 80067f6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067f8:	e00e      	b.n	8006818 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80067fa:	f7fc fd73 	bl	80032e4 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	2b19      	cmp	r3, #25
 8006806:	d907      	bls.n	8006818 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006808:	6a3b      	ldr	r3, [r7, #32]
 800680a:	f043 0320 	orr.w	r3, r3, #32
 800680e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006816:	e006      	b.n	8006826 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	f003 0320 	and.w	r3, r3, #32
 8006822:	2b20      	cmp	r3, #32
 8006824:	d1e9      	bne.n	80067fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	699b      	ldr	r3, [r3, #24]
 800682c:	f003 0320 	and.w	r3, r3, #32
 8006830:	2b20      	cmp	r3, #32
 8006832:	d003      	beq.n	800683c <I2C_IsErrorOccurred+0xe0>
 8006834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006838:	2b00      	cmp	r3, #0
 800683a:	d0aa      	beq.n	8006792 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800683c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006840:	2b00      	cmp	r3, #0
 8006842:	d103      	bne.n	800684c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2220      	movs	r2, #32
 800684a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	f043 0304 	orr.w	r3, r3, #4
 8006852:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00b      	beq.n	8006884 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800686c:	6a3b      	ldr	r3, [r7, #32]
 800686e:	f043 0301 	orr.w	r3, r3, #1
 8006872:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f44f 7280 	mov.w	r2, #256	; 0x100
 800687c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00b      	beq.n	80068a6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	f043 0308 	orr.w	r3, r3, #8
 8006894:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800689e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00b      	beq.n	80068c8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	f043 0302 	orr.w	r3, r3, #2
 80068b6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80068c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d01c      	beq.n	800690a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f7ff fe63 	bl	800659c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6859      	ldr	r1, [r3, #4]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	4b0d      	ldr	r3, [pc, #52]	; (8006918 <I2C_IsErrorOccurred+0x1bc>)
 80068e2:	400b      	ands	r3, r1
 80068e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	431a      	orrs	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2220      	movs	r2, #32
 80068f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800690a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800690e:	4618      	mov	r0, r3
 8006910:	3728      	adds	r7, #40	; 0x28
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	fe00e800 	.word	0xfe00e800

0800691c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800691c:	b480      	push	{r7}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	607b      	str	r3, [r7, #4]
 8006926:	460b      	mov	r3, r1
 8006928:	817b      	strh	r3, [r7, #10]
 800692a:	4613      	mov	r3, r2
 800692c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800692e:	897b      	ldrh	r3, [r7, #10]
 8006930:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006934:	7a7b      	ldrb	r3, [r7, #9]
 8006936:	041b      	lsls	r3, r3, #16
 8006938:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800693c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	4313      	orrs	r3, r2
 8006946:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800694a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	0d5b      	lsrs	r3, r3, #21
 8006956:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800695a:	4b08      	ldr	r3, [pc, #32]	; (800697c <I2C_TransferConfig+0x60>)
 800695c:	430b      	orrs	r3, r1
 800695e:	43db      	mvns	r3, r3
 8006960:	ea02 0103 	and.w	r1, r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	430a      	orrs	r2, r1
 800696c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800696e:	bf00      	nop
 8006970:	371c      	adds	r7, #28
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	03ff63ff 	.word	0x03ff63ff

08006980 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006990:	b2db      	uxtb	r3, r3
 8006992:	2b20      	cmp	r3, #32
 8006994:	d138      	bne.n	8006a08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800699c:	2b01      	cmp	r3, #1
 800699e:	d101      	bne.n	80069a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80069a0:	2302      	movs	r3, #2
 80069a2:	e032      	b.n	8006a0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2224      	movs	r2, #36	; 0x24
 80069b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f022 0201 	bic.w	r2, r2, #1
 80069c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80069d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6819      	ldr	r1, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	430a      	orrs	r2, r1
 80069e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f042 0201 	orr.w	r2, r2, #1
 80069f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2220      	movs	r2, #32
 80069f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006a04:	2300      	movs	r3, #0
 8006a06:	e000      	b.n	8006a0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006a08:	2302      	movs	r3, #2
  }
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b085      	sub	sp, #20
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
 8006a1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b20      	cmp	r3, #32
 8006a2a:	d139      	bne.n	8006aa0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d101      	bne.n	8006a3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006a36:	2302      	movs	r3, #2
 8006a38:	e033      	b.n	8006aa2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2224      	movs	r2, #36	; 0x24
 8006a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f022 0201 	bic.w	r2, r2, #1
 8006a58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006a68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	021b      	lsls	r3, r3, #8
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f042 0201 	orr.w	r2, r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	e000      	b.n	8006aa2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006aa0:	2302      	movs	r3, #2
  }
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
	...

08006ab0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006aba:	4b23      	ldr	r3, [pc, #140]	; (8006b48 <HAL_PWREx_EnableOverDrive+0x98>)
 8006abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abe:	4a22      	ldr	r2, [pc, #136]	; (8006b48 <HAL_PWREx_EnableOverDrive+0x98>)
 8006ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8006ac6:	4b20      	ldr	r3, [pc, #128]	; (8006b48 <HAL_PWREx_EnableOverDrive+0x98>)
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ace:	603b      	str	r3, [r7, #0]
 8006ad0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006ad2:	4b1e      	ldr	r3, [pc, #120]	; (8006b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a1d      	ldr	r2, [pc, #116]	; (8006b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006adc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ade:	f7fc fc01 	bl	80032e4 <HAL_GetTick>
 8006ae2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006ae4:	e009      	b.n	8006afa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006ae6:	f7fc fbfd 	bl	80032e4 <HAL_GetTick>
 8006aea:	4602      	mov	r2, r0
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006af4:	d901      	bls.n	8006afa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e022      	b.n	8006b40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006afa:	4b14      	ldr	r3, [pc, #80]	; (8006b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b06:	d1ee      	bne.n	8006ae6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006b08:	4b10      	ldr	r3, [pc, #64]	; (8006b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a0f      	ldr	r2, [pc, #60]	; (8006b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b12:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b14:	f7fc fbe6 	bl	80032e4 <HAL_GetTick>
 8006b18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006b1a:	e009      	b.n	8006b30 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006b1c:	f7fc fbe2 	bl	80032e4 <HAL_GetTick>
 8006b20:	4602      	mov	r2, r0
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b2a:	d901      	bls.n	8006b30 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e007      	b.n	8006b40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006b30:	4b06      	ldr	r3, [pc, #24]	; (8006b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b3c:	d1ee      	bne.n	8006b1c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3708      	adds	r7, #8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	40023800 	.word	0x40023800
 8006b4c:	40007000 	.word	0x40007000

08006b50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e291      	b.n	800708a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f000 8087 	beq.w	8006c82 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b74:	4b96      	ldr	r3, [pc, #600]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f003 030c 	and.w	r3, r3, #12
 8006b7c:	2b04      	cmp	r3, #4
 8006b7e:	d00c      	beq.n	8006b9a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b80:	4b93      	ldr	r3, [pc, #588]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f003 030c 	and.w	r3, r3, #12
 8006b88:	2b08      	cmp	r3, #8
 8006b8a:	d112      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x62>
 8006b8c:	4b90      	ldr	r3, [pc, #576]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b98:	d10b      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b9a:	4b8d      	ldr	r3, [pc, #564]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d06c      	beq.n	8006c80 <HAL_RCC_OscConfig+0x130>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d168      	bne.n	8006c80 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e26b      	b.n	800708a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bba:	d106      	bne.n	8006bca <HAL_RCC_OscConfig+0x7a>
 8006bbc:	4b84      	ldr	r3, [pc, #528]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a83      	ldr	r2, [pc, #524]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bc6:	6013      	str	r3, [r2, #0]
 8006bc8:	e02e      	b.n	8006c28 <HAL_RCC_OscConfig+0xd8>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10c      	bne.n	8006bec <HAL_RCC_OscConfig+0x9c>
 8006bd2:	4b7f      	ldr	r3, [pc, #508]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a7e      	ldr	r2, [pc, #504]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bdc:	6013      	str	r3, [r2, #0]
 8006bde:	4b7c      	ldr	r3, [pc, #496]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a7b      	ldr	r2, [pc, #492]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006be4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006be8:	6013      	str	r3, [r2, #0]
 8006bea:	e01d      	b.n	8006c28 <HAL_RCC_OscConfig+0xd8>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bf4:	d10c      	bne.n	8006c10 <HAL_RCC_OscConfig+0xc0>
 8006bf6:	4b76      	ldr	r3, [pc, #472]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a75      	ldr	r2, [pc, #468]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c00:	6013      	str	r3, [r2, #0]
 8006c02:	4b73      	ldr	r3, [pc, #460]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a72      	ldr	r2, [pc, #456]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c0c:	6013      	str	r3, [r2, #0]
 8006c0e:	e00b      	b.n	8006c28 <HAL_RCC_OscConfig+0xd8>
 8006c10:	4b6f      	ldr	r3, [pc, #444]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a6e      	ldr	r2, [pc, #440]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c1a:	6013      	str	r3, [r2, #0]
 8006c1c:	4b6c      	ldr	r3, [pc, #432]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a6b      	ldr	r2, [pc, #428]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d013      	beq.n	8006c58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c30:	f7fc fb58 	bl	80032e4 <HAL_GetTick>
 8006c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c36:	e008      	b.n	8006c4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c38:	f7fc fb54 	bl	80032e4 <HAL_GetTick>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	2b64      	cmp	r3, #100	; 0x64
 8006c44:	d901      	bls.n	8006c4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e21f      	b.n	800708a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c4a:	4b61      	ldr	r3, [pc, #388]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d0f0      	beq.n	8006c38 <HAL_RCC_OscConfig+0xe8>
 8006c56:	e014      	b.n	8006c82 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c58:	f7fc fb44 	bl	80032e4 <HAL_GetTick>
 8006c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c5e:	e008      	b.n	8006c72 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c60:	f7fc fb40 	bl	80032e4 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	2b64      	cmp	r3, #100	; 0x64
 8006c6c:	d901      	bls.n	8006c72 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e20b      	b.n	800708a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c72:	4b57      	ldr	r3, [pc, #348]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1f0      	bne.n	8006c60 <HAL_RCC_OscConfig+0x110>
 8006c7e:	e000      	b.n	8006c82 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0302 	and.w	r3, r3, #2
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d069      	beq.n	8006d62 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c8e:	4b50      	ldr	r3, [pc, #320]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f003 030c 	and.w	r3, r3, #12
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00b      	beq.n	8006cb2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c9a:	4b4d      	ldr	r3, [pc, #308]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f003 030c 	and.w	r3, r3, #12
 8006ca2:	2b08      	cmp	r3, #8
 8006ca4:	d11c      	bne.n	8006ce0 <HAL_RCC_OscConfig+0x190>
 8006ca6:	4b4a      	ldr	r3, [pc, #296]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d116      	bne.n	8006ce0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cb2:	4b47      	ldr	r3, [pc, #284]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0302 	and.w	r3, r3, #2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d005      	beq.n	8006cca <HAL_RCC_OscConfig+0x17a>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d001      	beq.n	8006cca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e1df      	b.n	800708a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cca:	4b41      	ldr	r3, [pc, #260]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	00db      	lsls	r3, r3, #3
 8006cd8:	493d      	ldr	r1, [pc, #244]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cde:	e040      	b.n	8006d62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d023      	beq.n	8006d30 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ce8:	4b39      	ldr	r3, [pc, #228]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a38      	ldr	r2, [pc, #224]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006cee:	f043 0301 	orr.w	r3, r3, #1
 8006cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf4:	f7fc faf6 	bl	80032e4 <HAL_GetTick>
 8006cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cfa:	e008      	b.n	8006d0e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cfc:	f7fc faf2 	bl	80032e4 <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d901      	bls.n	8006d0e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e1bd      	b.n	800708a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d0e:	4b30      	ldr	r3, [pc, #192]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0302 	and.w	r3, r3, #2
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d0f0      	beq.n	8006cfc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d1a:	4b2d      	ldr	r3, [pc, #180]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	00db      	lsls	r3, r3, #3
 8006d28:	4929      	ldr	r1, [pc, #164]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	600b      	str	r3, [r1, #0]
 8006d2e:	e018      	b.n	8006d62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d30:	4b27      	ldr	r3, [pc, #156]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a26      	ldr	r2, [pc, #152]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006d36:	f023 0301 	bic.w	r3, r3, #1
 8006d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d3c:	f7fc fad2 	bl	80032e4 <HAL_GetTick>
 8006d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d42:	e008      	b.n	8006d56 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d44:	f7fc face 	bl	80032e4 <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d901      	bls.n	8006d56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e199      	b.n	800708a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d56:	4b1e      	ldr	r3, [pc, #120]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1f0      	bne.n	8006d44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0308 	and.w	r3, r3, #8
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d038      	beq.n	8006de0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d019      	beq.n	8006daa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d76:	4b16      	ldr	r3, [pc, #88]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d7a:	4a15      	ldr	r2, [pc, #84]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006d7c:	f043 0301 	orr.w	r3, r3, #1
 8006d80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d82:	f7fc faaf 	bl	80032e4 <HAL_GetTick>
 8006d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d88:	e008      	b.n	8006d9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d8a:	f7fc faab 	bl	80032e4 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d901      	bls.n	8006d9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e176      	b.n	800708a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d9c:	4b0c      	ldr	r3, [pc, #48]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006da0:	f003 0302 	and.w	r3, r3, #2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d0f0      	beq.n	8006d8a <HAL_RCC_OscConfig+0x23a>
 8006da8:	e01a      	b.n	8006de0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006daa:	4b09      	ldr	r3, [pc, #36]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dae:	4a08      	ldr	r2, [pc, #32]	; (8006dd0 <HAL_RCC_OscConfig+0x280>)
 8006db0:	f023 0301 	bic.w	r3, r3, #1
 8006db4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006db6:	f7fc fa95 	bl	80032e4 <HAL_GetTick>
 8006dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dbc:	e00a      	b.n	8006dd4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dbe:	f7fc fa91 	bl	80032e4 <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d903      	bls.n	8006dd4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e15c      	b.n	800708a <HAL_RCC_OscConfig+0x53a>
 8006dd0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dd4:	4b91      	ldr	r3, [pc, #580]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dd8:	f003 0302 	and.w	r3, r3, #2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1ee      	bne.n	8006dbe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0304 	and.w	r3, r3, #4
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 80a4 	beq.w	8006f36 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dee:	4b8b      	ldr	r3, [pc, #556]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10d      	bne.n	8006e16 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dfa:	4b88      	ldr	r3, [pc, #544]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfe:	4a87      	ldr	r2, [pc, #540]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e04:	6413      	str	r3, [r2, #64]	; 0x40
 8006e06:	4b85      	ldr	r3, [pc, #532]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e0e:	60bb      	str	r3, [r7, #8]
 8006e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e12:	2301      	movs	r3, #1
 8006e14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e16:	4b82      	ldr	r3, [pc, #520]	; (8007020 <HAL_RCC_OscConfig+0x4d0>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d118      	bne.n	8006e54 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006e22:	4b7f      	ldr	r3, [pc, #508]	; (8007020 <HAL_RCC_OscConfig+0x4d0>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a7e      	ldr	r2, [pc, #504]	; (8007020 <HAL_RCC_OscConfig+0x4d0>)
 8006e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e2e:	f7fc fa59 	bl	80032e4 <HAL_GetTick>
 8006e32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e34:	e008      	b.n	8006e48 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e36:	f7fc fa55 	bl	80032e4 <HAL_GetTick>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	2b64      	cmp	r3, #100	; 0x64
 8006e42:	d901      	bls.n	8006e48 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e120      	b.n	800708a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e48:	4b75      	ldr	r3, [pc, #468]	; (8007020 <HAL_RCC_OscConfig+0x4d0>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d0f0      	beq.n	8006e36 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d106      	bne.n	8006e6a <HAL_RCC_OscConfig+0x31a>
 8006e5c:	4b6f      	ldr	r3, [pc, #444]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e60:	4a6e      	ldr	r2, [pc, #440]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006e62:	f043 0301 	orr.w	r3, r3, #1
 8006e66:	6713      	str	r3, [r2, #112]	; 0x70
 8006e68:	e02d      	b.n	8006ec6 <HAL_RCC_OscConfig+0x376>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10c      	bne.n	8006e8c <HAL_RCC_OscConfig+0x33c>
 8006e72:	4b6a      	ldr	r3, [pc, #424]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e76:	4a69      	ldr	r2, [pc, #420]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006e78:	f023 0301 	bic.w	r3, r3, #1
 8006e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e7e:	4b67      	ldr	r3, [pc, #412]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e82:	4a66      	ldr	r2, [pc, #408]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006e84:	f023 0304 	bic.w	r3, r3, #4
 8006e88:	6713      	str	r3, [r2, #112]	; 0x70
 8006e8a:	e01c      	b.n	8006ec6 <HAL_RCC_OscConfig+0x376>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	2b05      	cmp	r3, #5
 8006e92:	d10c      	bne.n	8006eae <HAL_RCC_OscConfig+0x35e>
 8006e94:	4b61      	ldr	r3, [pc, #388]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e98:	4a60      	ldr	r2, [pc, #384]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006e9a:	f043 0304 	orr.w	r3, r3, #4
 8006e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8006ea0:	4b5e      	ldr	r3, [pc, #376]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea4:	4a5d      	ldr	r2, [pc, #372]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006ea6:	f043 0301 	orr.w	r3, r3, #1
 8006eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8006eac:	e00b      	b.n	8006ec6 <HAL_RCC_OscConfig+0x376>
 8006eae:	4b5b      	ldr	r3, [pc, #364]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb2:	4a5a      	ldr	r2, [pc, #360]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006eb4:	f023 0301 	bic.w	r3, r3, #1
 8006eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8006eba:	4b58      	ldr	r3, [pc, #352]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ebe:	4a57      	ldr	r2, [pc, #348]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006ec0:	f023 0304 	bic.w	r3, r3, #4
 8006ec4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d015      	beq.n	8006efa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ece:	f7fc fa09 	bl	80032e4 <HAL_GetTick>
 8006ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ed4:	e00a      	b.n	8006eec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ed6:	f7fc fa05 	bl	80032e4 <HAL_GetTick>
 8006eda:	4602      	mov	r2, r0
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d901      	bls.n	8006eec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e0ce      	b.n	800708a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eec:	4b4b      	ldr	r3, [pc, #300]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef0:	f003 0302 	and.w	r3, r3, #2
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d0ee      	beq.n	8006ed6 <HAL_RCC_OscConfig+0x386>
 8006ef8:	e014      	b.n	8006f24 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006efa:	f7fc f9f3 	bl	80032e4 <HAL_GetTick>
 8006efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f00:	e00a      	b.n	8006f18 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f02:	f7fc f9ef 	bl	80032e4 <HAL_GetTick>
 8006f06:	4602      	mov	r2, r0
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d901      	bls.n	8006f18 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e0b8      	b.n	800708a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f18:	4b40      	ldr	r3, [pc, #256]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f1c:	f003 0302 	and.w	r3, r3, #2
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1ee      	bne.n	8006f02 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f24:	7dfb      	ldrb	r3, [r7, #23]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d105      	bne.n	8006f36 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f2a:	4b3c      	ldr	r3, [pc, #240]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2e:	4a3b      	ldr	r2, [pc, #236]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f000 80a4 	beq.w	8007088 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f40:	4b36      	ldr	r3, [pc, #216]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f003 030c 	and.w	r3, r3, #12
 8006f48:	2b08      	cmp	r3, #8
 8006f4a:	d06b      	beq.n	8007024 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	699b      	ldr	r3, [r3, #24]
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d149      	bne.n	8006fe8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f54:	4b31      	ldr	r3, [pc, #196]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a30      	ldr	r2, [pc, #192]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f60:	f7fc f9c0 	bl	80032e4 <HAL_GetTick>
 8006f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f66:	e008      	b.n	8006f7a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f68:	f7fc f9bc 	bl	80032e4 <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d901      	bls.n	8006f7a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e087      	b.n	800708a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f7a:	4b28      	ldr	r3, [pc, #160]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1f0      	bne.n	8006f68 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	69da      	ldr	r2, [r3, #28]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f94:	019b      	lsls	r3, r3, #6
 8006f96:	431a      	orrs	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9c:	085b      	lsrs	r3, r3, #1
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	041b      	lsls	r3, r3, #16
 8006fa2:	431a      	orrs	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa8:	061b      	lsls	r3, r3, #24
 8006faa:	4313      	orrs	r3, r2
 8006fac:	4a1b      	ldr	r2, [pc, #108]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006fae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006fb2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fb4:	4b19      	ldr	r3, [pc, #100]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a18      	ldr	r2, [pc, #96]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006fba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fc0:	f7fc f990 	bl	80032e4 <HAL_GetTick>
 8006fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fc6:	e008      	b.n	8006fda <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fc8:	f7fc f98c 	bl	80032e4 <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d901      	bls.n	8006fda <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e057      	b.n	800708a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fda:	4b10      	ldr	r3, [pc, #64]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d0f0      	beq.n	8006fc8 <HAL_RCC_OscConfig+0x478>
 8006fe6:	e04f      	b.n	8007088 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fe8:	4b0c      	ldr	r3, [pc, #48]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a0b      	ldr	r2, [pc, #44]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8006fee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff4:	f7fc f976 	bl	80032e4 <HAL_GetTick>
 8006ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ffa:	e008      	b.n	800700e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ffc:	f7fc f972 	bl	80032e4 <HAL_GetTick>
 8007000:	4602      	mov	r2, r0
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	2b02      	cmp	r3, #2
 8007008:	d901      	bls.n	800700e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e03d      	b.n	800708a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800700e:	4b03      	ldr	r3, [pc, #12]	; (800701c <HAL_RCC_OscConfig+0x4cc>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1f0      	bne.n	8006ffc <HAL_RCC_OscConfig+0x4ac>
 800701a:	e035      	b.n	8007088 <HAL_RCC_OscConfig+0x538>
 800701c:	40023800 	.word	0x40023800
 8007020:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007024:	4b1b      	ldr	r3, [pc, #108]	; (8007094 <HAL_RCC_OscConfig+0x544>)
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d028      	beq.n	8007084 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800703c:	429a      	cmp	r2, r3
 800703e:	d121      	bne.n	8007084 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800704a:	429a      	cmp	r2, r3
 800704c:	d11a      	bne.n	8007084 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007054:	4013      	ands	r3, r2
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800705a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800705c:	4293      	cmp	r3, r2
 800705e:	d111      	bne.n	8007084 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706a:	085b      	lsrs	r3, r3, #1
 800706c:	3b01      	subs	r3, #1
 800706e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007070:	429a      	cmp	r2, r3
 8007072:	d107      	bne.n	8007084 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007080:	429a      	cmp	r2, r3
 8007082:	d001      	beq.n	8007088 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e000      	b.n	800708a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3718      	adds	r7, #24
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	40023800 	.word	0x40023800

08007098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80070a2:	2300      	movs	r3, #0
 80070a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d101      	bne.n	80070b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e0d0      	b.n	8007252 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070b0:	4b6a      	ldr	r3, [pc, #424]	; (800725c <HAL_RCC_ClockConfig+0x1c4>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 030f 	and.w	r3, r3, #15
 80070b8:	683a      	ldr	r2, [r7, #0]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d910      	bls.n	80070e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070be:	4b67      	ldr	r3, [pc, #412]	; (800725c <HAL_RCC_ClockConfig+0x1c4>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f023 020f 	bic.w	r2, r3, #15
 80070c6:	4965      	ldr	r1, [pc, #404]	; (800725c <HAL_RCC_ClockConfig+0x1c4>)
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070ce:	4b63      	ldr	r3, [pc, #396]	; (800725c <HAL_RCC_ClockConfig+0x1c4>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 030f 	and.w	r3, r3, #15
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d001      	beq.n	80070e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e0b8      	b.n	8007252 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0302 	and.w	r3, r3, #2
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d020      	beq.n	800712e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0304 	and.w	r3, r3, #4
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d005      	beq.n	8007104 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070f8:	4b59      	ldr	r3, [pc, #356]	; (8007260 <HAL_RCC_ClockConfig+0x1c8>)
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	4a58      	ldr	r2, [pc, #352]	; (8007260 <HAL_RCC_ClockConfig+0x1c8>)
 80070fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007102:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0308 	and.w	r3, r3, #8
 800710c:	2b00      	cmp	r3, #0
 800710e:	d005      	beq.n	800711c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007110:	4b53      	ldr	r3, [pc, #332]	; (8007260 <HAL_RCC_ClockConfig+0x1c8>)
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	4a52      	ldr	r2, [pc, #328]	; (8007260 <HAL_RCC_ClockConfig+0x1c8>)
 8007116:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800711a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800711c:	4b50      	ldr	r3, [pc, #320]	; (8007260 <HAL_RCC_ClockConfig+0x1c8>)
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	494d      	ldr	r1, [pc, #308]	; (8007260 <HAL_RCC_ClockConfig+0x1c8>)
 800712a:	4313      	orrs	r3, r2
 800712c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0301 	and.w	r3, r3, #1
 8007136:	2b00      	cmp	r3, #0
 8007138:	d040      	beq.n	80071bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d107      	bne.n	8007152 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007142:	4b47      	ldr	r3, [pc, #284]	; (8007260 <HAL_RCC_ClockConfig+0x1c8>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d115      	bne.n	800717a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e07f      	b.n	8007252 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	2b02      	cmp	r3, #2
 8007158:	d107      	bne.n	800716a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800715a:	4b41      	ldr	r3, [pc, #260]	; (8007260 <HAL_RCC_ClockConfig+0x1c8>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d109      	bne.n	800717a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e073      	b.n	8007252 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800716a:	4b3d      	ldr	r3, [pc, #244]	; (8007260 <HAL_RCC_ClockConfig+0x1c8>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0302 	and.w	r3, r3, #2
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e06b      	b.n	8007252 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800717a:	4b39      	ldr	r3, [pc, #228]	; (8007260 <HAL_RCC_ClockConfig+0x1c8>)
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f023 0203 	bic.w	r2, r3, #3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	4936      	ldr	r1, [pc, #216]	; (8007260 <HAL_RCC_ClockConfig+0x1c8>)
 8007188:	4313      	orrs	r3, r2
 800718a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800718c:	f7fc f8aa 	bl	80032e4 <HAL_GetTick>
 8007190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007192:	e00a      	b.n	80071aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007194:	f7fc f8a6 	bl	80032e4 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	f241 3288 	movw	r2, #5000	; 0x1388
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d901      	bls.n	80071aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e053      	b.n	8007252 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071aa:	4b2d      	ldr	r3, [pc, #180]	; (8007260 <HAL_RCC_ClockConfig+0x1c8>)
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f003 020c 	and.w	r2, r3, #12
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d1eb      	bne.n	8007194 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071bc:	4b27      	ldr	r3, [pc, #156]	; (800725c <HAL_RCC_ClockConfig+0x1c4>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 030f 	and.w	r3, r3, #15
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d210      	bcs.n	80071ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071ca:	4b24      	ldr	r3, [pc, #144]	; (800725c <HAL_RCC_ClockConfig+0x1c4>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f023 020f 	bic.w	r2, r3, #15
 80071d2:	4922      	ldr	r1, [pc, #136]	; (800725c <HAL_RCC_ClockConfig+0x1c4>)
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071da:	4b20      	ldr	r3, [pc, #128]	; (800725c <HAL_RCC_ClockConfig+0x1c4>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 030f 	and.w	r3, r3, #15
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d001      	beq.n	80071ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e032      	b.n	8007252 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0304 	and.w	r3, r3, #4
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d008      	beq.n	800720a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071f8:	4b19      	ldr	r3, [pc, #100]	; (8007260 <HAL_RCC_ClockConfig+0x1c8>)
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	4916      	ldr	r1, [pc, #88]	; (8007260 <HAL_RCC_ClockConfig+0x1c8>)
 8007206:	4313      	orrs	r3, r2
 8007208:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0308 	and.w	r3, r3, #8
 8007212:	2b00      	cmp	r3, #0
 8007214:	d009      	beq.n	800722a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007216:	4b12      	ldr	r3, [pc, #72]	; (8007260 <HAL_RCC_ClockConfig+0x1c8>)
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	00db      	lsls	r3, r3, #3
 8007224:	490e      	ldr	r1, [pc, #56]	; (8007260 <HAL_RCC_ClockConfig+0x1c8>)
 8007226:	4313      	orrs	r3, r2
 8007228:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800722a:	f000 f821 	bl	8007270 <HAL_RCC_GetSysClockFreq>
 800722e:	4602      	mov	r2, r0
 8007230:	4b0b      	ldr	r3, [pc, #44]	; (8007260 <HAL_RCC_ClockConfig+0x1c8>)
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	091b      	lsrs	r3, r3, #4
 8007236:	f003 030f 	and.w	r3, r3, #15
 800723a:	490a      	ldr	r1, [pc, #40]	; (8007264 <HAL_RCC_ClockConfig+0x1cc>)
 800723c:	5ccb      	ldrb	r3, [r1, r3]
 800723e:	fa22 f303 	lsr.w	r3, r2, r3
 8007242:	4a09      	ldr	r2, [pc, #36]	; (8007268 <HAL_RCC_ClockConfig+0x1d0>)
 8007244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007246:	4b09      	ldr	r3, [pc, #36]	; (800726c <HAL_RCC_ClockConfig+0x1d4>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4618      	mov	r0, r3
 800724c:	f7fc f806 	bl	800325c <HAL_InitTick>

  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	40023c00 	.word	0x40023c00
 8007260:	40023800 	.word	0x40023800
 8007264:	08010cac 	.word	0x08010cac
 8007268:	20000000 	.word	0x20000000
 800726c:	2000003c 	.word	0x2000003c

08007270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007274:	b090      	sub	sp, #64	; 0x40
 8007276:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007278:	2300      	movs	r3, #0
 800727a:	637b      	str	r3, [r7, #52]	; 0x34
 800727c:	2300      	movs	r3, #0
 800727e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007280:	2300      	movs	r3, #0
 8007282:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8007284:	2300      	movs	r3, #0
 8007286:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007288:	4b59      	ldr	r3, [pc, #356]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f003 030c 	and.w	r3, r3, #12
 8007290:	2b08      	cmp	r3, #8
 8007292:	d00d      	beq.n	80072b0 <HAL_RCC_GetSysClockFreq+0x40>
 8007294:	2b08      	cmp	r3, #8
 8007296:	f200 80a1 	bhi.w	80073dc <HAL_RCC_GetSysClockFreq+0x16c>
 800729a:	2b00      	cmp	r3, #0
 800729c:	d002      	beq.n	80072a4 <HAL_RCC_GetSysClockFreq+0x34>
 800729e:	2b04      	cmp	r3, #4
 80072a0:	d003      	beq.n	80072aa <HAL_RCC_GetSysClockFreq+0x3a>
 80072a2:	e09b      	b.n	80073dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80072a4:	4b53      	ldr	r3, [pc, #332]	; (80073f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80072a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80072a8:	e09b      	b.n	80073e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80072aa:	4b53      	ldr	r3, [pc, #332]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80072ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80072ae:	e098      	b.n	80073e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80072b0:	4b4f      	ldr	r3, [pc, #316]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072b8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80072ba:	4b4d      	ldr	r3, [pc, #308]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d028      	beq.n	8007318 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072c6:	4b4a      	ldr	r3, [pc, #296]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	099b      	lsrs	r3, r3, #6
 80072cc:	2200      	movs	r2, #0
 80072ce:	623b      	str	r3, [r7, #32]
 80072d0:	627a      	str	r2, [r7, #36]	; 0x24
 80072d2:	6a3b      	ldr	r3, [r7, #32]
 80072d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80072d8:	2100      	movs	r1, #0
 80072da:	4b47      	ldr	r3, [pc, #284]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80072dc:	fb03 f201 	mul.w	r2, r3, r1
 80072e0:	2300      	movs	r3, #0
 80072e2:	fb00 f303 	mul.w	r3, r0, r3
 80072e6:	4413      	add	r3, r2
 80072e8:	4a43      	ldr	r2, [pc, #268]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80072ea:	fba0 1202 	umull	r1, r2, r0, r2
 80072ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072f0:	460a      	mov	r2, r1
 80072f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80072f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072f6:	4413      	add	r3, r2
 80072f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072fc:	2200      	movs	r2, #0
 80072fe:	61bb      	str	r3, [r7, #24]
 8007300:	61fa      	str	r2, [r7, #28]
 8007302:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007306:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800730a:	f7f8 ff7d 	bl	8000208 <__aeabi_uldivmod>
 800730e:	4602      	mov	r2, r0
 8007310:	460b      	mov	r3, r1
 8007312:	4613      	mov	r3, r2
 8007314:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007316:	e053      	b.n	80073c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007318:	4b35      	ldr	r3, [pc, #212]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	099b      	lsrs	r3, r3, #6
 800731e:	2200      	movs	r2, #0
 8007320:	613b      	str	r3, [r7, #16]
 8007322:	617a      	str	r2, [r7, #20]
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800732a:	f04f 0b00 	mov.w	fp, #0
 800732e:	4652      	mov	r2, sl
 8007330:	465b      	mov	r3, fp
 8007332:	f04f 0000 	mov.w	r0, #0
 8007336:	f04f 0100 	mov.w	r1, #0
 800733a:	0159      	lsls	r1, r3, #5
 800733c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007340:	0150      	lsls	r0, r2, #5
 8007342:	4602      	mov	r2, r0
 8007344:	460b      	mov	r3, r1
 8007346:	ebb2 080a 	subs.w	r8, r2, sl
 800734a:	eb63 090b 	sbc.w	r9, r3, fp
 800734e:	f04f 0200 	mov.w	r2, #0
 8007352:	f04f 0300 	mov.w	r3, #0
 8007356:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800735a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800735e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007362:	ebb2 0408 	subs.w	r4, r2, r8
 8007366:	eb63 0509 	sbc.w	r5, r3, r9
 800736a:	f04f 0200 	mov.w	r2, #0
 800736e:	f04f 0300 	mov.w	r3, #0
 8007372:	00eb      	lsls	r3, r5, #3
 8007374:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007378:	00e2      	lsls	r2, r4, #3
 800737a:	4614      	mov	r4, r2
 800737c:	461d      	mov	r5, r3
 800737e:	eb14 030a 	adds.w	r3, r4, sl
 8007382:	603b      	str	r3, [r7, #0]
 8007384:	eb45 030b 	adc.w	r3, r5, fp
 8007388:	607b      	str	r3, [r7, #4]
 800738a:	f04f 0200 	mov.w	r2, #0
 800738e:	f04f 0300 	mov.w	r3, #0
 8007392:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007396:	4629      	mov	r1, r5
 8007398:	028b      	lsls	r3, r1, #10
 800739a:	4621      	mov	r1, r4
 800739c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80073a0:	4621      	mov	r1, r4
 80073a2:	028a      	lsls	r2, r1, #10
 80073a4:	4610      	mov	r0, r2
 80073a6:	4619      	mov	r1, r3
 80073a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073aa:	2200      	movs	r2, #0
 80073ac:	60bb      	str	r3, [r7, #8]
 80073ae:	60fa      	str	r2, [r7, #12]
 80073b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073b4:	f7f8 ff28 	bl	8000208 <__aeabi_uldivmod>
 80073b8:	4602      	mov	r2, r0
 80073ba:	460b      	mov	r3, r1
 80073bc:	4613      	mov	r3, r2
 80073be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80073c0:	4b0b      	ldr	r3, [pc, #44]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	0c1b      	lsrs	r3, r3, #16
 80073c6:	f003 0303 	and.w	r3, r3, #3
 80073ca:	3301      	adds	r3, #1
 80073cc:	005b      	lsls	r3, r3, #1
 80073ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80073d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80073da:	e002      	b.n	80073e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073dc:	4b05      	ldr	r3, [pc, #20]	; (80073f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80073de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80073e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3740      	adds	r7, #64	; 0x40
 80073e8:	46bd      	mov	sp, r7
 80073ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073ee:	bf00      	nop
 80073f0:	40023800 	.word	0x40023800
 80073f4:	00f42400 	.word	0x00f42400
 80073f8:	017d7840 	.word	0x017d7840

080073fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b088      	sub	sp, #32
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007404:	2300      	movs	r3, #0
 8007406:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007408:	2300      	movs	r3, #0
 800740a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800740c:	2300      	movs	r3, #0
 800740e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007410:	2300      	movs	r3, #0
 8007412:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007414:	2300      	movs	r3, #0
 8007416:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	2b00      	cmp	r3, #0
 8007422:	d012      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007424:	4b69      	ldr	r3, [pc, #420]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	4a68      	ldr	r2, [pc, #416]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800742a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800742e:	6093      	str	r3, [r2, #8]
 8007430:	4b66      	ldr	r3, [pc, #408]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007432:	689a      	ldr	r2, [r3, #8]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007438:	4964      	ldr	r1, [pc, #400]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800743a:	4313      	orrs	r3, r2
 800743c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007442:	2b00      	cmp	r3, #0
 8007444:	d101      	bne.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007446:	2301      	movs	r3, #1
 8007448:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d017      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007456:	4b5d      	ldr	r3, [pc, #372]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007458:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800745c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007464:	4959      	ldr	r1, [pc, #356]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007466:	4313      	orrs	r3, r2
 8007468:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007470:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007474:	d101      	bne.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007476:	2301      	movs	r3, #1
 8007478:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800747e:	2b00      	cmp	r3, #0
 8007480:	d101      	bne.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007482:	2301      	movs	r3, #1
 8007484:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800748e:	2b00      	cmp	r3, #0
 8007490:	d017      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007492:	4b4e      	ldr	r3, [pc, #312]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007494:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007498:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a0:	494a      	ldr	r1, [pc, #296]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074a2:	4313      	orrs	r3, r2
 80074a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074b0:	d101      	bne.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80074b2:	2301      	movs	r3, #1
 80074b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80074be:	2301      	movs	r3, #1
 80074c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d001      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80074ce:	2301      	movs	r3, #1
 80074d0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0320 	and.w	r3, r3, #32
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f000 808b 	beq.w	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80074e0:	4b3a      	ldr	r3, [pc, #232]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e4:	4a39      	ldr	r2, [pc, #228]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074ea:	6413      	str	r3, [r2, #64]	; 0x40
 80074ec:	4b37      	ldr	r3, [pc, #220]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074f4:	60bb      	str	r3, [r7, #8]
 80074f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80074f8:	4b35      	ldr	r3, [pc, #212]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a34      	ldr	r2, [pc, #208]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80074fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007502:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007504:	f7fb feee 	bl	80032e4 <HAL_GetTick>
 8007508:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800750a:	e008      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800750c:	f7fb feea 	bl	80032e4 <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	2b64      	cmp	r3, #100	; 0x64
 8007518:	d901      	bls.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e357      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800751e:	4b2c      	ldr	r3, [pc, #176]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007526:	2b00      	cmp	r3, #0
 8007528:	d0f0      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800752a:	4b28      	ldr	r3, [pc, #160]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800752c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800752e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007532:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d035      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007542:	693a      	ldr	r2, [r7, #16]
 8007544:	429a      	cmp	r2, r3
 8007546:	d02e      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007548:	4b20      	ldr	r3, [pc, #128]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800754a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800754c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007550:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007552:	4b1e      	ldr	r3, [pc, #120]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007556:	4a1d      	ldr	r2, [pc, #116]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800755c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800755e:	4b1b      	ldr	r3, [pc, #108]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007562:	4a1a      	ldr	r2, [pc, #104]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007568:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800756a:	4a18      	ldr	r2, [pc, #96]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007570:	4b16      	ldr	r3, [pc, #88]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007574:	f003 0301 	and.w	r3, r3, #1
 8007578:	2b01      	cmp	r3, #1
 800757a:	d114      	bne.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800757c:	f7fb feb2 	bl	80032e4 <HAL_GetTick>
 8007580:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007582:	e00a      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007584:	f7fb feae 	bl	80032e4 <HAL_GetTick>
 8007588:	4602      	mov	r2, r0
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007592:	4293      	cmp	r3, r2
 8007594:	d901      	bls.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e319      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800759a:	4b0c      	ldr	r3, [pc, #48]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800759c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800759e:	f003 0302 	and.w	r3, r3, #2
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d0ee      	beq.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075b2:	d111      	bne.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80075b4:	4b05      	ldr	r3, [pc, #20]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80075c0:	4b04      	ldr	r3, [pc, #16]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80075c2:	400b      	ands	r3, r1
 80075c4:	4901      	ldr	r1, [pc, #4]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075c6:	4313      	orrs	r3, r2
 80075c8:	608b      	str	r3, [r1, #8]
 80075ca:	e00b      	b.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80075cc:	40023800 	.word	0x40023800
 80075d0:	40007000 	.word	0x40007000
 80075d4:	0ffffcff 	.word	0x0ffffcff
 80075d8:	4baa      	ldr	r3, [pc, #680]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	4aa9      	ldr	r2, [pc, #676]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075de:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80075e2:	6093      	str	r3, [r2, #8]
 80075e4:	4ba7      	ldr	r3, [pc, #668]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075f0:	49a4      	ldr	r1, [pc, #656]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075f2:	4313      	orrs	r3, r2
 80075f4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0310 	and.w	r3, r3, #16
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d010      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007602:	4ba0      	ldr	r3, [pc, #640]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007608:	4a9e      	ldr	r2, [pc, #632]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800760a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800760e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007612:	4b9c      	ldr	r3, [pc, #624]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007614:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761c:	4999      	ldr	r1, [pc, #612]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800761e:	4313      	orrs	r3, r2
 8007620:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00a      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007630:	4b94      	ldr	r3, [pc, #592]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007636:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800763e:	4991      	ldr	r1, [pc, #580]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007640:	4313      	orrs	r3, r2
 8007642:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00a      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007652:	4b8c      	ldr	r3, [pc, #560]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007658:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007660:	4988      	ldr	r1, [pc, #544]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007662:	4313      	orrs	r3, r2
 8007664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00a      	beq.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007674:	4b83      	ldr	r3, [pc, #524]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800767a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007682:	4980      	ldr	r1, [pc, #512]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007684:	4313      	orrs	r3, r2
 8007686:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00a      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007696:	4b7b      	ldr	r3, [pc, #492]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800769c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076a4:	4977      	ldr	r1, [pc, #476]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00a      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80076b8:	4b72      	ldr	r3, [pc, #456]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076be:	f023 0203 	bic.w	r2, r3, #3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c6:	496f      	ldr	r1, [pc, #444]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00a      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80076da:	4b6a      	ldr	r3, [pc, #424]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076e0:	f023 020c 	bic.w	r2, r3, #12
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076e8:	4966      	ldr	r1, [pc, #408]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00a      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80076fc:	4b61      	ldr	r3, [pc, #388]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007702:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800770a:	495e      	ldr	r1, [pc, #376]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800770c:	4313      	orrs	r3, r2
 800770e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00a      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800771e:	4b59      	ldr	r3, [pc, #356]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007724:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800772c:	4955      	ldr	r1, [pc, #340]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800772e:	4313      	orrs	r3, r2
 8007730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00a      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007740:	4b50      	ldr	r3, [pc, #320]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007746:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800774e:	494d      	ldr	r1, [pc, #308]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007750:	4313      	orrs	r3, r2
 8007752:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00a      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007762:	4b48      	ldr	r3, [pc, #288]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007768:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007770:	4944      	ldr	r1, [pc, #272]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007772:	4313      	orrs	r3, r2
 8007774:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00a      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007784:	4b3f      	ldr	r3, [pc, #252]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800778a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007792:	493c      	ldr	r1, [pc, #240]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007794:	4313      	orrs	r3, r2
 8007796:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00a      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80077a6:	4b37      	ldr	r3, [pc, #220]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077b4:	4933      	ldr	r1, [pc, #204]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00a      	beq.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80077c8:	4b2e      	ldr	r3, [pc, #184]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077d6:	492b      	ldr	r1, [pc, #172]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d011      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80077ea:	4b26      	ldr	r3, [pc, #152]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077f0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077f8:	4922      	ldr	r1, [pc, #136]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077fa:	4313      	orrs	r3, r2
 80077fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007804:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007808:	d101      	bne.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800780a:	2301      	movs	r3, #1
 800780c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0308 	and.w	r3, r3, #8
 8007816:	2b00      	cmp	r3, #0
 8007818:	d001      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800781a:	2301      	movs	r3, #1
 800781c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00a      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800782a:	4b16      	ldr	r3, [pc, #88]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800782c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007830:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007838:	4912      	ldr	r1, [pc, #72]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800783a:	4313      	orrs	r3, r2
 800783c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00b      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800784c:	4b0d      	ldr	r3, [pc, #52]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800784e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007852:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800785c:	4909      	ldr	r1, [pc, #36]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800785e:	4313      	orrs	r3, r2
 8007860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d006      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007872:	2b00      	cmp	r3, #0
 8007874:	f000 80d9 	beq.w	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007878:	4b02      	ldr	r3, [pc, #8]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a01      	ldr	r2, [pc, #4]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800787e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007882:	e001      	b.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007884:	40023800 	.word	0x40023800
 8007888:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800788a:	f7fb fd2b 	bl	80032e4 <HAL_GetTick>
 800788e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007890:	e008      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007892:	f7fb fd27 	bl	80032e4 <HAL_GetTick>
 8007896:	4602      	mov	r2, r0
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	2b64      	cmp	r3, #100	; 0x64
 800789e:	d901      	bls.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e194      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80078a4:	4b6c      	ldr	r3, [pc, #432]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1f0      	bne.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0301 	and.w	r3, r3, #1
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d021      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d11d      	bne.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80078c4:	4b64      	ldr	r3, [pc, #400]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078ca:	0c1b      	lsrs	r3, r3, #16
 80078cc:	f003 0303 	and.w	r3, r3, #3
 80078d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80078d2:	4b61      	ldr	r3, [pc, #388]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078d8:	0e1b      	lsrs	r3, r3, #24
 80078da:	f003 030f 	and.w	r3, r3, #15
 80078de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	019a      	lsls	r2, r3, #6
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	041b      	lsls	r3, r3, #16
 80078ea:	431a      	orrs	r2, r3
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	061b      	lsls	r3, r3, #24
 80078f0:	431a      	orrs	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	071b      	lsls	r3, r3, #28
 80078f8:	4957      	ldr	r1, [pc, #348]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078fa:	4313      	orrs	r3, r2
 80078fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007908:	2b00      	cmp	r3, #0
 800790a:	d004      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007910:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007914:	d00a      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800791e:	2b00      	cmp	r3, #0
 8007920:	d02e      	beq.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007926:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800792a:	d129      	bne.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800792c:	4b4a      	ldr	r3, [pc, #296]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800792e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007932:	0c1b      	lsrs	r3, r3, #16
 8007934:	f003 0303 	and.w	r3, r3, #3
 8007938:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800793a:	4b47      	ldr	r3, [pc, #284]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800793c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007940:	0f1b      	lsrs	r3, r3, #28
 8007942:	f003 0307 	and.w	r3, r3, #7
 8007946:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	019a      	lsls	r2, r3, #6
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	041b      	lsls	r3, r3, #16
 8007952:	431a      	orrs	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	061b      	lsls	r3, r3, #24
 800795a:	431a      	orrs	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	071b      	lsls	r3, r3, #28
 8007960:	493d      	ldr	r1, [pc, #244]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007962:	4313      	orrs	r3, r2
 8007964:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007968:	4b3b      	ldr	r3, [pc, #236]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800796a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800796e:	f023 021f 	bic.w	r2, r3, #31
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007976:	3b01      	subs	r3, #1
 8007978:	4937      	ldr	r1, [pc, #220]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800797a:	4313      	orrs	r3, r2
 800797c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007988:	2b00      	cmp	r3, #0
 800798a:	d01d      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800798c:	4b32      	ldr	r3, [pc, #200]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800798e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007992:	0e1b      	lsrs	r3, r3, #24
 8007994:	f003 030f 	and.w	r3, r3, #15
 8007998:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800799a:	4b2f      	ldr	r3, [pc, #188]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800799c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079a0:	0f1b      	lsrs	r3, r3, #28
 80079a2:	f003 0307 	and.w	r3, r3, #7
 80079a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	019a      	lsls	r2, r3, #6
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	041b      	lsls	r3, r3, #16
 80079b4:	431a      	orrs	r2, r3
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	061b      	lsls	r3, r3, #24
 80079ba:	431a      	orrs	r2, r3
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	071b      	lsls	r3, r3, #28
 80079c0:	4925      	ldr	r1, [pc, #148]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079c2:	4313      	orrs	r3, r2
 80079c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d011      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	019a      	lsls	r2, r3, #6
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	041b      	lsls	r3, r3, #16
 80079e0:	431a      	orrs	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	061b      	lsls	r3, r3, #24
 80079e8:	431a      	orrs	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	071b      	lsls	r3, r3, #28
 80079f0:	4919      	ldr	r1, [pc, #100]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079f2:	4313      	orrs	r3, r2
 80079f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80079f8:	4b17      	ldr	r3, [pc, #92]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a16      	ldr	r2, [pc, #88]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a04:	f7fb fc6e 	bl	80032e4 <HAL_GetTick>
 8007a08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a0a:	e008      	b.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007a0c:	f7fb fc6a 	bl	80032e4 <HAL_GetTick>
 8007a10:	4602      	mov	r2, r0
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	1ad3      	subs	r3, r2, r3
 8007a16:	2b64      	cmp	r3, #100	; 0x64
 8007a18:	d901      	bls.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e0d7      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a1e:	4b0e      	ldr	r3, [pc, #56]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d0f0      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	f040 80cd 	bne.w	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007a32:	4b09      	ldr	r3, [pc, #36]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a08      	ldr	r2, [pc, #32]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a3e:	f7fb fc51 	bl	80032e4 <HAL_GetTick>
 8007a42:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007a44:	e00a      	b.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007a46:	f7fb fc4d 	bl	80032e4 <HAL_GetTick>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	2b64      	cmp	r3, #100	; 0x64
 8007a52:	d903      	bls.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a54:	2303      	movs	r3, #3
 8007a56:	e0ba      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007a58:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007a5c:	4b5e      	ldr	r3, [pc, #376]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a68:	d0ed      	beq.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d003      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d009      	beq.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d02e      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d12a      	bne.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007a92:	4b51      	ldr	r3, [pc, #324]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a98:	0c1b      	lsrs	r3, r3, #16
 8007a9a:	f003 0303 	and.w	r3, r3, #3
 8007a9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007aa0:	4b4d      	ldr	r3, [pc, #308]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aa6:	0f1b      	lsrs	r3, r3, #28
 8007aa8:	f003 0307 	and.w	r3, r3, #7
 8007aac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	695b      	ldr	r3, [r3, #20]
 8007ab2:	019a      	lsls	r2, r3, #6
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	041b      	lsls	r3, r3, #16
 8007ab8:	431a      	orrs	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	699b      	ldr	r3, [r3, #24]
 8007abe:	061b      	lsls	r3, r3, #24
 8007ac0:	431a      	orrs	r2, r3
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	071b      	lsls	r3, r3, #28
 8007ac6:	4944      	ldr	r1, [pc, #272]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007ace:	4b42      	ldr	r3, [pc, #264]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ad4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007adc:	3b01      	subs	r3, #1
 8007ade:	021b      	lsls	r3, r3, #8
 8007ae0:	493d      	ldr	r1, [pc, #244]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d022      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007af8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007afc:	d11d      	bne.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007afe:	4b36      	ldr	r3, [pc, #216]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b04:	0e1b      	lsrs	r3, r3, #24
 8007b06:	f003 030f 	and.w	r3, r3, #15
 8007b0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007b0c:	4b32      	ldr	r3, [pc, #200]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b12:	0f1b      	lsrs	r3, r3, #28
 8007b14:	f003 0307 	and.w	r3, r3, #7
 8007b18:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	019a      	lsls	r2, r3, #6
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a1b      	ldr	r3, [r3, #32]
 8007b24:	041b      	lsls	r3, r3, #16
 8007b26:	431a      	orrs	r2, r3
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	061b      	lsls	r3, r3, #24
 8007b2c:	431a      	orrs	r2, r3
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	071b      	lsls	r3, r3, #28
 8007b32:	4929      	ldr	r1, [pc, #164]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b34:	4313      	orrs	r3, r2
 8007b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 0308 	and.w	r3, r3, #8
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d028      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007b46:	4b24      	ldr	r3, [pc, #144]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b4c:	0e1b      	lsrs	r3, r3, #24
 8007b4e:	f003 030f 	and.w	r3, r3, #15
 8007b52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007b54:	4b20      	ldr	r3, [pc, #128]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b5a:	0c1b      	lsrs	r3, r3, #16
 8007b5c:	f003 0303 	and.w	r3, r3, #3
 8007b60:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	019a      	lsls	r2, r3, #6
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	041b      	lsls	r3, r3, #16
 8007b6c:	431a      	orrs	r2, r3
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	061b      	lsls	r3, r3, #24
 8007b72:	431a      	orrs	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	69db      	ldr	r3, [r3, #28]
 8007b78:	071b      	lsls	r3, r3, #28
 8007b7a:	4917      	ldr	r1, [pc, #92]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007b82:	4b15      	ldr	r3, [pc, #84]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b90:	4911      	ldr	r1, [pc, #68]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b92:	4313      	orrs	r3, r2
 8007b94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007b98:	4b0f      	ldr	r3, [pc, #60]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a0e      	ldr	r2, [pc, #56]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ba2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ba4:	f7fb fb9e 	bl	80032e4 <HAL_GetTick>
 8007ba8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007baa:	e008      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007bac:	f7fb fb9a 	bl	80032e4 <HAL_GetTick>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	2b64      	cmp	r3, #100	; 0x64
 8007bb8:	d901      	bls.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	e007      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007bbe:	4b06      	ldr	r3, [pc, #24]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bca:	d1ef      	bne.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3720      	adds	r7, #32
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	40023800 	.word	0x40023800

08007bdc <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 8007be4:	2300      	movs	r3, #0
 8007be6:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a80      	ldr	r2, [pc, #512]	; (8007dec <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 8007bec:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8007bee:	4b80      	ldr	r3, [pc, #512]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bf4:	099b      	lsrs	r3, r3, #6
 8007bf6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007bfe:	4b7c      	ldr	r3, [pc, #496]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c04:	0c1b      	lsrs	r3, r3, #16
 8007c06:	f003 0203 	and.w	r2, r3, #3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007c0e:	4b78      	ldr	r3, [pc, #480]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c14:	0e1b      	lsrs	r3, r3, #24
 8007c16:	f003 020f 	and.w	r2, r3, #15
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007c1e:	4b74      	ldr	r3, [pc, #464]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c24:	0f1b      	lsrs	r3, r3, #28
 8007c26:	f003 0207 	and.w	r2, r3, #7
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8007c2e:	4b70      	ldr	r3, [pc, #448]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c34:	099b      	lsrs	r3, r3, #6
 8007c36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007c3e:	4b6c      	ldr	r3, [pc, #432]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c44:	0c1b      	lsrs	r3, r3, #16
 8007c46:	f003 0203 	and.w	r2, r3, #3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007c4e:	4b68      	ldr	r3, [pc, #416]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c54:	0e1b      	lsrs	r3, r3, #24
 8007c56:	f003 020f 	and.w	r2, r3, #15
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007c5e:	4b64      	ldr	r3, [pc, #400]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c64:	0f1b      	lsrs	r3, r3, #28
 8007c66:	f003 0207 	and.w	r2, r3, #7
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 8007c6e:	4b60      	ldr	r3, [pc, #384]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c74:	f003 021f 	and.w	r2, r3, #31
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 8007c7c:	4b5c      	ldr	r3, [pc, #368]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c82:	0a1b      	lsrs	r3, r3, #8
 8007c84:	f003 021f 	and.w	r2, r3, #31
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 8007c8c:	4b58      	ldr	r3, [pc, #352]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c92:	0c1b      	lsrs	r3, r3, #16
 8007c94:	f003 0203 	and.w	r2, r3, #3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8007c9c:	4b54      	ldr	r3, [pc, #336]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007c9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ca2:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8007caa:	4b51      	ldr	r3, [pc, #324]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cb0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8007cb8:	4b4d      	ldr	r3, [pc, #308]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8007cc4:	4b4a      	ldr	r3, [pc, #296]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8007cd2:	4b47      	ldr	r3, [pc, #284]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd8:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	669a      	str	r2, [r3, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8007ce0:	4b43      	ldr	r3, [pc, #268]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce6:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8007cee:	4b40      	ldr	r3, [pc, #256]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cf4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	671a      	str	r2, [r3, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8007cfc:	4b3c      	ldr	r3, [pc, #240]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d02:	f003 0203 	and.w	r2, r3, #3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8007d0a:	4b39      	ldr	r3, [pc, #228]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d10:	f003 020c 	and.w	r2, r3, #12
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8007d18:	4b35      	ldr	r3, [pc, #212]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d1e:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8007d26:	4b32      	ldr	r3, [pc, #200]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d2c:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8007d34:	4b2e      	ldr	r3, [pc, #184]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d3a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8007d42:	4b2b      	ldr	r3, [pc, #172]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d48:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8007d50:	4b27      	ldr	r3, [pc, #156]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d56:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8007d5e:	4b24      	ldr	r3, [pc, #144]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d64:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007d6c:	4b20      	ldr	r3, [pc, #128]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d72:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	675a      	str	r2, [r3, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8007d7a:	4b1d      	ldr	r3, [pc, #116]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d80:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	679a      	str	r2, [r3, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8007d88:	4b19      	ldr	r3, [pc, #100]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d8e:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8007d96:	4b16      	ldr	r3, [pc, #88]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d9c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8007da6:	4b12      	ldr	r3, [pc, #72]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007dae:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8007db0:	4b0f      	ldr	r3, [pc, #60]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007db4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	431a      	orrs	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8007dc0:	4b0b      	ldr	r3, [pc, #44]	; (8007df0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d103      	bne.n	8007dd6 <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8007dd4:	e003      	b.n	8007dde <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ddc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007dde:	bf00      	nop
 8007de0:	3714      	adds	r7, #20
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	00fffff1 	.word	0x00fffff1
 8007df0:	40023800 	.word	0x40023800

08007df4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b087      	sub	sp, #28
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007e00:	2300      	movs	r3, #0
 8007e02:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007e04:	2300      	movs	r3, #0
 8007e06:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007e12:	f040 808d 	bne.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007e16:	4b93      	ldr	r3, [pc, #588]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e1c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007e24:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e2c:	d07c      	beq.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e34:	d87b      	bhi.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d004      	beq.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e42:	d039      	beq.n	8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007e44:	e073      	b.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007e46:	4b87      	ldr	r3, [pc, #540]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d108      	bne.n	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007e52:	4b84      	ldr	r3, [pc, #528]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e5a:	4a83      	ldr	r2, [pc, #524]	; (8008068 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e60:	613b      	str	r3, [r7, #16]
 8007e62:	e007      	b.n	8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007e64:	4b7f      	ldr	r3, [pc, #508]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e6c:	4a7f      	ldr	r2, [pc, #508]	; (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e72:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007e74:	4b7b      	ldr	r3, [pc, #492]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e7a:	0e1b      	lsrs	r3, r3, #24
 8007e7c:	f003 030f 	and.w	r3, r3, #15
 8007e80:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007e82:	4b78      	ldr	r3, [pc, #480]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e88:	099b      	lsrs	r3, r3, #6
 8007e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	fb03 f202 	mul.w	r2, r3, r2
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e9a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007e9c:	4b71      	ldr	r3, [pc, #452]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ea2:	0a1b      	lsrs	r3, r3, #8
 8007ea4:	f003 031f 	and.w	r3, r3, #31
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007eac:	697a      	ldr	r2, [r7, #20]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eb4:	617b      	str	r3, [r7, #20]
        break;
 8007eb6:	e03b      	b.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007eb8:	4b6a      	ldr	r3, [pc, #424]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d108      	bne.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007ec4:	4b67      	ldr	r3, [pc, #412]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ecc:	4a66      	ldr	r2, [pc, #408]	; (8008068 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ed2:	613b      	str	r3, [r7, #16]
 8007ed4:	e007      	b.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007ed6:	4b63      	ldr	r3, [pc, #396]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ede:	4a63      	ldr	r2, [pc, #396]	; (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007ee6:	4b5f      	ldr	r3, [pc, #380]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eec:	0e1b      	lsrs	r3, r3, #24
 8007eee:	f003 030f 	and.w	r3, r3, #15
 8007ef2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007ef4:	4b5b      	ldr	r3, [pc, #364]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007efa:	099b      	lsrs	r3, r3, #6
 8007efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	fb03 f202 	mul.w	r2, r3, r2
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f0c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007f0e:	4b55      	ldr	r3, [pc, #340]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f14:	f003 031f 	and.w	r3, r3, #31
 8007f18:	3301      	adds	r3, #1
 8007f1a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007f1c:	697a      	ldr	r2, [r7, #20]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f24:	617b      	str	r3, [r7, #20]
        break;
 8007f26:	e003      	b.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007f28:	4b51      	ldr	r3, [pc, #324]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007f2a:	617b      	str	r3, [r7, #20]
        break;
 8007f2c:	e000      	b.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8007f2e:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f36:	f040 808d 	bne.w	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007f3a:	4b4a      	ldr	r3, [pc, #296]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f40:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007f48:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f50:	d07c      	beq.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f58:	d87b      	bhi.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d004      	beq.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f66:	d039      	beq.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007f68:	e073      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007f6a:	4b3e      	ldr	r3, [pc, #248]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d108      	bne.n	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007f76:	4b3b      	ldr	r3, [pc, #236]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f7e:	4a3a      	ldr	r2, [pc, #232]	; (8008068 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f84:	613b      	str	r3, [r7, #16]
 8007f86:	e007      	b.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007f88:	4b36      	ldr	r3, [pc, #216]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f90:	4a36      	ldr	r2, [pc, #216]	; (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f96:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007f98:	4b32      	ldr	r3, [pc, #200]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f9e:	0e1b      	lsrs	r3, r3, #24
 8007fa0:	f003 030f 	and.w	r3, r3, #15
 8007fa4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007fa6:	4b2f      	ldr	r3, [pc, #188]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fac:	099b      	lsrs	r3, r3, #6
 8007fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fb2:	693a      	ldr	r2, [r7, #16]
 8007fb4:	fb03 f202 	mul.w	r2, r3, r2
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fbe:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007fc0:	4b28      	ldr	r3, [pc, #160]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fc6:	0a1b      	lsrs	r3, r3, #8
 8007fc8:	f003 031f 	and.w	r3, r3, #31
 8007fcc:	3301      	adds	r3, #1
 8007fce:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd8:	617b      	str	r3, [r7, #20]
        break;
 8007fda:	e03b      	b.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007fdc:	4b21      	ldr	r3, [pc, #132]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d108      	bne.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007fe8:	4b1e      	ldr	r3, [pc, #120]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ff0:	4a1d      	ldr	r2, [pc, #116]	; (8008068 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ff6:	613b      	str	r3, [r7, #16]
 8007ff8:	e007      	b.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007ffa:	4b1a      	ldr	r3, [pc, #104]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008002:	4a1a      	ldr	r2, [pc, #104]	; (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008004:	fbb2 f3f3 	udiv	r3, r2, r3
 8008008:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800800a:	4b16      	ldr	r3, [pc, #88]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800800c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008010:	0e1b      	lsrs	r3, r3, #24
 8008012:	f003 030f 	and.w	r3, r3, #15
 8008016:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008018:	4b12      	ldr	r3, [pc, #72]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800801a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800801e:	099b      	lsrs	r3, r3, #6
 8008020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	fb03 f202 	mul.w	r2, r3, r2
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008030:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008032:	4b0c      	ldr	r3, [pc, #48]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008038:	f003 031f 	and.w	r3, r3, #31
 800803c:	3301      	adds	r3, #1
 800803e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008040:	697a      	ldr	r2, [r7, #20]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	fbb2 f3f3 	udiv	r3, r2, r3
 8008048:	617b      	str	r3, [r7, #20]
        break;
 800804a:	e003      	b.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800804c:	4b08      	ldr	r3, [pc, #32]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800804e:	617b      	str	r3, [r7, #20]
        break;
 8008050:	e000      	b.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8008052:	bf00      	nop
      }
    }
  }

  return frequency;
 8008054:	697b      	ldr	r3, [r7, #20]
}
 8008056:	4618      	mov	r0, r3
 8008058:	371c      	adds	r7, #28
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	40023800 	.word	0x40023800
 8008068:	00f42400 	.word	0x00f42400
 800806c:	017d7840 	.word	0x017d7840
 8008070:	00bb8000 	.word	0x00bb8000

08008074 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b088      	sub	sp, #32
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800807c:	2300      	movs	r3, #0
 800807e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8008080:	2300      	movs	r3, #0
 8008082:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8008084:	2300      	movs	r3, #0
 8008086:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d101      	bne.n	8008092 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e156      	b.n	8008340 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b00      	cmp	r3, #0
 800809c:	d106      	bne.n	80080ac <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f7f8 fd64 	bl	8000b74 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2202      	movs	r2, #2
 80080b0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fb4b 	bl	8008750 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d00c      	beq.n	80080dc <HAL_SAI_Init+0x68>
 80080c2:	2b02      	cmp	r3, #2
 80080c4:	d80d      	bhi.n	80080e2 <HAL_SAI_Init+0x6e>
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d002      	beq.n	80080d0 <HAL_SAI_Init+0x5c>
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d003      	beq.n	80080d6 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 80080ce:	e008      	b.n	80080e2 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80080d0:	2300      	movs	r3, #0
 80080d2:	61fb      	str	r3, [r7, #28]
      break;
 80080d4:	e006      	b.n	80080e4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80080d6:	2310      	movs	r3, #16
 80080d8:	61fb      	str	r3, [r7, #28]
      break;
 80080da:	e003      	b.n	80080e4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80080dc:	2320      	movs	r3, #32
 80080de:	61fb      	str	r3, [r7, #28]
      break;
 80080e0:	e000      	b.n	80080e4 <HAL_SAI_Init+0x70>
      break;
 80080e2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	2b03      	cmp	r3, #3
 80080ea:	d81e      	bhi.n	800812a <HAL_SAI_Init+0xb6>
 80080ec:	a201      	add	r2, pc, #4	; (adr r2, 80080f4 <HAL_SAI_Init+0x80>)
 80080ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f2:	bf00      	nop
 80080f4:	08008105 	.word	0x08008105
 80080f8:	0800810b 	.word	0x0800810b
 80080fc:	08008113 	.word	0x08008113
 8008100:	0800811b 	.word	0x0800811b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8008104:	2300      	movs	r3, #0
 8008106:	617b      	str	r3, [r7, #20]
    }
    break;
 8008108:	e010      	b.n	800812c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800810a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800810e:	617b      	str	r3, [r7, #20]
    }
    break;
 8008110:	e00c      	b.n	800812c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008112:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008116:	617b      	str	r3, [r7, #20]
    }
    break;
 8008118:	e008      	b.n	800812c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800811a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800811e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	f043 0301 	orr.w	r3, r3, #1
 8008126:	61fb      	str	r3, [r7, #28]
    }
    break;
 8008128:	e000      	b.n	800812c <HAL_SAI_Init+0xb8>
    default:
      break;
 800812a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a85      	ldr	r2, [pc, #532]	; (8008348 <HAL_SAI_Init+0x2d4>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d004      	beq.n	8008140 <HAL_SAI_Init+0xcc>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a84      	ldr	r2, [pc, #528]	; (800834c <HAL_SAI_Init+0x2d8>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d103      	bne.n	8008148 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8008140:	4a83      	ldr	r2, [pc, #524]	; (8008350 <HAL_SAI_Init+0x2dc>)
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	6013      	str	r3, [r2, #0]
 8008146:	e002      	b.n	800814e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008148:	4a82      	ldr	r2, [pc, #520]	; (8008354 <HAL_SAI_Init+0x2e0>)
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	69db      	ldr	r3, [r3, #28]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d04c      	beq.n	80081f0 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8008156:	2300      	movs	r3, #0
 8008158:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a7a      	ldr	r2, [pc, #488]	; (8008348 <HAL_SAI_Init+0x2d4>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d004      	beq.n	800816e <HAL_SAI_Init+0xfa>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a78      	ldr	r2, [pc, #480]	; (800834c <HAL_SAI_Init+0x2d8>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d104      	bne.n	8008178 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800816e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008172:	f7ff fe3f 	bl	8007df4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008176:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a76      	ldr	r2, [pc, #472]	; (8008358 <HAL_SAI_Init+0x2e4>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d004      	beq.n	800818c <HAL_SAI_Init+0x118>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a75      	ldr	r2, [pc, #468]	; (800835c <HAL_SAI_Init+0x2e8>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d104      	bne.n	8008196 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800818c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008190:	f7ff fe30 	bl	8007df4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008194:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8008196:	693a      	ldr	r2, [r7, #16]
 8008198:	4613      	mov	r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4413      	add	r3, r2
 800819e:	005b      	lsls	r3, r3, #1
 80081a0:	461a      	mov	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	69db      	ldr	r3, [r3, #28]
 80081a6:	025b      	lsls	r3, r3, #9
 80081a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ac:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	4a6b      	ldr	r2, [pc, #428]	; (8008360 <HAL_SAI_Init+0x2ec>)
 80081b2:	fba2 2303 	umull	r2, r3, r2, r3
 80081b6:	08da      	lsrs	r2, r3, #3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 80081bc:	68f9      	ldr	r1, [r7, #12]
 80081be:	4b68      	ldr	r3, [pc, #416]	; (8008360 <HAL_SAI_Init+0x2ec>)
 80081c0:	fba3 2301 	umull	r2, r3, r3, r1
 80081c4:	08da      	lsrs	r2, r3, #3
 80081c6:	4613      	mov	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	4413      	add	r3, r2
 80081cc:	005b      	lsls	r3, r3, #1
 80081ce:	1aca      	subs	r2, r1, r3
 80081d0:	2a08      	cmp	r2, #8
 80081d2:	d904      	bls.n	80081de <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a1b      	ldr	r3, [r3, #32]
 80081d8:	1c5a      	adds	r2, r3, #1
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e2:	2b04      	cmp	r3, #4
 80081e4:	d104      	bne.n	80081f0 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a1b      	ldr	r3, [r3, #32]
 80081ea:	085a      	lsrs	r2, r3, #1
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d003      	beq.n	8008200 <HAL_SAI_Init+0x18c>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d109      	bne.n	8008214 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008204:	2b01      	cmp	r3, #1
 8008206:	d101      	bne.n	800820c <HAL_SAI_Init+0x198>
 8008208:	2300      	movs	r3, #0
 800820a:	e001      	b.n	8008210 <HAL_SAI_Init+0x19c>
 800820c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008210:	61bb      	str	r3, [r7, #24]
 8008212:	e008      	b.n	8008226 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008218:	2b01      	cmp	r3, #1
 800821a:	d102      	bne.n	8008222 <HAL_SAI_Init+0x1ae>
 800821c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008220:	e000      	b.n	8008224 <HAL_SAI_Init+0x1b0>
 8008222:	2300      	movs	r3, #0
 8008224:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	6819      	ldr	r1, [r3, #0]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	4b4c      	ldr	r3, [pc, #304]	; (8008364 <HAL_SAI_Init+0x2f0>)
 8008232:	400b      	ands	r3, r1
 8008234:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	6819      	ldr	r1, [r3, #0]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685a      	ldr	r2, [r3, #4]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008244:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800824a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008250:	431a      	orrs	r2, r3
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800825e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800826a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a1b      	ldr	r3, [r3, #32]
 8008270:	051b      	lsls	r3, r3, #20
 8008272:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	430a      	orrs	r2, r1
 800827a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6859      	ldr	r1, [r3, #4]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	4b38      	ldr	r3, [pc, #224]	; (8008368 <HAL_SAI_Init+0x2f4>)
 8008288:	400b      	ands	r3, r1
 800828a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	6859      	ldr	r1, [r3, #4]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	699a      	ldr	r2, [r3, #24]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829a:	431a      	orrs	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a0:	431a      	orrs	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	430a      	orrs	r2, r1
 80082a8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	6899      	ldr	r1, [r3, #8]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	4b2d      	ldr	r3, [pc, #180]	; (800836c <HAL_SAI_Init+0x2f8>)
 80082b6:	400b      	ands	r3, r1
 80082b8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	6899      	ldr	r1, [r3, #8]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80082ca:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 80082d0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 80082d6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082dc:	3b01      	subs	r3, #1
 80082de:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80082e0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	430a      	orrs	r2, r1
 80082e8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68d9      	ldr	r1, [r3, #12]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	f24f 0320 	movw	r3, #61472	; 0xf020
 80082f8:	400b      	ands	r3, r1
 80082fa:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	68d9      	ldr	r1, [r3, #12]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800830a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008310:	041b      	lsls	r3, r3, #16
 8008312:	431a      	orrs	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008318:	3b01      	subs	r3, #1
 800831a:	021b      	lsls	r3, r3, #8
 800831c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	430a      	orrs	r2, r1
 8008324:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2201      	movs	r2, #1
 8008332:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3720      	adds	r7, #32
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	40015804 	.word	0x40015804
 800834c:	40015824 	.word	0x40015824
 8008350:	40015800 	.word	0x40015800
 8008354:	40015c00 	.word	0x40015c00
 8008358:	40015c04 	.word	0x40015c04
 800835c:	40015c24 	.word	0x40015c24
 8008360:	cccccccd 	.word	0xcccccccd
 8008364:	ff05c010 	.word	0xff05c010
 8008368:	ffff1ff0 	.word	0xffff1ff0
 800836c:	fff88000 	.word	0xfff88000

08008370 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d101      	bne.n	8008382 <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e027      	b.n	80083d2 <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2202      	movs	r2, #2
 8008386:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2200      	movs	r2, #0
 8008390:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f04f 32ff 	mov.w	r2, #4294967295
 800839a:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 f9d7 	bl	8008750 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	685a      	ldr	r2, [r3, #4]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f042 0208 	orr.w	r2, r2, #8
 80083b0:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f7f8 fc5e 	bl	8000c74 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3708      	adds	r7, #8
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <HAL_SAI_DMAPause>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAPause(SAI_HandleTypeDef *hsai)
{
 80083da:	b480      	push	{r7}
 80083dc:	b083      	sub	sp, #12
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsai);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d101      	bne.n	80083f0 <HAL_SAI_DMAPause+0x16>
 80083ec:	2302      	movs	r3, #2
 80083ee:	e010      	b.n	8008412 <HAL_SAI_DMAPause+0x38>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Pause the audio file playing by disabling the SAI DMA requests */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008406:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	370c      	adds	r7, #12
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr

0800841e <HAL_SAI_DMAResume>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAResume(SAI_HandleTypeDef *hsai)
{
 800841e:	b480      	push	{r7}
 8008420:	b083      	sub	sp, #12
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsai);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800842c:	2b01      	cmp	r3, #1
 800842e:	d101      	bne.n	8008434 <HAL_SAI_DMAResume+0x16>
 8008430:	2302      	movs	r3, #2
 8008432:	e01f      	b.n	8008474 <HAL_SAI_DMAResume+0x56>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Enable the SAI DMA requests */
  hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800844a:	601a      	str	r2, [r3, #0]

  /* If the SAI peripheral is still not enabled, enable it */
  if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008456:	2b00      	cmp	r3, #0
 8008458:	d107      	bne.n	800846a <HAL_SAI_DMAResume+0x4c>
  {
    /* Enable SAI peripheral */
    __HAL_SAI_ENABLE(hsai);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008468:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008488:	2300      	movs	r3, #0
 800848a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008492:	2b01      	cmp	r3, #1
 8008494:	d101      	bne.n	800849a <HAL_SAI_DMAStop+0x1a>
 8008496:	2302      	movs	r3, #2
 8008498:	e061      	b.n	800855e <HAL_SAI_DMAStop+0xde>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2201      	movs	r2, #1
 800849e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80084b0:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d01c      	beq.n	80084f4 <HAL_SAI_DMAStop+0x74>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	2b12      	cmp	r3, #18
 80084c4:	d116      	bne.n	80084f4 <HAL_SAI_DMAStop+0x74>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fb f9b8 	bl	8003840 <HAL_DMA_Abort>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00e      	beq.n	80084f4 <HAL_SAI_DMAStop+0x74>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084dc:	2b80      	cmp	r3, #128	; 0x80
 80084de:	d009      	beq.n	80084f4 <HAL_SAI_DMAStop+0x74>
      {
        status = HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084ea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d01c      	beq.n	8008536 <HAL_SAI_DMAStop+0xb6>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008502:	b2db      	uxtb	r3, r3
 8008504:	2b22      	cmp	r3, #34	; 0x22
 8008506:	d116      	bne.n	8008536 <HAL_SAI_DMAStop+0xb6>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800850c:	4618      	mov	r0, r3
 800850e:	f7fb f997 	bl	8003840 <HAL_DMA_Abort>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00e      	beq.n	8008536 <HAL_SAI_DMAStop+0xb6>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800851c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800851e:	2b80      	cmp	r3, #128	; 0x80
 8008520:	d009      	beq.n	8008536 <HAL_SAI_DMAStop+0xb6>
      {
        status = HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800852c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
  }

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f90a 	bl	8008750 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	685a      	ldr	r2, [r3, #4]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f042 0208 	orr.w	r2, r2, #8
 800854a:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2201      	movs	r2, #1
 8008550:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 800855c:	7bfb      	ldrb	r3, [r7, #15]
}
 800855e:	4618      	mov	r0, r3
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
	...

08008568 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b086      	sub	sp, #24
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	4613      	mov	r3, r2
 8008574:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8008576:	f7fa feb5 	bl	80032e4 <HAL_GetTick>
 800857a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d002      	beq.n	8008588 <HAL_SAI_Transmit_DMA+0x20>
 8008582:	88fb      	ldrh	r3, [r7, #6]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d101      	bne.n	800858c <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e093      	b.n	80086b4 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008592:	b2db      	uxtb	r3, r3
 8008594:	2b01      	cmp	r3, #1
 8008596:	f040 808c 	bne.w	80086b2 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d101      	bne.n	80085a8 <HAL_SAI_Transmit_DMA+0x40>
 80085a4:	2302      	movs	r3, #2
 80085a6:	e085      	b.n	80086b4 <HAL_SAI_Transmit_DMA+0x14c>
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	88fa      	ldrh	r2, [r7, #6]
 80085ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	88fa      	ldrh	r2, [r7, #6]
 80085c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2212      	movs	r2, #18
 80085d2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085da:	4a38      	ldr	r2, [pc, #224]	; (80086bc <HAL_SAI_Transmit_DMA+0x154>)
 80085dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085e2:	4a37      	ldr	r2, [pc, #220]	; (80086c0 <HAL_SAI_Transmit_DMA+0x158>)
 80085e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085ea:	4a36      	ldr	r2, [pc, #216]	; (80086c4 <HAL_SAI_Transmit_DMA+0x15c>)
 80085ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085f2:	2200      	movs	r2, #0
 80085f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085fe:	4619      	mov	r1, r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	331c      	adds	r3, #28
 8008606:	461a      	mov	r2, r3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800860e:	f7fb f8b7 	bl	8003780 <HAL_DMA_Start_IT>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d005      	beq.n	8008624 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2200      	movs	r2, #0
 800861c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	e047      	b.n	80086b4 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008624:	2100      	movs	r1, #0
 8008626:	68f8      	ldr	r0, [r7, #12]
 8008628:	f000 f85c 	bl	80086e4 <SAI_InterruptFlag>
 800862c:	4601      	mov	r1, r0
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	691a      	ldr	r2, [r3, #16]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	430a      	orrs	r2, r1
 800863a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800864a:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800864c:	e015      	b.n	800867a <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800864e:	f7fa fe49 	bl	80032e4 <HAL_GetTick>
 8008652:	4602      	mov	r2, r0
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800865c:	d90d      	bls.n	800867a <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008664:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008676:	2303      	movs	r3, #3
 8008678:	e01c      	b.n	80086b4 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	695b      	ldr	r3, [r3, #20]
 8008680:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008684:	2b00      	cmp	r3, #0
 8008686:	d0e2      	beq.n	800864e <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008692:	2b00      	cmp	r3, #0
 8008694:	d107      	bne.n	80086a6 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80086a4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80086ae:	2300      	movs	r3, #0
 80086b0:	e000      	b.n	80086b4 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 80086b2:	2302      	movs	r3, #2
  }
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3718      	adds	r7, #24
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	08008821 	.word	0x08008821
 80086c0:	080087c1 	.word	0x080087c1
 80086c4:	0800883d 	.word	0x0800883d

080086c8 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  return hsai->State;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80086d6:	b2db      	uxtb	r3, r3
}
 80086d8:	4618      	mov	r0, r3
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d103      	bne.n	8008700 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f043 0308 	orr.w	r3, r3, #8
 80086fe:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008704:	2b08      	cmp	r3, #8
 8008706:	d10b      	bne.n	8008720 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800870c:	2b03      	cmp	r3, #3
 800870e:	d003      	beq.n	8008718 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d103      	bne.n	8008720 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f043 0310 	orr.w	r3, r3, #16
 800871e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	2b03      	cmp	r3, #3
 8008726:	d003      	beq.n	8008730 <SAI_InterruptFlag+0x4c>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	2b02      	cmp	r3, #2
 800872e:	d104      	bne.n	800873a <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008736:	60fb      	str	r3, [r7, #12]
 8008738:	e003      	b.n	8008742 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f043 0304 	orr.w	r3, r3, #4
 8008740:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8008742:	68fb      	ldr	r3, [r7, #12]
}
 8008744:	4618      	mov	r0, r3
 8008746:	3714      	adds	r7, #20
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008750:	b480      	push	{r7}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8008758:	4b17      	ldr	r3, [pc, #92]	; (80087b8 <SAI_Disable+0x68>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a17      	ldr	r2, [pc, #92]	; (80087bc <SAI_Disable+0x6c>)
 800875e:	fba2 2303 	umull	r2, r3, r2, r3
 8008762:	0b1b      	lsrs	r3, r3, #12
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008768:	2300      	movs	r3, #0
 800876a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800877a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	1e5a      	subs	r2, r3, #1
 8008780:	60fa      	str	r2, [r7, #12]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10a      	bne.n	800879c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800878c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008796:	2303      	movs	r3, #3
 8008798:	72fb      	strb	r3, [r7, #11]
      break;
 800879a:	e006      	b.n	80087aa <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1e8      	bne.n	800877c <SAI_Disable+0x2c>

  return status;
 80087aa:	7afb      	ldrb	r3, [r7, #11]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3714      	adds	r7, #20
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr
 80087b8:	20000000 	.word	0x20000000
 80087bc:	95cbec1b 	.word	0x95cbec1b

080087c0 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087cc:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	69db      	ldr	r3, [r3, #28]
 80087d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087d6:	d01c      	beq.n	8008812 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80087ee:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80087f0:	2100      	movs	r1, #0
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f7ff ff76 	bl	80086e4 <SAI_InterruptFlag>
 80087f8:	4603      	mov	r3, r0
 80087fa:	43d9      	mvns	r1, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	691a      	ldr	r2, [r3, #16]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	400a      	ands	r2, r1
 8008808:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2201      	movs	r2, #1
 800880e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	f7fa fb2e 	bl	8002e74 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8008818:	bf00      	nop
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f7fa fb2a 	bl	8002e88 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8008834:	bf00      	nop
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008848:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008850:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800885e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008860:	2b01      	cmp	r3, #1
 8008862:	d004      	beq.n	800886e <SAI_DMAError+0x32>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800886a:	2b01      	cmp	r3, #1
 800886c:	d112      	bne.n	8008894 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800887c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f7ff ff66 	bl	8008750 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2200      	movs	r2, #0
 8008890:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f7fa fb01 	bl	8002e9c <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800889a:	bf00      	nop
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
	...

080088a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80088a4:	b084      	sub	sp, #16
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b084      	sub	sp, #16
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	f107 001c 	add.w	r0, r7, #28
 80088b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80088b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d120      	bne.n	80088fe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	68da      	ldr	r2, [r3, #12]
 80088cc:	4b20      	ldr	r3, [pc, #128]	; (8008950 <USB_CoreInit+0xac>)
 80088ce:	4013      	ands	r3, r2
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80088e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d105      	bne.n	80088f2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 f9d8 	bl	8008ca8 <USB_CoreReset>
 80088f8:	4603      	mov	r3, r0
 80088fa:	73fb      	strb	r3, [r7, #15]
 80088fc:	e010      	b.n	8008920 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 f9cc 	bl	8008ca8 <USB_CoreReset>
 8008910:	4603      	mov	r3, r0
 8008912:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008918:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008922:	2b01      	cmp	r3, #1
 8008924:	d10b      	bne.n	800893e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	f043 0206 	orr.w	r2, r3, #6
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	f043 0220 	orr.w	r2, r3, #32
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800893e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008940:	4618      	mov	r0, r3
 8008942:	3710      	adds	r7, #16
 8008944:	46bd      	mov	sp, r7
 8008946:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800894a:	b004      	add	sp, #16
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	ffbdffbf 	.word	0xffbdffbf

08008954 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	f043 0201 	orr.w	r2, r3, #1
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	370c      	adds	r7, #12
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008976:	b480      	push	{r7}
 8008978:	b083      	sub	sp, #12
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	f023 0201 	bic.w	r2, r3, #1
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	460b      	mov	r3, r1
 80089a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80089a4:	2300      	movs	r3, #0
 80089a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80089b4:	78fb      	ldrb	r3, [r7, #3]
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d115      	bne.n	80089e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80089c6:	2001      	movs	r0, #1
 80089c8:	f7fa fc98 	bl	80032fc <HAL_Delay>
      ms++;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	3301      	adds	r3, #1
 80089d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 f95a 	bl	8008c8c <USB_GetMode>
 80089d8:	4603      	mov	r3, r0
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d01e      	beq.n	8008a1c <USB_SetCurrentMode+0x84>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2b31      	cmp	r3, #49	; 0x31
 80089e2:	d9f0      	bls.n	80089c6 <USB_SetCurrentMode+0x2e>
 80089e4:	e01a      	b.n	8008a1c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80089e6:	78fb      	ldrb	r3, [r7, #3]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d115      	bne.n	8008a18 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80089f8:	2001      	movs	r0, #1
 80089fa:	f7fa fc7f 	bl	80032fc <HAL_Delay>
      ms++;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	3301      	adds	r3, #1
 8008a02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f941 	bl	8008c8c <USB_GetMode>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d005      	beq.n	8008a1c <USB_SetCurrentMode+0x84>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2b31      	cmp	r3, #49	; 0x31
 8008a14:	d9f0      	bls.n	80089f8 <USB_SetCurrentMode+0x60>
 8008a16:	e001      	b.n	8008a1c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e005      	b.n	8008a28 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2b32      	cmp	r3, #50	; 0x32
 8008a20:	d101      	bne.n	8008a26 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e000      	b.n	8008a28 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	3301      	adds	r3, #1
 8008a42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	4a13      	ldr	r2, [pc, #76]	; (8008a94 <USB_FlushTxFifo+0x64>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d901      	bls.n	8008a50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	e01b      	b.n	8008a88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	691b      	ldr	r3, [r3, #16]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	daf2      	bge.n	8008a3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	019b      	lsls	r3, r3, #6
 8008a60:	f043 0220 	orr.w	r2, r3, #32
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	4a08      	ldr	r2, [pc, #32]	; (8008a94 <USB_FlushTxFifo+0x64>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d901      	bls.n	8008a7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e006      	b.n	8008a88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	f003 0320 	and.w	r3, r3, #32
 8008a82:	2b20      	cmp	r3, #32
 8008a84:	d0f0      	beq.n	8008a68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3714      	adds	r7, #20
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr
 8008a94:	00030d40 	.word	0x00030d40

08008a98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	4a11      	ldr	r2, [pc, #68]	; (8008af4 <USB_FlushRxFifo+0x5c>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d901      	bls.n	8008ab6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e018      	b.n	8008ae8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	daf2      	bge.n	8008aa4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2210      	movs	r2, #16
 8008ac6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	3301      	adds	r3, #1
 8008acc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	4a08      	ldr	r2, [pc, #32]	; (8008af4 <USB_FlushRxFifo+0x5c>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d901      	bls.n	8008ada <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	e006      	b.n	8008ae8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	f003 0310 	and.w	r3, r3, #16
 8008ae2:	2b10      	cmp	r3, #16
 8008ae4:	d0f0      	beq.n	8008ac8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3714      	adds	r7, #20
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr
 8008af4:	00030d40 	.word	0x00030d40

08008af8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b089      	sub	sp, #36	; 0x24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	4611      	mov	r1, r2
 8008b04:	461a      	mov	r2, r3
 8008b06:	460b      	mov	r3, r1
 8008b08:	71fb      	strb	r3, [r7, #7]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008b16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d123      	bne.n	8008b66 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008b1e:	88bb      	ldrh	r3, [r7, #4]
 8008b20:	3303      	adds	r3, #3
 8008b22:	089b      	lsrs	r3, r3, #2
 8008b24:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008b26:	2300      	movs	r3, #0
 8008b28:	61bb      	str	r3, [r7, #24]
 8008b2a:	e018      	b.n	8008b5e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008b2c:	79fb      	ldrb	r3, [r7, #7]
 8008b2e:	031a      	lsls	r2, r3, #12
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	4413      	add	r3, r2
 8008b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b38:	461a      	mov	r2, r3
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	3301      	adds	r3, #1
 8008b44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	3301      	adds	r3, #1
 8008b56:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	61bb      	str	r3, [r7, #24]
 8008b5e:	69ba      	ldr	r2, [r7, #24]
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d3e2      	bcc.n	8008b2c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3724      	adds	r7, #36	; 0x24
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b08b      	sub	sp, #44	; 0x2c
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008b8a:	88fb      	ldrh	r3, [r7, #6]
 8008b8c:	089b      	lsrs	r3, r3, #2
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008b92:	88fb      	ldrh	r3, [r7, #6]
 8008b94:	f003 0303 	and.w	r3, r3, #3
 8008b98:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	623b      	str	r3, [r7, #32]
 8008b9e:	e014      	b.n	8008bca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008baa:	601a      	str	r2, [r3, #0]
    pDest++;
 8008bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bae:	3301      	adds	r3, #1
 8008bb0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	3301      	adds	r3, #1
 8008bbc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008bc4:	6a3b      	ldr	r3, [r7, #32]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	623b      	str	r3, [r7, #32]
 8008bca:	6a3a      	ldr	r2, [r7, #32]
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d3e6      	bcc.n	8008ba0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008bd2:	8bfb      	ldrh	r3, [r7, #30]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d01e      	beq.n	8008c16 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008be2:	461a      	mov	r2, r3
 8008be4:	f107 0310 	add.w	r3, r7, #16
 8008be8:	6812      	ldr	r2, [r2, #0]
 8008bea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	6a3b      	ldr	r3, [r7, #32]
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	00db      	lsls	r3, r3, #3
 8008bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8008bf8:	b2da      	uxtb	r2, r3
 8008bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfc:	701a      	strb	r2, [r3, #0]
      i++;
 8008bfe:	6a3b      	ldr	r3, [r7, #32]
 8008c00:	3301      	adds	r3, #1
 8008c02:	623b      	str	r3, [r7, #32]
      pDest++;
 8008c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c06:	3301      	adds	r3, #1
 8008c08:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008c0a:	8bfb      	ldrh	r3, [r7, #30]
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008c10:	8bfb      	ldrh	r3, [r7, #30]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1ea      	bne.n	8008bec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	372c      	adds	r7, #44	; 0x2c
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	695b      	ldr	r3, [r3, #20]
 8008c30:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	699b      	ldr	r3, [r3, #24]
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	4013      	ands	r3, r2
 8008c3a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008c4a:	b480      	push	{r7}
 8008c4c:	b085      	sub	sp, #20
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
 8008c52:	460b      	mov	r3, r1
 8008c54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008c5a:	78fb      	ldrb	r3, [r7, #3]
 8008c5c:	015a      	lsls	r2, r3, #5
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	4413      	add	r3, r2
 8008c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008c6a:	78fb      	ldrb	r3, [r7, #3]
 8008c6c:	015a      	lsls	r2, r3, #5
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	4413      	add	r3, r2
 8008c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008c7e:	68bb      	ldr	r3, [r7, #8]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	695b      	ldr	r3, [r3, #20]
 8008c98:	f003 0301 	and.w	r3, r3, #1
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	4a13      	ldr	r2, [pc, #76]	; (8008d0c <USB_CoreReset+0x64>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d901      	bls.n	8008cc6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008cc2:	2303      	movs	r3, #3
 8008cc4:	e01b      	b.n	8008cfe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	daf2      	bge.n	8008cb4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	f043 0201 	orr.w	r2, r3, #1
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	4a09      	ldr	r2, [pc, #36]	; (8008d0c <USB_CoreReset+0x64>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d901      	bls.n	8008cf0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008cec:	2303      	movs	r3, #3
 8008cee:	e006      	b.n	8008cfe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	f003 0301 	and.w	r3, r3, #1
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d0f0      	beq.n	8008cde <USB_CoreReset+0x36>

  return HAL_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3714      	adds	r7, #20
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	00030d40 	.word	0x00030d40

08008d10 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d10:	b084      	sub	sp, #16
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b086      	sub	sp, #24
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008d1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008d22:	2300      	movs	r3, #0
 8008d24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d30:	461a      	mov	r2, r3
 8008d32:	2300      	movs	r3, #0
 8008d34:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d3a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d018      	beq.n	8008d80 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d10a      	bne.n	8008d6a <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d62:	f043 0304 	orr.w	r3, r3, #4
 8008d66:	6013      	str	r3, [r2, #0]
 8008d68:	e014      	b.n	8008d94 <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d78:	f023 0304 	bic.w	r3, r3, #4
 8008d7c:	6013      	str	r3, [r2, #0]
 8008d7e:	e009      	b.n	8008d94 <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d8e:	f023 0304 	bic.w	r3, r3, #4
 8008d92:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d94:	2110      	movs	r1, #16
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7ff fe4a 	bl	8008a30 <USB_FlushTxFifo>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d001      	beq.n	8008da6 <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f7ff fe76 	bl	8008a98 <USB_FlushRxFifo>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d001      	beq.n	8008db6 <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008db6:	2300      	movs	r3, #0
 8008db8:	613b      	str	r3, [r7, #16]
 8008dba:	e015      	b.n	8008de8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	015a      	lsls	r2, r3, #5
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dc8:	461a      	mov	r2, r3
 8008dca:	f04f 33ff 	mov.w	r3, #4294967295
 8008dce:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	015a      	lsls	r2, r3, #5
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ddc:	461a      	mov	r2, r3
 8008dde:	2300      	movs	r3, #0
 8008de0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	3301      	adds	r3, #1
 8008de6:	613b      	str	r3, [r7, #16]
 8008de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dea:	693a      	ldr	r2, [r7, #16]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d3e5      	bcc.n	8008dbc <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f04f 32ff 	mov.w	r2, #4294967295
 8008dfc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00b      	beq.n	8008e22 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e10:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a13      	ldr	r2, [pc, #76]	; (8008e64 <USB_HostInit+0x154>)
 8008e16:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a13      	ldr	r2, [pc, #76]	; (8008e68 <USB_HostInit+0x158>)
 8008e1c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008e20:	e009      	b.n	8008e36 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2280      	movs	r2, #128	; 0x80
 8008e26:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a10      	ldr	r2, [pc, #64]	; (8008e6c <USB_HostInit+0x15c>)
 8008e2c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a0f      	ldr	r2, [pc, #60]	; (8008e70 <USB_HostInit+0x160>)
 8008e32:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d105      	bne.n	8008e48 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	699b      	ldr	r3, [r3, #24]
 8008e40:	f043 0210 	orr.w	r2, r3, #16
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	699a      	ldr	r2, [r3, #24]
 8008e4c:	4b09      	ldr	r3, [pc, #36]	; (8008e74 <USB_HostInit+0x164>)
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3718      	adds	r7, #24
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e60:	b004      	add	sp, #16
 8008e62:	4770      	bx	lr
 8008e64:	01000200 	.word	0x01000200
 8008e68:	00e00300 	.word	0x00e00300
 8008e6c:	00600080 	.word	0x00600080
 8008e70:	004000e0 	.word	0x004000e0
 8008e74:	a3200008 	.word	0xa3200008

08008e78 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	460b      	mov	r3, r1
 8008e82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e96:	f023 0303 	bic.w	r3, r3, #3
 8008e9a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	78fb      	ldrb	r3, [r7, #3]
 8008ea6:	f003 0303 	and.w	r3, r3, #3
 8008eaa:	68f9      	ldr	r1, [r7, #12]
 8008eac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008eb4:	78fb      	ldrb	r3, [r7, #3]
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d107      	bne.n	8008eca <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008ec6:	6053      	str	r3, [r2, #4]
 8008ec8:	e009      	b.n	8008ede <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008eca:	78fb      	ldrb	r3, [r7, #3]
 8008ecc:	2b02      	cmp	r3, #2
 8008ece:	d106      	bne.n	8008ede <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	f241 7370 	movw	r3, #6000	; 0x1770
 8008edc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3714      	adds	r7, #20
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008f0c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f1a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008f1c:	2064      	movs	r0, #100	; 0x64
 8008f1e:	f7fa f9ed 	bl	80032fc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008f2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f2e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008f30:	200a      	movs	r0, #10
 8008f32:	f7fa f9e3 	bl	80032fc <HAL_Delay>

  return HAL_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b085      	sub	sp, #20
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	460b      	mov	r3, r1
 8008f4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008f50:	2300      	movs	r3, #0
 8008f52:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008f64:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d109      	bne.n	8008f84 <USB_DriveVbus+0x44>
 8008f70:	78fb      	ldrb	r3, [r7, #3]
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d106      	bne.n	8008f84 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008f7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008f82:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f8e:	d109      	bne.n	8008fa4 <USB_DriveVbus+0x64>
 8008f90:	78fb      	ldrb	r3, [r7, #3]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d106      	bne.n	8008fa4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008f9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fa2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3714      	adds	r7, #20
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr

08008fb2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008fb2:	b480      	push	{r7}
 8008fb4:	b085      	sub	sp, #20
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	0c5b      	lsrs	r3, r3, #17
 8008fd0:	f003 0303 	and.w	r3, r3, #3
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3714      	adds	r7, #20
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	b29b      	uxth	r3, r3
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3714      	adds	r7, #20
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
	...

08009004 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b088      	sub	sp, #32
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	4608      	mov	r0, r1
 800900e:	4611      	mov	r1, r2
 8009010:	461a      	mov	r2, r3
 8009012:	4603      	mov	r3, r0
 8009014:	70fb      	strb	r3, [r7, #3]
 8009016:	460b      	mov	r3, r1
 8009018:	70bb      	strb	r3, [r7, #2]
 800901a:	4613      	mov	r3, r2
 800901c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800901e:	2300      	movs	r3, #0
 8009020:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009026:	78fb      	ldrb	r3, [r7, #3]
 8009028:	015a      	lsls	r2, r3, #5
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	4413      	add	r3, r2
 800902e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009032:	461a      	mov	r2, r3
 8009034:	f04f 33ff 	mov.w	r3, #4294967295
 8009038:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800903a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800903e:	2b03      	cmp	r3, #3
 8009040:	d87e      	bhi.n	8009140 <USB_HC_Init+0x13c>
 8009042:	a201      	add	r2, pc, #4	; (adr r2, 8009048 <USB_HC_Init+0x44>)
 8009044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009048:	08009059 	.word	0x08009059
 800904c:	08009103 	.word	0x08009103
 8009050:	08009059 	.word	0x08009059
 8009054:	080090c5 	.word	0x080090c5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009058:	78fb      	ldrb	r3, [r7, #3]
 800905a:	015a      	lsls	r2, r3, #5
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	4413      	add	r3, r2
 8009060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009064:	461a      	mov	r2, r3
 8009066:	f240 439d 	movw	r3, #1181	; 0x49d
 800906a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800906c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009070:	2b00      	cmp	r3, #0
 8009072:	da10      	bge.n	8009096 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009074:	78fb      	ldrb	r3, [r7, #3]
 8009076:	015a      	lsls	r2, r3, #5
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	4413      	add	r3, r2
 800907c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	78fa      	ldrb	r2, [r7, #3]
 8009084:	0151      	lsls	r1, r2, #5
 8009086:	693a      	ldr	r2, [r7, #16]
 8009088:	440a      	add	r2, r1
 800908a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800908e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009092:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009094:	e057      	b.n	8009146 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800909a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d051      	beq.n	8009146 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80090a2:	78fb      	ldrb	r3, [r7, #3]
 80090a4:	015a      	lsls	r2, r3, #5
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	4413      	add	r3, r2
 80090aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	78fa      	ldrb	r2, [r7, #3]
 80090b2:	0151      	lsls	r1, r2, #5
 80090b4:	693a      	ldr	r2, [r7, #16]
 80090b6:	440a      	add	r2, r1
 80090b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80090c0:	60d3      	str	r3, [r2, #12]
      break;
 80090c2:	e040      	b.n	8009146 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80090c4:	78fb      	ldrb	r3, [r7, #3]
 80090c6:	015a      	lsls	r2, r3, #5
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	4413      	add	r3, r2
 80090cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090d0:	461a      	mov	r2, r3
 80090d2:	f240 639d 	movw	r3, #1693	; 0x69d
 80090d6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80090d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	da34      	bge.n	800914a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80090e0:	78fb      	ldrb	r3, [r7, #3]
 80090e2:	015a      	lsls	r2, r3, #5
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	4413      	add	r3, r2
 80090e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	78fa      	ldrb	r2, [r7, #3]
 80090f0:	0151      	lsls	r1, r2, #5
 80090f2:	693a      	ldr	r2, [r7, #16]
 80090f4:	440a      	add	r2, r1
 80090f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090fe:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009100:	e023      	b.n	800914a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009102:	78fb      	ldrb	r3, [r7, #3]
 8009104:	015a      	lsls	r2, r3, #5
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	4413      	add	r3, r2
 800910a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800910e:	461a      	mov	r2, r3
 8009110:	f240 2325 	movw	r3, #549	; 0x225
 8009114:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009116:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800911a:	2b00      	cmp	r3, #0
 800911c:	da17      	bge.n	800914e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800911e:	78fb      	ldrb	r3, [r7, #3]
 8009120:	015a      	lsls	r2, r3, #5
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	4413      	add	r3, r2
 8009126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	78fa      	ldrb	r2, [r7, #3]
 800912e:	0151      	lsls	r1, r2, #5
 8009130:	693a      	ldr	r2, [r7, #16]
 8009132:	440a      	add	r2, r1
 8009134:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009138:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800913c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800913e:	e006      	b.n	800914e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	77fb      	strb	r3, [r7, #31]
      break;
 8009144:	e004      	b.n	8009150 <USB_HC_Init+0x14c>
      break;
 8009146:	bf00      	nop
 8009148:	e002      	b.n	8009150 <USB_HC_Init+0x14c>
      break;
 800914a:	bf00      	nop
 800914c:	e000      	b.n	8009150 <USB_HC_Init+0x14c>
      break;
 800914e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009150:	78fb      	ldrb	r3, [r7, #3]
 8009152:	015a      	lsls	r2, r3, #5
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	4413      	add	r3, r2
 8009158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	78fa      	ldrb	r2, [r7, #3]
 8009160:	0151      	lsls	r1, r2, #5
 8009162:	693a      	ldr	r2, [r7, #16]
 8009164:	440a      	add	r2, r1
 8009166:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800916a:	f043 0302 	orr.w	r3, r3, #2
 800916e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009176:	699a      	ldr	r2, [r3, #24]
 8009178:	78fb      	ldrb	r3, [r7, #3]
 800917a:	f003 030f 	and.w	r3, r3, #15
 800917e:	2101      	movs	r1, #1
 8009180:	fa01 f303 	lsl.w	r3, r1, r3
 8009184:	6939      	ldr	r1, [r7, #16]
 8009186:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800918a:	4313      	orrs	r3, r2
 800918c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	699b      	ldr	r3, [r3, #24]
 8009192:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800919a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	da03      	bge.n	80091aa <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80091a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091a6:	61bb      	str	r3, [r7, #24]
 80091a8:	e001      	b.n	80091ae <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80091aa:	2300      	movs	r3, #0
 80091ac:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f7ff feff 	bl	8008fb2 <USB_GetHostSpeed>
 80091b4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80091b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	d106      	bne.n	80091cc <USB_HC_Init+0x1c8>
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	d003      	beq.n	80091cc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80091c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80091c8:	617b      	str	r3, [r7, #20]
 80091ca:	e001      	b.n	80091d0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80091cc:	2300      	movs	r3, #0
 80091ce:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80091d0:	787b      	ldrb	r3, [r7, #1]
 80091d2:	059b      	lsls	r3, r3, #22
 80091d4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80091d8:	78bb      	ldrb	r3, [r7, #2]
 80091da:	02db      	lsls	r3, r3, #11
 80091dc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80091e0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80091e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80091e6:	049b      	lsls	r3, r3, #18
 80091e8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80091ec:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80091ee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80091f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80091f4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80091fa:	78fb      	ldrb	r3, [r7, #3]
 80091fc:	0159      	lsls	r1, r3, #5
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	440b      	add	r3, r1
 8009202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009206:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800920c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800920e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009212:	2b03      	cmp	r3, #3
 8009214:	d003      	beq.n	800921e <USB_HC_Init+0x21a>
 8009216:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800921a:	2b01      	cmp	r3, #1
 800921c:	d10f      	bne.n	800923e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800921e:	78fb      	ldrb	r3, [r7, #3]
 8009220:	015a      	lsls	r2, r3, #5
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	4413      	add	r3, r2
 8009226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	78fa      	ldrb	r2, [r7, #3]
 800922e:	0151      	lsls	r1, r2, #5
 8009230:	693a      	ldr	r2, [r7, #16]
 8009232:	440a      	add	r2, r1
 8009234:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009238:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800923c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800923e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009240:	4618      	mov	r0, r3
 8009242:	3720      	adds	r7, #32
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b08c      	sub	sp, #48	; 0x30
 800924c:	af02      	add	r7, sp, #8
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	4613      	mov	r3, r2
 8009254:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	785b      	ldrb	r3, [r3, #1]
 800925e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009264:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800926a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800926e:	2b00      	cmp	r3, #0
 8009270:	d02d      	beq.n	80092ce <USB_HC_StartXfer+0x86>
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	791b      	ldrb	r3, [r3, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d129      	bne.n	80092ce <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800927a:	79fb      	ldrb	r3, [r7, #7]
 800927c:	2b01      	cmp	r3, #1
 800927e:	d117      	bne.n	80092b0 <USB_HC_StartXfer+0x68>
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	79db      	ldrb	r3, [r3, #7]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d003      	beq.n	8009290 <USB_HC_StartXfer+0x48>
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	79db      	ldrb	r3, [r3, #7]
 800928c:	2b02      	cmp	r3, #2
 800928e:	d10f      	bne.n	80092b0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	015a      	lsls	r2, r3, #5
 8009294:	6a3b      	ldr	r3, [r7, #32]
 8009296:	4413      	add	r3, r2
 8009298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	69fa      	ldr	r2, [r7, #28]
 80092a0:	0151      	lsls	r1, r2, #5
 80092a2:	6a3a      	ldr	r2, [r7, #32]
 80092a4:	440a      	add	r2, r1
 80092a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ae:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80092b0:	79fb      	ldrb	r3, [r7, #7]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10b      	bne.n	80092ce <USB_HC_StartXfer+0x86>
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	795b      	ldrb	r3, [r3, #5]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d107      	bne.n	80092ce <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	785b      	ldrb	r3, [r3, #1]
 80092c2:	4619      	mov	r1, r3
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f000 fa0f 	bl	80096e8 <USB_DoPing>
      return HAL_OK;
 80092ca:	2300      	movs	r3, #0
 80092cc:	e0f8      	b.n	80094c0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	695b      	ldr	r3, [r3, #20]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d018      	beq.n	8009308 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	695b      	ldr	r3, [r3, #20]
 80092da:	68ba      	ldr	r2, [r7, #8]
 80092dc:	8912      	ldrh	r2, [r2, #8]
 80092de:	4413      	add	r3, r2
 80092e0:	3b01      	subs	r3, #1
 80092e2:	68ba      	ldr	r2, [r7, #8]
 80092e4:	8912      	ldrh	r2, [r2, #8]
 80092e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80092ea:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80092ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80092ee:	8b7b      	ldrh	r3, [r7, #26]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d90b      	bls.n	800930c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80092f4:	8b7b      	ldrh	r3, [r7, #26]
 80092f6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80092f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80092fa:	68ba      	ldr	r2, [r7, #8]
 80092fc:	8912      	ldrh	r2, [r2, #8]
 80092fe:	fb03 f202 	mul.w	r2, r3, r2
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	611a      	str	r2, [r3, #16]
 8009306:	e001      	b.n	800930c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009308:	2301      	movs	r3, #1
 800930a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	78db      	ldrb	r3, [r3, #3]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d007      	beq.n	8009324 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009314:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009316:	68ba      	ldr	r2, [r7, #8]
 8009318:	8912      	ldrh	r2, [r2, #8]
 800931a:	fb03 f202 	mul.w	r2, r3, r2
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	611a      	str	r2, [r3, #16]
 8009322:	e003      	b.n	800932c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	695a      	ldr	r2, [r3, #20]
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009334:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009336:	04d9      	lsls	r1, r3, #19
 8009338:	4b63      	ldr	r3, [pc, #396]	; (80094c8 <USB_HC_StartXfer+0x280>)
 800933a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800933c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	7a9b      	ldrb	r3, [r3, #10]
 8009342:	075b      	lsls	r3, r3, #29
 8009344:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009348:	69f9      	ldr	r1, [r7, #28]
 800934a:	0148      	lsls	r0, r1, #5
 800934c:	6a39      	ldr	r1, [r7, #32]
 800934e:	4401      	add	r1, r0
 8009350:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009354:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009356:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009358:	79fb      	ldrb	r3, [r7, #7]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d009      	beq.n	8009372 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	68d9      	ldr	r1, [r3, #12]
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	015a      	lsls	r2, r3, #5
 8009366:	6a3b      	ldr	r3, [r7, #32]
 8009368:	4413      	add	r3, r2
 800936a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800936e:	460a      	mov	r2, r1
 8009370:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009372:	6a3b      	ldr	r3, [r7, #32]
 8009374:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	f003 0301 	and.w	r3, r3, #1
 800937e:	2b00      	cmp	r3, #0
 8009380:	bf0c      	ite	eq
 8009382:	2301      	moveq	r3, #1
 8009384:	2300      	movne	r3, #0
 8009386:	b2db      	uxtb	r3, r3
 8009388:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800938a:	69fb      	ldr	r3, [r7, #28]
 800938c:	015a      	lsls	r2, r3, #5
 800938e:	6a3b      	ldr	r3, [r7, #32]
 8009390:	4413      	add	r3, r2
 8009392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	69fa      	ldr	r2, [r7, #28]
 800939a:	0151      	lsls	r1, r2, #5
 800939c:	6a3a      	ldr	r2, [r7, #32]
 800939e:	440a      	add	r2, r1
 80093a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80093a8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	015a      	lsls	r2, r3, #5
 80093ae:	6a3b      	ldr	r3, [r7, #32]
 80093b0:	4413      	add	r3, r2
 80093b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	7e7b      	ldrb	r3, [r7, #25]
 80093ba:	075b      	lsls	r3, r3, #29
 80093bc:	69f9      	ldr	r1, [r7, #28]
 80093be:	0148      	lsls	r0, r1, #5
 80093c0:	6a39      	ldr	r1, [r7, #32]
 80093c2:	4401      	add	r1, r0
 80093c4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80093c8:	4313      	orrs	r3, r2
 80093ca:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	015a      	lsls	r2, r3, #5
 80093d0:	6a3b      	ldr	r3, [r7, #32]
 80093d2:	4413      	add	r3, r2
 80093d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80093e2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	78db      	ldrb	r3, [r3, #3]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d004      	beq.n	80093f6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093f2:	613b      	str	r3, [r7, #16]
 80093f4:	e003      	b.n	80093fe <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80093fc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009404:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	015a      	lsls	r2, r3, #5
 800940a:	6a3b      	ldr	r3, [r7, #32]
 800940c:	4413      	add	r3, r2
 800940e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009412:	461a      	mov	r2, r3
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009418:	79fb      	ldrb	r3, [r7, #7]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d001      	beq.n	8009422 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800941e:	2300      	movs	r3, #0
 8009420:	e04e      	b.n	80094c0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	78db      	ldrb	r3, [r3, #3]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d149      	bne.n	80094be <USB_HC_StartXfer+0x276>
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	695b      	ldr	r3, [r3, #20]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d045      	beq.n	80094be <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	79db      	ldrb	r3, [r3, #7]
 8009436:	2b03      	cmp	r3, #3
 8009438:	d830      	bhi.n	800949c <USB_HC_StartXfer+0x254>
 800943a:	a201      	add	r2, pc, #4	; (adr r2, 8009440 <USB_HC_StartXfer+0x1f8>)
 800943c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009440:	08009451 	.word	0x08009451
 8009444:	08009475 	.word	0x08009475
 8009448:	08009451 	.word	0x08009451
 800944c:	08009475 	.word	0x08009475
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	695b      	ldr	r3, [r3, #20]
 8009454:	3303      	adds	r3, #3
 8009456:	089b      	lsrs	r3, r3, #2
 8009458:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800945a:	8afa      	ldrh	r2, [r7, #22]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009460:	b29b      	uxth	r3, r3
 8009462:	429a      	cmp	r2, r3
 8009464:	d91c      	bls.n	80094a0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	699b      	ldr	r3, [r3, #24]
 800946a:	f043 0220 	orr.w	r2, r3, #32
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	619a      	str	r2, [r3, #24]
        }
        break;
 8009472:	e015      	b.n	80094a0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	695b      	ldr	r3, [r3, #20]
 8009478:	3303      	adds	r3, #3
 800947a:	089b      	lsrs	r3, r3, #2
 800947c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800947e:	8afa      	ldrh	r2, [r7, #22]
 8009480:	6a3b      	ldr	r3, [r7, #32]
 8009482:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	b29b      	uxth	r3, r3
 800948a:	429a      	cmp	r2, r3
 800948c:	d90a      	bls.n	80094a4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	699b      	ldr	r3, [r3, #24]
 8009492:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	619a      	str	r2, [r3, #24]
        }
        break;
 800949a:	e003      	b.n	80094a4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800949c:	bf00      	nop
 800949e:	e002      	b.n	80094a6 <USB_HC_StartXfer+0x25e>
        break;
 80094a0:	bf00      	nop
 80094a2:	e000      	b.n	80094a6 <USB_HC_StartXfer+0x25e>
        break;
 80094a4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	68d9      	ldr	r1, [r3, #12]
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	785a      	ldrb	r2, [r3, #1]
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	695b      	ldr	r3, [r3, #20]
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	2000      	movs	r0, #0
 80094b6:	9000      	str	r0, [sp, #0]
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f7ff fb1d 	bl	8008af8 <USB_WritePacket>
  }

  return HAL_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3728      	adds	r7, #40	; 0x28
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	1ff80000 	.word	0x1ff80000

080094cc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094de:	695b      	ldr	r3, [r3, #20]
 80094e0:	b29b      	uxth	r3, r3
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3714      	adds	r7, #20
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr

080094ee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80094ee:	b480      	push	{r7}
 80094f0:	b089      	sub	sp, #36	; 0x24
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
 80094f6:	460b      	mov	r3, r1
 80094f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80094fe:	78fb      	ldrb	r3, [r7, #3]
 8009500:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009502:	2300      	movs	r3, #0
 8009504:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	015a      	lsls	r2, r3, #5
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	4413      	add	r3, r2
 800950e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	0c9b      	lsrs	r3, r3, #18
 8009516:	f003 0303 	and.w	r3, r3, #3
 800951a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	015a      	lsls	r2, r3, #5
 8009520:	69fb      	ldr	r3, [r7, #28]
 8009522:	4413      	add	r3, r2
 8009524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	0fdb      	lsrs	r3, r3, #31
 800952c:	f003 0301 	and.w	r3, r3, #1
 8009530:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	f003 0320 	and.w	r3, r3, #32
 800953a:	2b20      	cmp	r3, #32
 800953c:	d104      	bne.n	8009548 <USB_HC_Halt+0x5a>
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d101      	bne.n	8009548 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009544:	2300      	movs	r3, #0
 8009546:	e0c8      	b.n	80096da <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d002      	beq.n	8009554 <USB_HC_Halt+0x66>
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	2b02      	cmp	r3, #2
 8009552:	d163      	bne.n	800961c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	015a      	lsls	r2, r3, #5
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	4413      	add	r3, r2
 800955c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	69ba      	ldr	r2, [r7, #24]
 8009564:	0151      	lsls	r1, r2, #5
 8009566:	69fa      	ldr	r2, [r7, #28]
 8009568:	440a      	add	r2, r1
 800956a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800956e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009572:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	f003 0320 	and.w	r3, r3, #32
 800957c:	2b00      	cmp	r3, #0
 800957e:	f040 80ab 	bne.w	80096d8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009586:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800958a:	2b00      	cmp	r3, #0
 800958c:	d133      	bne.n	80095f6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	015a      	lsls	r2, r3, #5
 8009592:	69fb      	ldr	r3, [r7, #28]
 8009594:	4413      	add	r3, r2
 8009596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	69ba      	ldr	r2, [r7, #24]
 800959e:	0151      	lsls	r1, r2, #5
 80095a0:	69fa      	ldr	r2, [r7, #28]
 80095a2:	440a      	add	r2, r1
 80095a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095ac:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	015a      	lsls	r2, r3, #5
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	4413      	add	r3, r2
 80095b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	69ba      	ldr	r2, [r7, #24]
 80095be:	0151      	lsls	r1, r2, #5
 80095c0:	69fa      	ldr	r2, [r7, #28]
 80095c2:	440a      	add	r2, r1
 80095c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80095cc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	3301      	adds	r3, #1
 80095d2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095da:	d81d      	bhi.n	8009618 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80095dc:	69bb      	ldr	r3, [r7, #24]
 80095de:	015a      	lsls	r2, r3, #5
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	4413      	add	r3, r2
 80095e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095f2:	d0ec      	beq.n	80095ce <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80095f4:	e070      	b.n	80096d8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	015a      	lsls	r2, r3, #5
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	4413      	add	r3, r2
 80095fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	69ba      	ldr	r2, [r7, #24]
 8009606:	0151      	lsls	r1, r2, #5
 8009608:	69fa      	ldr	r2, [r7, #28]
 800960a:	440a      	add	r2, r1
 800960c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009610:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009614:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009616:	e05f      	b.n	80096d8 <USB_HC_Halt+0x1ea>
            break;
 8009618:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800961a:	e05d      	b.n	80096d8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	015a      	lsls	r2, r3, #5
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	4413      	add	r3, r2
 8009624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	69ba      	ldr	r2, [r7, #24]
 800962c:	0151      	lsls	r1, r2, #5
 800962e:	69fa      	ldr	r2, [r7, #28]
 8009630:	440a      	add	r2, r1
 8009632:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009636:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800963a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009648:	2b00      	cmp	r3, #0
 800964a:	d133      	bne.n	80096b4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	015a      	lsls	r2, r3, #5
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	4413      	add	r3, r2
 8009654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	69ba      	ldr	r2, [r7, #24]
 800965c:	0151      	lsls	r1, r2, #5
 800965e:	69fa      	ldr	r2, [r7, #28]
 8009660:	440a      	add	r2, r1
 8009662:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009666:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800966a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	015a      	lsls	r2, r3, #5
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	4413      	add	r3, r2
 8009674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	69ba      	ldr	r2, [r7, #24]
 800967c:	0151      	lsls	r1, r2, #5
 800967e:	69fa      	ldr	r2, [r7, #28]
 8009680:	440a      	add	r2, r1
 8009682:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009686:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800968a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	3301      	adds	r3, #1
 8009690:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009698:	d81d      	bhi.n	80096d6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800969a:	69bb      	ldr	r3, [r7, #24]
 800969c:	015a      	lsls	r2, r3, #5
 800969e:	69fb      	ldr	r3, [r7, #28]
 80096a0:	4413      	add	r3, r2
 80096a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096b0:	d0ec      	beq.n	800968c <USB_HC_Halt+0x19e>
 80096b2:	e011      	b.n	80096d8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	015a      	lsls	r2, r3, #5
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	4413      	add	r3, r2
 80096bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	69ba      	ldr	r2, [r7, #24]
 80096c4:	0151      	lsls	r1, r2, #5
 80096c6:	69fa      	ldr	r2, [r7, #28]
 80096c8:	440a      	add	r2, r1
 80096ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80096d2:	6013      	str	r3, [r2, #0]
 80096d4:	e000      	b.n	80096d8 <USB_HC_Halt+0x1ea>
          break;
 80096d6:	bf00      	nop
    }
  }

  return HAL_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3724      	adds	r7, #36	; 0x24
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
	...

080096e8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b087      	sub	sp, #28
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	460b      	mov	r3, r1
 80096f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80096f8:	78fb      	ldrb	r3, [r7, #3]
 80096fa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80096fc:	2301      	movs	r3, #1
 80096fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	04da      	lsls	r2, r3, #19
 8009704:	4b15      	ldr	r3, [pc, #84]	; (800975c <USB_DoPing+0x74>)
 8009706:	4013      	ands	r3, r2
 8009708:	693a      	ldr	r2, [r7, #16]
 800970a:	0151      	lsls	r1, r2, #5
 800970c:	697a      	ldr	r2, [r7, #20]
 800970e:	440a      	add	r2, r1
 8009710:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009714:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009718:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	015a      	lsls	r2, r3, #5
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	4413      	add	r3, r2
 8009722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009730:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009738:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	015a      	lsls	r2, r3, #5
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	4413      	add	r3, r2
 8009742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009746:	461a      	mov	r2, r3
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800974c:	2300      	movs	r3, #0
}
 800974e:	4618      	mov	r0, r3
 8009750:	371c      	adds	r7, #28
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	1ff80000 	.word	0x1ff80000

08009760 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b088      	sub	sp, #32
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009768:	2300      	movs	r3, #0
 800976a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009770:	2300      	movs	r3, #0
 8009772:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f7ff f8fe 	bl	8008976 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800977a:	2110      	movs	r1, #16
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f7ff f957 	bl	8008a30 <USB_FlushTxFifo>
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	d001      	beq.n	800978c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f7ff f983 	bl	8008a98 <USB_FlushRxFifo>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	d001      	beq.n	800979c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009798:	2301      	movs	r3, #1
 800979a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800979c:	2300      	movs	r3, #0
 800979e:	61bb      	str	r3, [r7, #24]
 80097a0:	e01f      	b.n	80097e2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	015a      	lsls	r2, r3, #5
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	4413      	add	r3, r2
 80097aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097b8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80097c8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	015a      	lsls	r2, r3, #5
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	4413      	add	r3, r2
 80097d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097d6:	461a      	mov	r2, r3
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	3301      	adds	r3, #1
 80097e0:	61bb      	str	r3, [r7, #24]
 80097e2:	69bb      	ldr	r3, [r7, #24]
 80097e4:	2b0f      	cmp	r3, #15
 80097e6:	d9dc      	bls.n	80097a2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80097e8:	2300      	movs	r3, #0
 80097ea:	61bb      	str	r3, [r7, #24]
 80097ec:	e034      	b.n	8009858 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	015a      	lsls	r2, r3, #5
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	4413      	add	r3, r2
 80097f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009804:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800980c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009814:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	015a      	lsls	r2, r3, #5
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	4413      	add	r3, r2
 800981e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009822:	461a      	mov	r2, r3
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	3301      	adds	r3, #1
 800982c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009834:	d80c      	bhi.n	8009850 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	015a      	lsls	r2, r3, #5
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	4413      	add	r3, r2
 800983e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009848:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800984c:	d0ec      	beq.n	8009828 <USB_StopHost+0xc8>
 800984e:	e000      	b.n	8009852 <USB_StopHost+0xf2>
        break;
 8009850:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009852:	69bb      	ldr	r3, [r7, #24]
 8009854:	3301      	adds	r3, #1
 8009856:	61bb      	str	r3, [r7, #24]
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	2b0f      	cmp	r3, #15
 800985c:	d9c7      	bls.n	80097ee <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009864:	461a      	mov	r2, r3
 8009866:	f04f 33ff 	mov.w	r3, #4294967295
 800986a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f04f 32ff 	mov.w	r2, #4294967295
 8009872:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f7ff f86d 	bl	8008954 <USB_EnableGlobalInt>

  return ret;
 800987a:	7ffb      	ldrb	r3, [r7, #31]
}
 800987c:	4618      	mov	r0, r3
 800987e:	3720      	adds	r7, #32
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8009888:	4904      	ldr	r1, [pc, #16]	; (800989c <MX_FATFS_Init+0x18>)
 800988a:	4805      	ldr	r0, [pc, #20]	; (80098a0 <MX_FATFS_Init+0x1c>)
 800988c:	f006 fc44 	bl	8010118 <FATFS_LinkDriver>
 8009890:	4603      	mov	r3, r0
 8009892:	461a      	mov	r2, r3
 8009894:	4b03      	ldr	r3, [pc, #12]	; (80098a4 <MX_FATFS_Init+0x20>)
 8009896:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009898:	bf00      	nop
 800989a:	bd80      	pop	{r7, pc}
 800989c:	20002a28 	.word	0x20002a28
 80098a0:	08010cc4 	.word	0x08010cc4
 80098a4:	20002a24 	.word	0x20002a24

080098a8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80098a8:	b480      	push	{r7}
 80098aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80098ac:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	4603      	mov	r3, r0
 80098c0:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	370c      	adds	r7, #12
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	4603      	mov	r3, r0
 80098d8:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80098de:	79fb      	ldrb	r3, [r7, #7]
 80098e0:	4619      	mov	r1, r3
 80098e2:	4808      	ldr	r0, [pc, #32]	; (8009904 <USBH_status+0x34>)
 80098e4:	f000 fe99 	bl	800a61a <USBH_MSC_UnitIsReady>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d002      	beq.n	80098f4 <USBH_status+0x24>
  {
    res = RES_OK;
 80098ee:	2300      	movs	r3, #0
 80098f0:	73fb      	strb	r3, [r7, #15]
 80098f2:	e001      	b.n	80098f8 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80098f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	20002e94 	.word	0x20002e94

08009908 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b094      	sub	sp, #80	; 0x50
 800990c:	af02      	add	r7, sp, #8
 800990e:	60b9      	str	r1, [r7, #8]
 8009910:	607a      	str	r2, [r7, #4]
 8009912:	603b      	str	r3, [r7, #0]
 8009914:	4603      	mov	r3, r0
 8009916:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800991e:	7bf9      	ldrb	r1, [r7, #15]
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	9300      	str	r3, [sp, #0]
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	4813      	ldr	r0, [pc, #76]	; (8009978 <USBH_read+0x70>)
 800992a:	f000 feca 	bl	800a6c2 <USBH_MSC_Read>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d103      	bne.n	800993c <USBH_read+0x34>
  {
    res = RES_OK;
 8009934:	2300      	movs	r3, #0
 8009936:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800993a:	e017      	b.n	800996c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800993c:	f107 0210 	add.w	r2, r7, #16
 8009940:	7bfb      	ldrb	r3, [r7, #15]
 8009942:	4619      	mov	r1, r3
 8009944:	480c      	ldr	r0, [pc, #48]	; (8009978 <USBH_read+0x70>)
 8009946:	f000 fe93 	bl	800a670 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800994a:	7f7b      	ldrb	r3, [r7, #29]
 800994c:	2b3a      	cmp	r3, #58	; 0x3a
 800994e:	d005      	beq.n	800995c <USBH_read+0x54>
 8009950:	2b3a      	cmp	r3, #58	; 0x3a
 8009952:	dc07      	bgt.n	8009964 <USBH_read+0x5c>
 8009954:	2b04      	cmp	r3, #4
 8009956:	d001      	beq.n	800995c <USBH_read+0x54>
 8009958:	2b28      	cmp	r3, #40	; 0x28
 800995a:	d103      	bne.n	8009964 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800995c:	2303      	movs	r3, #3
 800995e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009962:	e003      	b.n	800996c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800996a:	bf00      	nop
    }
  }

  return res;
 800996c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009970:	4618      	mov	r0, r3
 8009972:	3748      	adds	r7, #72	; 0x48
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}
 8009978:	20002e94 	.word	0x20002e94

0800997c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b094      	sub	sp, #80	; 0x50
 8009980:	af02      	add	r7, sp, #8
 8009982:	60b9      	str	r1, [r7, #8]
 8009984:	607a      	str	r2, [r7, #4]
 8009986:	603b      	str	r3, [r7, #0]
 8009988:	4603      	mov	r3, r0
 800998a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800998c:	2301      	movs	r3, #1
 800998e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8009992:	7bf9      	ldrb	r1, [r7, #15]
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	9300      	str	r3, [sp, #0]
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	4817      	ldr	r0, [pc, #92]	; (80099fc <USBH_write+0x80>)
 800999e:	f000 fef0 	bl	800a782 <USBH_MSC_Write>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d103      	bne.n	80099b0 <USBH_write+0x34>
  {
    res = RES_OK;
 80099a8:	2300      	movs	r3, #0
 80099aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80099ae:	e01f      	b.n	80099f0 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80099b0:	f107 0210 	add.w	r2, r7, #16
 80099b4:	7bfb      	ldrb	r3, [r7, #15]
 80099b6:	4619      	mov	r1, r3
 80099b8:	4810      	ldr	r0, [pc, #64]	; (80099fc <USBH_write+0x80>)
 80099ba:	f000 fe59 	bl	800a670 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80099be:	7f7b      	ldrb	r3, [r7, #29]
 80099c0:	2b3a      	cmp	r3, #58	; 0x3a
 80099c2:	d00d      	beq.n	80099e0 <USBH_write+0x64>
 80099c4:	2b3a      	cmp	r3, #58	; 0x3a
 80099c6:	dc0f      	bgt.n	80099e8 <USBH_write+0x6c>
 80099c8:	2b28      	cmp	r3, #40	; 0x28
 80099ca:	d009      	beq.n	80099e0 <USBH_write+0x64>
 80099cc:	2b28      	cmp	r3, #40	; 0x28
 80099ce:	dc0b      	bgt.n	80099e8 <USBH_write+0x6c>
 80099d0:	2b04      	cmp	r3, #4
 80099d2:	d005      	beq.n	80099e0 <USBH_write+0x64>
 80099d4:	2b27      	cmp	r3, #39	; 0x27
 80099d6:	d107      	bne.n	80099e8 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80099d8:	2302      	movs	r3, #2
 80099da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80099de:	e007      	b.n	80099f0 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80099e0:	2303      	movs	r3, #3
 80099e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80099e6:	e003      	b.n	80099f0 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80099e8:	2301      	movs	r3, #1
 80099ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80099ee:	bf00      	nop
    }
  }

  return res;
 80099f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3748      	adds	r7, #72	; 0x48
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	20002e94 	.word	0x20002e94

08009a00 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b090      	sub	sp, #64	; 0x40
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	4603      	mov	r3, r0
 8009a08:	603a      	str	r2, [r7, #0]
 8009a0a:	71fb      	strb	r3, [r7, #7]
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8009a16:	79bb      	ldrb	r3, [r7, #6]
 8009a18:	2b03      	cmp	r3, #3
 8009a1a:	d852      	bhi.n	8009ac2 <USBH_ioctl+0xc2>
 8009a1c:	a201      	add	r2, pc, #4	; (adr r2, 8009a24 <USBH_ioctl+0x24>)
 8009a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a22:	bf00      	nop
 8009a24:	08009a35 	.word	0x08009a35
 8009a28:	08009a3d 	.word	0x08009a3d
 8009a2c:	08009a67 	.word	0x08009a67
 8009a30:	08009a93 	.word	0x08009a93
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8009a34:	2300      	movs	r3, #0
 8009a36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009a3a:	e045      	b.n	8009ac8 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009a3c:	f107 0208 	add.w	r2, r7, #8
 8009a40:	79fb      	ldrb	r3, [r7, #7]
 8009a42:	4619      	mov	r1, r3
 8009a44:	4823      	ldr	r0, [pc, #140]	; (8009ad4 <USBH_ioctl+0xd4>)
 8009a46:	f000 fe13 	bl	800a670 <USBH_MSC_GetLUNInfo>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d106      	bne.n	8009a5e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8009a50:	68fa      	ldr	r2, [r7, #12]
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009a56:	2300      	movs	r3, #0
 8009a58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009a5c:	e034      	b.n	8009ac8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009a64:	e030      	b.n	8009ac8 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009a66:	f107 0208 	add.w	r2, r7, #8
 8009a6a:	79fb      	ldrb	r3, [r7, #7]
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	4819      	ldr	r0, [pc, #100]	; (8009ad4 <USBH_ioctl+0xd4>)
 8009a70:	f000 fdfe 	bl	800a670 <USBH_MSC_GetLUNInfo>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d107      	bne.n	8009a8a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8009a7a:	8a3b      	ldrh	r3, [r7, #16]
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009a82:	2300      	movs	r3, #0
 8009a84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009a88:	e01e      	b.n	8009ac8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009a90:	e01a      	b.n	8009ac8 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009a92:	f107 0208 	add.w	r2, r7, #8
 8009a96:	79fb      	ldrb	r3, [r7, #7]
 8009a98:	4619      	mov	r1, r3
 8009a9a:	480e      	ldr	r0, [pc, #56]	; (8009ad4 <USBH_ioctl+0xd4>)
 8009a9c:	f000 fde8 	bl	800a670 <USBH_MSC_GetLUNInfo>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d109      	bne.n	8009aba <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8009aa6:	8a3b      	ldrh	r3, [r7, #16]
 8009aa8:	0a5b      	lsrs	r3, r3, #9
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	461a      	mov	r2, r3
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009ab8:	e006      	b.n	8009ac8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009ac0:	e002      	b.n	8009ac8 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8009ac2:	2304      	movs	r3, #4
 8009ac4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8009ac8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3740      	adds	r7, #64	; 0x40
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	20002e94 	.word	0x20002e94

08009ad8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009ad8:	b590      	push	{r4, r7, lr}
 8009ada:	b089      	sub	sp, #36	; 0x24
 8009adc:	af04      	add	r7, sp, #16
 8009ade:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ae6:	7919      	ldrb	r1, [r3, #4]
 8009ae8:	2350      	movs	r3, #80	; 0x50
 8009aea:	2206      	movs	r2, #6
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f001 fcf8 	bl	800b4e2 <USBH_FindInterface>
 8009af2:	4603      	mov	r3, r0
 8009af4:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8009af6:	7bfb      	ldrb	r3, [r7, #15]
 8009af8:	2bff      	cmp	r3, #255	; 0xff
 8009afa:	d002      	beq.n	8009b02 <USBH_MSC_InterfaceInit+0x2a>
 8009afc:	7bfb      	ldrb	r3, [r7, #15]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d901      	bls.n	8009b06 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009b02:	2302      	movs	r3, #2
 8009b04:	e106      	b.n	8009d14 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8009b06:	7bfb      	ldrb	r3, [r7, #15]
 8009b08:	4619      	mov	r1, r3
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f001 fccd 	bl	800b4aa <USBH_SelectInterface>
 8009b10:	4603      	mov	r3, r0
 8009b12:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009b14:	7bbb      	ldrb	r3, [r7, #14]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d001      	beq.n	8009b1e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8009b1a:	2302      	movs	r3, #2
 8009b1c:	e0fa      	b.n	8009d14 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009b24:	f44f 7082 	mov.w	r0, #260	; 0x104
 8009b28:	f006 ff06 	bl	8010938 <malloc>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b36:	69db      	ldr	r3, [r3, #28]
 8009b38:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d101      	bne.n	8009b44 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8009b40:	2302      	movs	r3, #2
 8009b42:	e0e7      	b.n	8009d14 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8009b44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009b48:	2100      	movs	r1, #0
 8009b4a:	68b8      	ldr	r0, [r7, #8]
 8009b4c:	f006 ffb0 	bl	8010ab0 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009b50:	7bfb      	ldrb	r3, [r7, #15]
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	211a      	movs	r1, #26
 8009b56:	fb01 f303 	mul.w	r3, r1, r3
 8009b5a:	4413      	add	r3, r2
 8009b5c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	b25b      	sxtb	r3, r3
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	da16      	bge.n	8009b96 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009b68:	7bfb      	ldrb	r3, [r7, #15]
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	211a      	movs	r1, #26
 8009b6e:	fb01 f303 	mul.w	r3, r1, r3
 8009b72:	4413      	add	r3, r2
 8009b74:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009b78:	781a      	ldrb	r2, [r3, #0]
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009b7e:	7bfb      	ldrb	r3, [r7, #15]
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	211a      	movs	r1, #26
 8009b84:	fb01 f303 	mul.w	r3, r1, r3
 8009b88:	4413      	add	r3, r2
 8009b8a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009b8e:	881a      	ldrh	r2, [r3, #0]
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	815a      	strh	r2, [r3, #10]
 8009b94:	e015      	b.n	8009bc2 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009b96:	7bfb      	ldrb	r3, [r7, #15]
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	211a      	movs	r1, #26
 8009b9c:	fb01 f303 	mul.w	r3, r1, r3
 8009ba0:	4413      	add	r3, r2
 8009ba2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009ba6:	781a      	ldrb	r2, [r3, #0]
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009bac:	7bfb      	ldrb	r3, [r7, #15]
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	211a      	movs	r1, #26
 8009bb2:	fb01 f303 	mul.w	r3, r1, r3
 8009bb6:	4413      	add	r3, r2
 8009bb8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009bbc:	881a      	ldrh	r2, [r3, #0]
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009bc2:	7bfb      	ldrb	r3, [r7, #15]
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	211a      	movs	r1, #26
 8009bc8:	fb01 f303 	mul.w	r3, r1, r3
 8009bcc:	4413      	add	r3, r2
 8009bce:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	b25b      	sxtb	r3, r3
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	da16      	bge.n	8009c08 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009bda:	7bfb      	ldrb	r3, [r7, #15]
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	211a      	movs	r1, #26
 8009be0:	fb01 f303 	mul.w	r3, r1, r3
 8009be4:	4413      	add	r3, r2
 8009be6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009bea:	781a      	ldrb	r2, [r3, #0]
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009bf0:	7bfb      	ldrb	r3, [r7, #15]
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	211a      	movs	r1, #26
 8009bf6:	fb01 f303 	mul.w	r3, r1, r3
 8009bfa:	4413      	add	r3, r2
 8009bfc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009c00:	881a      	ldrh	r2, [r3, #0]
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	815a      	strh	r2, [r3, #10]
 8009c06:	e015      	b.n	8009c34 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009c08:	7bfb      	ldrb	r3, [r7, #15]
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	211a      	movs	r1, #26
 8009c0e:	fb01 f303 	mul.w	r3, r1, r3
 8009c12:	4413      	add	r3, r2
 8009c14:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009c18:	781a      	ldrb	r2, [r3, #0]
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009c1e:	7bfb      	ldrb	r3, [r7, #15]
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	211a      	movs	r1, #26
 8009c24:	fb01 f303 	mul.w	r3, r1, r3
 8009c28:	4413      	add	r3, r2
 8009c2a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009c2e:	881a      	ldrh	r2, [r3, #0]
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	2200      	movs	r2, #0
 8009c38:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	2200      	movs	r2, #0
 8009c44:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	799b      	ldrb	r3, [r3, #6]
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f002 ffe6 	bl	800cc1e <USBH_AllocPipe>
 8009c52:	4603      	mov	r3, r0
 8009c54:	461a      	mov	r2, r3
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	79db      	ldrb	r3, [r3, #7]
 8009c5e:	4619      	mov	r1, r3
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f002 ffdc 	bl	800cc1e <USBH_AllocPipe>
 8009c66:	4603      	mov	r3, r0
 8009c68:	461a      	mov	r2, r3
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 fe22 	bl	800a8b8 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	799b      	ldrb	r3, [r3, #6]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d01e      	beq.n	8009cba <USBH_MSC_InterfaceInit+0x1e2>
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	891b      	ldrh	r3, [r3, #8]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d01a      	beq.n	8009cba <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	7959      	ldrb	r1, [r3, #5]
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	7998      	ldrb	r0, [r3, #6]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009c98:	68ba      	ldr	r2, [r7, #8]
 8009c9a:	8912      	ldrh	r2, [r2, #8]
 8009c9c:	9202      	str	r2, [sp, #8]
 8009c9e:	2202      	movs	r2, #2
 8009ca0:	9201      	str	r2, [sp, #4]
 8009ca2:	9300      	str	r3, [sp, #0]
 8009ca4:	4623      	mov	r3, r4
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f002 ff89 	bl	800cbc0 <USBH_OpenPipe>
 8009cae:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	79db      	ldrb	r3, [r3, #7]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d02c      	beq.n	8009d12 <USBH_MSC_InterfaceInit+0x23a>
 8009cb8:	e001      	b.n	8009cbe <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8009cba:	2303      	movs	r3, #3
 8009cbc:	e02a      	b.n	8009d14 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	895b      	ldrh	r3, [r3, #10]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d025      	beq.n	8009d12 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	7919      	ldrb	r1, [r3, #4]
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	79d8      	ldrb	r0, [r3, #7]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009cda:	68ba      	ldr	r2, [r7, #8]
 8009cdc:	8952      	ldrh	r2, [r2, #10]
 8009cde:	9202      	str	r2, [sp, #8]
 8009ce0:	2202      	movs	r2, #2
 8009ce2:	9201      	str	r2, [sp, #4]
 8009ce4:	9300      	str	r3, [sp, #0]
 8009ce6:	4623      	mov	r3, r4
 8009ce8:	4602      	mov	r2, r0
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f002 ff68 	bl	800cbc0 <USBH_OpenPipe>
 8009cf0:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	791b      	ldrb	r3, [r3, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f006 fd68 	bl	80107d0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	795b      	ldrb	r3, [r3, #5]
 8009d04:	2200      	movs	r2, #0
 8009d06:	4619      	mov	r1, r3
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f006 fd61 	bl	80107d0 <USBH_LL_SetToggle>

  return USBH_OK;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	e000      	b.n	8009d14 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8009d12:	2303      	movs	r3, #3
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3714      	adds	r7, #20
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd90      	pop	{r4, r7, pc}

08009d1c <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d2a:	69db      	ldr	r3, [r3, #28]
 8009d2c:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	795b      	ldrb	r3, [r3, #5]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00e      	beq.n	8009d54 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	795b      	ldrb	r3, [r3, #5]
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f002 ff5e 	bl	800cbfe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	795b      	ldrb	r3, [r3, #5]
 8009d46:	4619      	mov	r1, r3
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f002 ff89 	bl	800cc60 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2200      	movs	r2, #0
 8009d52:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	791b      	ldrb	r3, [r3, #4]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00e      	beq.n	8009d7a <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	791b      	ldrb	r3, [r3, #4]
 8009d60:	4619      	mov	r1, r3
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f002 ff4b 	bl	800cbfe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	791b      	ldrb	r3, [r3, #4]
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f002 ff76 	bl	800cc60 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2200      	movs	r2, #0
 8009d78:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d80:	69db      	ldr	r3, [r3, #28]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00b      	beq.n	8009d9e <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d8c:	69db      	ldr	r3, [r3, #28]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f006 fdda 	bl	8010948 <free>
    phost->pActiveClass->pData = 0U;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009d9e:	2300      	movs	r3, #0
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3710      	adds	r7, #16
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009db6:	69db      	ldr	r3, [r3, #28]
 8009db8:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	73fb      	strb	r3, [r7, #15]
  uint8_t lun_idx;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	7b9b      	ldrb	r3, [r3, #14]
 8009dc2:	2b03      	cmp	r3, #3
 8009dc4:	d041      	beq.n	8009e4a <USBH_MSC_ClassRequest+0xa2>
 8009dc6:	2b03      	cmp	r3, #3
 8009dc8:	dc4b      	bgt.n	8009e62 <USBH_MSC_ClassRequest+0xba>
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d001      	beq.n	8009dd2 <USBH_MSC_ClassRequest+0x2a>
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d147      	bne.n	8009e62 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:

      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 fd50 	bl	800a87c <USBH_MSC_BOT_REQ_GetMaxLUN>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8009de0:	7bfb      	ldrb	r3, [r7, #15]
 8009de2:	2b03      	cmp	r3, #3
 8009de4:	d104      	bne.n	8009df0 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	2200      	movs	r2, #0
 8009dea:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8009dec:	2300      	movs	r3, #0
 8009dee:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8009df0:	7bfb      	ldrb	r3, [r7, #15]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d137      	bne.n	8009e66 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	d804      	bhi.n	8009e08 <USBH_MSC_ClassRequest+0x60>
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	3301      	adds	r3, #1
 8009e04:	b2da      	uxtb	r2, r3
 8009e06:	e000      	b.n	8009e0a <USBH_MSC_ClassRequest+0x62>
 8009e08:	2202      	movs	r2, #2
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 8009e0e:	2300      	movs	r3, #0
 8009e10:	73bb      	strb	r3, [r7, #14]
 8009e12:	e014      	b.n	8009e3e <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[lun_idx].prev_ready_state = USBH_FAIL;
 8009e14:	7bbb      	ldrb	r3, [r7, #14]
 8009e16:	68ba      	ldr	r2, [r7, #8]
 8009e18:	2134      	movs	r1, #52	; 0x34
 8009e1a:	fb01 f303 	mul.w	r3, r1, r3
 8009e1e:	4413      	add	r3, r2
 8009e20:	3392      	adds	r3, #146	; 0x92
 8009e22:	2202      	movs	r2, #2
 8009e24:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[lun_idx].state_changed = 0U;
 8009e26:	7bbb      	ldrb	r3, [r7, #14]
 8009e28:	68ba      	ldr	r2, [r7, #8]
 8009e2a:	2134      	movs	r1, #52	; 0x34
 8009e2c:	fb01 f303 	mul.w	r3, r1, r3
 8009e30:	4413      	add	r3, r2
 8009e32:	33c1      	adds	r3, #193	; 0xc1
 8009e34:	2200      	movs	r2, #0
 8009e36:	701a      	strb	r2, [r3, #0]
        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 8009e38:	7bbb      	ldrb	r3, [r7, #14]
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	73bb      	strb	r3, [r7, #14]
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	7bba      	ldrb	r2, [r7, #14]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d3e5      	bcc.n	8009e14 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8009e48:	e00d      	b.n	8009e66 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8009e4a:	2100      	movs	r1, #0
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f002 f929 	bl	800c0a4 <USBH_ClrFeature>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d108      	bne.n	8009e6a <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	7bda      	ldrb	r2, [r3, #15]
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	739a      	strb	r2, [r3, #14]
      }
      break;
 8009e60:	e003      	b.n	8009e6a <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8009e62:	bf00      	nop
 8009e64:	e002      	b.n	8009e6c <USBH_MSC_ClassRequest+0xc4>
      break;
 8009e66:	bf00      	nop
 8009e68:	e000      	b.n	8009e6c <USBH_MSC_ClassRequest+0xc4>
      break;
 8009e6a:	bf00      	nop
  }

  return status;
 8009e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3710      	adds	r7, #16
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
	...

08009e78 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b086      	sub	sp, #24
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e86:	69db      	ldr	r3, [r3, #28]
 8009e88:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8009e92:	2301      	movs	r3, #1
 8009e94:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	7b1b      	ldrb	r3, [r3, #12]
 8009e9a:	2b0a      	cmp	r3, #10
 8009e9c:	f000 8282 	beq.w	800a3a4 <USBH_MSC_Process+0x52c>
 8009ea0:	2b0a      	cmp	r3, #10
 8009ea2:	f300 82bb 	bgt.w	800a41c <USBH_MSC_Process+0x5a4>
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d003      	beq.n	8009eb2 <USBH_MSC_Process+0x3a>
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	f000 82b3 	beq.w	800a416 <USBH_MSC_Process+0x59e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8009eb0:	e2b4      	b.n	800a41c <USBH_MSC_Process+0x5a4>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	f080 825e 	bcs.w	800a380 <USBH_MSC_Process+0x508>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009eca:	4619      	mov	r1, r3
 8009ecc:	693a      	ldr	r2, [r7, #16]
 8009ece:	2334      	movs	r3, #52	; 0x34
 8009ed0:	fb01 f303 	mul.w	r3, r1, r3
 8009ed4:	4413      	add	r3, r2
 8009ed6:	3391      	adds	r3, #145	; 0x91
 8009ed8:	2201      	movs	r2, #1
 8009eda:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	693a      	ldr	r2, [r7, #16]
 8009ee6:	2334      	movs	r3, #52	; 0x34
 8009ee8:	fb01 f303 	mul.w	r3, r1, r3
 8009eec:	4413      	add	r3, r2
 8009eee:	3390      	adds	r3, #144	; 0x90
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	2b08      	cmp	r3, #8
 8009ef4:	f200 824c 	bhi.w	800a390 <USBH_MSC_Process+0x518>
 8009ef8:	a201      	add	r2, pc, #4	; (adr r2, 8009f00 <USBH_MSC_Process+0x88>)
 8009efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009efe:	bf00      	nop
 8009f00:	08009f25 	.word	0x08009f25
 8009f04:	0800a391 	.word	0x0800a391
 8009f08:	08009fef 	.word	0x08009fef
 8009f0c:	0800a175 	.word	0x0800a175
 8009f10:	08009f4b 	.word	0x08009f4b
 8009f14:	0800a241 	.word	0x0800a241
 8009f18:	0800a391 	.word	0x0800a391
 8009f1c:	0800a391 	.word	0x0800a391
 8009f20:	0800a36f 	.word	0x0800a36f
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	693a      	ldr	r2, [r7, #16]
 8009f2e:	2334      	movs	r3, #52	; 0x34
 8009f30:	fb01 f303 	mul.w	r3, r1, r3
 8009f34:	4413      	add	r3, r2
 8009f36:	3390      	adds	r3, #144	; 0x90
 8009f38:	2204      	movs	r2, #4
 8009f3a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
            break;
 8009f48:	e22b      	b.n	800a3a2 <USBH_MSC_Process+0x52a>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f50:	b2d9      	uxtb	r1, r3
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f58:	461a      	mov	r2, r3
 8009f5a:	2334      	movs	r3, #52	; 0x34
 8009f5c:	fb02 f303 	mul.w	r3, r2, r3
 8009f60:	3398      	adds	r3, #152	; 0x98
 8009f62:	693a      	ldr	r2, [r7, #16]
 8009f64:	4413      	add	r3, r2
 8009f66:	3307      	adds	r3, #7
 8009f68:	461a      	mov	r2, r3
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 ffc2 	bl	800aef4 <USBH_MSC_SCSI_Inquiry>
 8009f70:	4603      	mov	r3, r0
 8009f72:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009f74:	7bfb      	ldrb	r3, [r7, #15]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10c      	bne.n	8009f94 <USBH_MSC_Process+0x11c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f80:	4619      	mov	r1, r3
 8009f82:	693a      	ldr	r2, [r7, #16]
 8009f84:	2334      	movs	r3, #52	; 0x34
 8009f86:	fb01 f303 	mul.w	r3, r1, r3
 8009f8a:	4413      	add	r3, r2
 8009f8c:	3390      	adds	r3, #144	; 0x90
 8009f8e:	2202      	movs	r2, #2
 8009f90:	701a      	strb	r2, [r3, #0]
            break;
 8009f92:	e1ff      	b.n	800a394 <USBH_MSC_Process+0x51c>
            else if (scsi_status == USBH_FAIL)
 8009f94:	7bfb      	ldrb	r3, [r7, #15]
 8009f96:	2b02      	cmp	r3, #2
 8009f98:	d10c      	bne.n	8009fb4 <USBH_MSC_Process+0x13c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	693a      	ldr	r2, [r7, #16]
 8009fa4:	2334      	movs	r3, #52	; 0x34
 8009fa6:	fb01 f303 	mul.w	r3, r1, r3
 8009faa:	4413      	add	r3, r2
 8009fac:	3390      	adds	r3, #144	; 0x90
 8009fae:	2205      	movs	r2, #5
 8009fb0:	701a      	strb	r2, [r3, #0]
            break;
 8009fb2:	e1ef      	b.n	800a394 <USBH_MSC_Process+0x51c>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009fb4:	7bfb      	ldrb	r3, [r7, #15]
 8009fb6:	2b04      	cmp	r3, #4
 8009fb8:	f040 81ec 	bne.w	800a394 <USBH_MSC_Process+0x51c>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	693a      	ldr	r2, [r7, #16]
 8009fc6:	2334      	movs	r3, #52	; 0x34
 8009fc8:	fb01 f303 	mul.w	r3, r1, r3
 8009fcc:	4413      	add	r3, r2
 8009fce:	3390      	adds	r3, #144	; 0x90
 8009fd0:	2208      	movs	r2, #8
 8009fd2:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fda:	4619      	mov	r1, r3
 8009fdc:	693a      	ldr	r2, [r7, #16]
 8009fde:	2334      	movs	r3, #52	; 0x34
 8009fe0:	fb01 f303 	mul.w	r3, r1, r3
 8009fe4:	4413      	add	r3, r2
 8009fe6:	3391      	adds	r3, #145	; 0x91
 8009fe8:	2202      	movs	r2, #2
 8009fea:	701a      	strb	r2, [r3, #0]
            break;
 8009fec:	e1d2      	b.n	800a394 <USBH_MSC_Process+0x51c>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 febd 	bl	800ad78 <USBH_MSC_SCSI_TestUnitReady>
 8009ffe:	4603      	mov	r3, r0
 800a000:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800a002:	7bbb      	ldrb	r3, [r7, #14]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d14a      	bne.n	800a09e <USBH_MSC_Process+0x226>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a00e:	4619      	mov	r1, r3
 800a010:	693a      	ldr	r2, [r7, #16]
 800a012:	2334      	movs	r3, #52	; 0x34
 800a014:	fb01 f303 	mul.w	r3, r1, r3
 800a018:	4413      	add	r3, r2
 800a01a:	3392      	adds	r3, #146	; 0x92
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d00c      	beq.n	800a03c <USBH_MSC_Process+0x1c4>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a028:	4619      	mov	r1, r3
 800a02a:	693a      	ldr	r2, [r7, #16]
 800a02c:	2334      	movs	r3, #52	; 0x34
 800a02e:	fb01 f303 	mul.w	r3, r1, r3
 800a032:	4413      	add	r3, r2
 800a034:	33c1      	adds	r3, #193	; 0xc1
 800a036:	2201      	movs	r2, #1
 800a038:	701a      	strb	r2, [r3, #0]
 800a03a:	e00b      	b.n	800a054 <USBH_MSC_Process+0x1dc>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a042:	4619      	mov	r1, r3
 800a044:	693a      	ldr	r2, [r7, #16]
 800a046:	2334      	movs	r3, #52	; 0x34
 800a048:	fb01 f303 	mul.w	r3, r1, r3
 800a04c:	4413      	add	r3, r2
 800a04e:	33c1      	adds	r3, #193	; 0xc1
 800a050:	2200      	movs	r2, #0
 800a052:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a05a:	4619      	mov	r1, r3
 800a05c:	693a      	ldr	r2, [r7, #16]
 800a05e:	2334      	movs	r3, #52	; 0x34
 800a060:	fb01 f303 	mul.w	r3, r1, r3
 800a064:	4413      	add	r3, r2
 800a066:	3390      	adds	r3, #144	; 0x90
 800a068:	2203      	movs	r2, #3
 800a06a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a072:	4619      	mov	r1, r3
 800a074:	693a      	ldr	r2, [r7, #16]
 800a076:	2334      	movs	r3, #52	; 0x34
 800a078:	fb01 f303 	mul.w	r3, r1, r3
 800a07c:	4413      	add	r3, r2
 800a07e:	3391      	adds	r3, #145	; 0x91
 800a080:	2200      	movs	r2, #0
 800a082:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a08a:	4619      	mov	r1, r3
 800a08c:	693a      	ldr	r2, [r7, #16]
 800a08e:	2334      	movs	r3, #52	; 0x34
 800a090:	fb01 f303 	mul.w	r3, r1, r3
 800a094:	4413      	add	r3, r2
 800a096:	3392      	adds	r3, #146	; 0x92
 800a098:	2200      	movs	r2, #0
 800a09a:	701a      	strb	r2, [r3, #0]
            break;
 800a09c:	e17c      	b.n	800a398 <USBH_MSC_Process+0x520>
            else if (ready_status == USBH_FAIL)
 800a09e:	7bbb      	ldrb	r3, [r7, #14]
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	d14a      	bne.n	800a13a <USBH_MSC_Process+0x2c2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	693a      	ldr	r2, [r7, #16]
 800a0ae:	2334      	movs	r3, #52	; 0x34
 800a0b0:	fb01 f303 	mul.w	r3, r1, r3
 800a0b4:	4413      	add	r3, r2
 800a0b6:	3392      	adds	r3, #146	; 0x92
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	2b02      	cmp	r3, #2
 800a0bc:	d00c      	beq.n	800a0d8 <USBH_MSC_Process+0x260>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	693a      	ldr	r2, [r7, #16]
 800a0c8:	2334      	movs	r3, #52	; 0x34
 800a0ca:	fb01 f303 	mul.w	r3, r1, r3
 800a0ce:	4413      	add	r3, r2
 800a0d0:	33c1      	adds	r3, #193	; 0xc1
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	701a      	strb	r2, [r3, #0]
 800a0d6:	e00b      	b.n	800a0f0 <USBH_MSC_Process+0x278>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0de:	4619      	mov	r1, r3
 800a0e0:	693a      	ldr	r2, [r7, #16]
 800a0e2:	2334      	movs	r3, #52	; 0x34
 800a0e4:	fb01 f303 	mul.w	r3, r1, r3
 800a0e8:	4413      	add	r3, r2
 800a0ea:	33c1      	adds	r3, #193	; 0xc1
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	693a      	ldr	r2, [r7, #16]
 800a0fa:	2334      	movs	r3, #52	; 0x34
 800a0fc:	fb01 f303 	mul.w	r3, r1, r3
 800a100:	4413      	add	r3, r2
 800a102:	3390      	adds	r3, #144	; 0x90
 800a104:	2205      	movs	r2, #5
 800a106:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a10e:	4619      	mov	r1, r3
 800a110:	693a      	ldr	r2, [r7, #16]
 800a112:	2334      	movs	r3, #52	; 0x34
 800a114:	fb01 f303 	mul.w	r3, r1, r3
 800a118:	4413      	add	r3, r2
 800a11a:	3391      	adds	r3, #145	; 0x91
 800a11c:	2201      	movs	r2, #1
 800a11e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a126:	4619      	mov	r1, r3
 800a128:	693a      	ldr	r2, [r7, #16]
 800a12a:	2334      	movs	r3, #52	; 0x34
 800a12c:	fb01 f303 	mul.w	r3, r1, r3
 800a130:	4413      	add	r3, r2
 800a132:	3392      	adds	r3, #146	; 0x92
 800a134:	2202      	movs	r2, #2
 800a136:	701a      	strb	r2, [r3, #0]
            break;
 800a138:	e12e      	b.n	800a398 <USBH_MSC_Process+0x520>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800a13a:	7bbb      	ldrb	r3, [r7, #14]
 800a13c:	2b04      	cmp	r3, #4
 800a13e:	f040 812b 	bne.w	800a398 <USBH_MSC_Process+0x520>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a148:	4619      	mov	r1, r3
 800a14a:	693a      	ldr	r2, [r7, #16]
 800a14c:	2334      	movs	r3, #52	; 0x34
 800a14e:	fb01 f303 	mul.w	r3, r1, r3
 800a152:	4413      	add	r3, r2
 800a154:	3390      	adds	r3, #144	; 0x90
 800a156:	2208      	movs	r2, #8
 800a158:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a160:	4619      	mov	r1, r3
 800a162:	693a      	ldr	r2, [r7, #16]
 800a164:	2334      	movs	r3, #52	; 0x34
 800a166:	fb01 f303 	mul.w	r3, r1, r3
 800a16a:	4413      	add	r3, r2
 800a16c:	3391      	adds	r3, #145	; 0x91
 800a16e:	2202      	movs	r2, #2
 800a170:	701a      	strb	r2, [r3, #0]
            break;
 800a172:	e111      	b.n	800a398 <USBH_MSC_Process+0x520>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a17a:	b2d9      	uxtb	r1, r3
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a182:	461a      	mov	r2, r3
 800a184:	2334      	movs	r3, #52	; 0x34
 800a186:	fb02 f303 	mul.w	r3, r2, r3
 800a18a:	3390      	adds	r3, #144	; 0x90
 800a18c:	693a      	ldr	r2, [r7, #16]
 800a18e:	4413      	add	r3, r2
 800a190:	3304      	adds	r3, #4
 800a192:	461a      	mov	r2, r3
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 fe32 	bl	800adfe <USBH_MSC_SCSI_ReadCapacity>
 800a19a:	4603      	mov	r3, r0
 800a19c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a19e:	7bfb      	ldrb	r3, [r7, #15]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d120      	bne.n	800a1e6 <USBH_MSC_Process+0x36e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	693a      	ldr	r2, [r7, #16]
 800a1ae:	2334      	movs	r3, #52	; 0x34
 800a1b0:	fb01 f303 	mul.w	r3, r1, r3
 800a1b4:	4413      	add	r3, r2
 800a1b6:	3390      	adds	r3, #144	; 0x90
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	693a      	ldr	r2, [r7, #16]
 800a1c6:	2334      	movs	r3, #52	; 0x34
 800a1c8:	fb01 f303 	mul.w	r3, r1, r3
 800a1cc:	4413      	add	r3, r2
 800a1ce:	3391      	adds	r3, #145	; 0x91
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1da:	3301      	adds	r3, #1
 800a1dc:	b29a      	uxth	r2, r3
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a1e4:	e0da      	b.n	800a39c <USBH_MSC_Process+0x524>
            else if (scsi_status == USBH_FAIL)
 800a1e6:	7bfb      	ldrb	r3, [r7, #15]
 800a1e8:	2b02      	cmp	r3, #2
 800a1ea:	d10c      	bne.n	800a206 <USBH_MSC_Process+0x38e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	693a      	ldr	r2, [r7, #16]
 800a1f6:	2334      	movs	r3, #52	; 0x34
 800a1f8:	fb01 f303 	mul.w	r3, r1, r3
 800a1fc:	4413      	add	r3, r2
 800a1fe:	3390      	adds	r3, #144	; 0x90
 800a200:	2205      	movs	r2, #5
 800a202:	701a      	strb	r2, [r3, #0]
            break;
 800a204:	e0ca      	b.n	800a39c <USBH_MSC_Process+0x524>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a206:	7bfb      	ldrb	r3, [r7, #15]
 800a208:	2b04      	cmp	r3, #4
 800a20a:	f040 80c7 	bne.w	800a39c <USBH_MSC_Process+0x524>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a214:	4619      	mov	r1, r3
 800a216:	693a      	ldr	r2, [r7, #16]
 800a218:	2334      	movs	r3, #52	; 0x34
 800a21a:	fb01 f303 	mul.w	r3, r1, r3
 800a21e:	4413      	add	r3, r2
 800a220:	3390      	adds	r3, #144	; 0x90
 800a222:	2208      	movs	r2, #8
 800a224:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a22c:	4619      	mov	r1, r3
 800a22e:	693a      	ldr	r2, [r7, #16]
 800a230:	2334      	movs	r3, #52	; 0x34
 800a232:	fb01 f303 	mul.w	r3, r1, r3
 800a236:	4413      	add	r3, r2
 800a238:	3391      	adds	r3, #145	; 0x91
 800a23a:	2202      	movs	r2, #2
 800a23c:	701a      	strb	r2, [r3, #0]
            break;
 800a23e:	e0ad      	b.n	800a39c <USBH_MSC_Process+0x524>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a246:	b2d9      	uxtb	r1, r3
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a24e:	461a      	mov	r2, r3
 800a250:	2334      	movs	r3, #52	; 0x34
 800a252:	fb02 f303 	mul.w	r3, r2, r3
 800a256:	3398      	adds	r3, #152	; 0x98
 800a258:	693a      	ldr	r2, [r7, #16]
 800a25a:	4413      	add	r3, r2
 800a25c:	3304      	adds	r3, #4
 800a25e:	461a      	mov	r2, r3
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 feec 	bl	800b03e <USBH_MSC_SCSI_RequestSense>
 800a266:	4603      	mov	r3, r0
 800a268:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a26a:	7bfb      	ldrb	r3, [r7, #15]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d146      	bne.n	800a2fe <USBH_MSC_Process+0x486>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a276:	4619      	mov	r1, r3
 800a278:	693a      	ldr	r2, [r7, #16]
 800a27a:	2334      	movs	r3, #52	; 0x34
 800a27c:	fb01 f303 	mul.w	r3, r1, r3
 800a280:	4413      	add	r3, r2
 800a282:	339c      	adds	r3, #156	; 0x9c
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	2b06      	cmp	r3, #6
 800a288:	d00c      	beq.n	800a2a4 <USBH_MSC_Process+0x42c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a290:	4619      	mov	r1, r3
 800a292:	693a      	ldr	r2, [r7, #16]
 800a294:	2334      	movs	r3, #52	; 0x34
 800a296:	fb01 f303 	mul.w	r3, r1, r3
 800a29a:	4413      	add	r3, r2
 800a29c:	339c      	adds	r3, #156	; 0x9c
 800a29e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a2a0:	2b02      	cmp	r3, #2
 800a2a2:	d117      	bne.n	800a2d4 <USBH_MSC_Process+0x45c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800a2b0:	1ad3      	subs	r3, r2, r3
 800a2b2:	f242 720f 	movw	r2, #9999	; 0x270f
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d80c      	bhi.n	800a2d4 <USBH_MSC_Process+0x45c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	693a      	ldr	r2, [r7, #16]
 800a2c4:	2334      	movs	r3, #52	; 0x34
 800a2c6:	fb01 f303 	mul.w	r3, r1, r3
 800a2ca:	4413      	add	r3, r2
 800a2cc:	3390      	adds	r3, #144	; 0x90
 800a2ce:	2202      	movs	r2, #2
 800a2d0:	701a      	strb	r2, [r3, #0]
                  break;
 800a2d2:	e066      	b.n	800a3a2 <USBH_MSC_Process+0x52a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a2da:	4619      	mov	r1, r3
 800a2dc:	693a      	ldr	r2, [r7, #16]
 800a2de:	2334      	movs	r3, #52	; 0x34
 800a2e0:	fb01 f303 	mul.w	r3, r1, r3
 800a2e4:	4413      	add	r3, r2
 800a2e6:	3390      	adds	r3, #144	; 0x90
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	b29a      	uxth	r2, r3
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a2fc:	e050      	b.n	800a3a0 <USBH_MSC_Process+0x528>
            else if (scsi_status == USBH_FAIL)
 800a2fe:	7bfb      	ldrb	r3, [r7, #15]
 800a300:	2b02      	cmp	r3, #2
 800a302:	d118      	bne.n	800a336 <USBH_MSC_Process+0x4be>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a30a:	4619      	mov	r1, r3
 800a30c:	693a      	ldr	r2, [r7, #16]
 800a30e:	2334      	movs	r3, #52	; 0x34
 800a310:	fb01 f303 	mul.w	r3, r1, r3
 800a314:	4413      	add	r3, r2
 800a316:	3390      	adds	r3, #144	; 0x90
 800a318:	2208      	movs	r2, #8
 800a31a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a322:	4619      	mov	r1, r3
 800a324:	693a      	ldr	r2, [r7, #16]
 800a326:	2334      	movs	r3, #52	; 0x34
 800a328:	fb01 f303 	mul.w	r3, r1, r3
 800a32c:	4413      	add	r3, r2
 800a32e:	3391      	adds	r3, #145	; 0x91
 800a330:	2202      	movs	r2, #2
 800a332:	701a      	strb	r2, [r3, #0]
            break;
 800a334:	e034      	b.n	800a3a0 <USBH_MSC_Process+0x528>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a336:	7bfb      	ldrb	r3, [r7, #15]
 800a338:	2b04      	cmp	r3, #4
 800a33a:	d131      	bne.n	800a3a0 <USBH_MSC_Process+0x528>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a342:	4619      	mov	r1, r3
 800a344:	693a      	ldr	r2, [r7, #16]
 800a346:	2334      	movs	r3, #52	; 0x34
 800a348:	fb01 f303 	mul.w	r3, r1, r3
 800a34c:	4413      	add	r3, r2
 800a34e:	3390      	adds	r3, #144	; 0x90
 800a350:	2208      	movs	r2, #8
 800a352:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a35a:	4619      	mov	r1, r3
 800a35c:	693a      	ldr	r2, [r7, #16]
 800a35e:	2334      	movs	r3, #52	; 0x34
 800a360:	fb01 f303 	mul.w	r3, r1, r3
 800a364:	4413      	add	r3, r2
 800a366:	3391      	adds	r3, #145	; 0x91
 800a368:	2202      	movs	r2, #2
 800a36a:	701a      	strb	r2, [r3, #0]
            break;
 800a36c:	e018      	b.n	800a3a0 <USBH_MSC_Process+0x528>
            MSC_Handle->current_lun++;
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a374:	3301      	adds	r3, #1
 800a376:	b29a      	uxth	r2, r3
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a37e:	e010      	b.n	800a3a2 <USBH_MSC_Process+0x52a>
        MSC_Handle->current_lun = 0U;
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	2200      	movs	r2, #0
 800a384:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_USER_NOTIFY;
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	220a      	movs	r2, #10
 800a38c:	731a      	strb	r2, [r3, #12]
      break;
 800a38e:	e046      	b.n	800a41e <USBH_MSC_Process+0x5a6>
            break;
 800a390:	bf00      	nop
 800a392:	e044      	b.n	800a41e <USBH_MSC_Process+0x5a6>
            break;
 800a394:	bf00      	nop
 800a396:	e042      	b.n	800a41e <USBH_MSC_Process+0x5a6>
            break;
 800a398:	bf00      	nop
 800a39a:	e040      	b.n	800a41e <USBH_MSC_Process+0x5a6>
            break;
 800a39c:	bf00      	nop
 800a39e:	e03e      	b.n	800a41e <USBH_MSC_Process+0x5a6>
            break;
 800a3a0:	bf00      	nop
      break;
 800a3a2:	e03c      	b.n	800a41e <USBH_MSC_Process+0x5a6>
      if (MSC_Handle->lun < MSC_Handle->max_lun)
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	; 0xfa
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d228      	bcs.n	800a406 <USBH_MSC_Process+0x58e>
        MSC_Handle->current_lun = MSC_Handle->lun;
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	; 0xfa
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        if (MSC_Handle->unit[MSC_Handle->current_lun].error == MSC_OK)
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	693a      	ldr	r2, [r7, #16]
 800a3ca:	2334      	movs	r3, #52	; 0x34
 800a3cc:	fb01 f303 	mul.w	r3, r1, r3
 800a3d0:	4413      	add	r3, r2
 800a3d2:	3391      	adds	r3, #145	; 0x91
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d106      	bne.n	800a3e8 <USBH_MSC_Process+0x570>
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a3e0:	2102      	movs	r1, #2
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	4798      	blx	r3
 800a3e6:	e005      	b.n	800a3f4 <USBH_MSC_Process+0x57c>
          phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a3ee:	2106      	movs	r1, #6
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	4798      	blx	r3
        MSC_Handle->lun++;
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	b29a      	uxth	r2, r3
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
      break;
 800a404:	e00b      	b.n	800a41e <USBH_MSC_Process+0x5a6>
        MSC_Handle->lun = 0U;
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	2200      	movs	r2, #0
 800a40a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
        MSC_Handle->state = MSC_IDLE;
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	2201      	movs	r2, #1
 800a412:	731a      	strb	r2, [r3, #12]
      break;
 800a414:	e003      	b.n	800a41e <USBH_MSC_Process+0x5a6>
      error = USBH_OK;
 800a416:	2300      	movs	r3, #0
 800a418:	75fb      	strb	r3, [r7, #23]
      break;
 800a41a:	e000      	b.n	800a41e <USBH_MSC_Process+0x5a6>
      break;
 800a41c:	bf00      	nop
  }
  return error;
 800a41e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a420:	4618      	mov	r0, r3
 800a422:	3718      	adds	r7, #24
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a430:	2300      	movs	r3, #0
}
 800a432:	4618      	mov	r0, r3
 800a434:	370c      	adds	r7, #12
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr

0800a43e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a43e:	b580      	push	{r7, lr}
 800a440:	b088      	sub	sp, #32
 800a442:	af02      	add	r7, sp, #8
 800a444:	6078      	str	r0, [r7, #4]
 800a446:	460b      	mov	r3, r1
 800a448:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a450:	69db      	ldr	r3, [r3, #28]
 800a452:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800a454:	2301      	movs	r3, #1
 800a456:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800a458:	2301      	movs	r3, #1
 800a45a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800a45c:	78fb      	ldrb	r3, [r7, #3]
 800a45e:	693a      	ldr	r2, [r7, #16]
 800a460:	2134      	movs	r1, #52	; 0x34
 800a462:	fb01 f303 	mul.w	r3, r1, r3
 800a466:	4413      	add	r3, r2
 800a468:	3390      	adds	r3, #144	; 0x90
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	2b07      	cmp	r3, #7
 800a46e:	d03c      	beq.n	800a4ea <USBH_MSC_RdWrProcess+0xac>
 800a470:	2b07      	cmp	r3, #7
 800a472:	f300 80a8 	bgt.w	800a5c6 <USBH_MSC_RdWrProcess+0x188>
 800a476:	2b05      	cmp	r3, #5
 800a478:	d06c      	beq.n	800a554 <USBH_MSC_RdWrProcess+0x116>
 800a47a:	2b06      	cmp	r3, #6
 800a47c:	f040 80a3 	bne.w	800a5c6 <USBH_MSC_RdWrProcess+0x188>
  {
    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800a480:	78f9      	ldrb	r1, [r7, #3]
 800a482:	2300      	movs	r3, #0
 800a484:	9300      	str	r3, [sp, #0]
 800a486:	2300      	movs	r3, #0
 800a488:	2200      	movs	r2, #0
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 fec6 	bl	800b21c <USBH_MSC_SCSI_Read>
 800a490:	4603      	mov	r3, r0
 800a492:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a494:	7bfb      	ldrb	r3, [r7, #15]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d10b      	bne.n	800a4b2 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a49a:	78fb      	ldrb	r3, [r7, #3]
 800a49c:	693a      	ldr	r2, [r7, #16]
 800a49e:	2134      	movs	r1, #52	; 0x34
 800a4a0:	fb01 f303 	mul.w	r3, r1, r3
 800a4a4:	4413      	add	r3, r2
 800a4a6:	3390      	adds	r3, #144	; 0x90
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a4b0:	e08b      	b.n	800a5ca <USBH_MSC_RdWrProcess+0x18c>
      else if (scsi_status == USBH_FAIL)
 800a4b2:	7bfb      	ldrb	r3, [r7, #15]
 800a4b4:	2b02      	cmp	r3, #2
 800a4b6:	d109      	bne.n	800a4cc <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a4b8:	78fb      	ldrb	r3, [r7, #3]
 800a4ba:	693a      	ldr	r2, [r7, #16]
 800a4bc:	2134      	movs	r1, #52	; 0x34
 800a4be:	fb01 f303 	mul.w	r3, r1, r3
 800a4c2:	4413      	add	r3, r2
 800a4c4:	3390      	adds	r3, #144	; 0x90
 800a4c6:	2205      	movs	r2, #5
 800a4c8:	701a      	strb	r2, [r3, #0]
      break;
 800a4ca:	e07e      	b.n	800a5ca <USBH_MSC_RdWrProcess+0x18c>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a4cc:	7bfb      	ldrb	r3, [r7, #15]
 800a4ce:	2b04      	cmp	r3, #4
 800a4d0:	d17b      	bne.n	800a5ca <USBH_MSC_RdWrProcess+0x18c>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a4d2:	78fb      	ldrb	r3, [r7, #3]
 800a4d4:	693a      	ldr	r2, [r7, #16]
 800a4d6:	2134      	movs	r1, #52	; 0x34
 800a4d8:	fb01 f303 	mul.w	r3, r1, r3
 800a4dc:	4413      	add	r3, r2
 800a4de:	3390      	adds	r3, #144	; 0x90
 800a4e0:	2208      	movs	r2, #8
 800a4e2:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a4e4:	2302      	movs	r3, #2
 800a4e6:	75fb      	strb	r3, [r7, #23]
      break;
 800a4e8:	e06f      	b.n	800a5ca <USBH_MSC_RdWrProcess+0x18c>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800a4ea:	78f9      	ldrb	r1, [r7, #3]
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	9300      	str	r3, [sp, #0]
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 fe21 	bl	800b13c <USBH_MSC_SCSI_Write>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a4fe:	7bfb      	ldrb	r3, [r7, #15]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d10b      	bne.n	800a51c <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a504:	78fb      	ldrb	r3, [r7, #3]
 800a506:	693a      	ldr	r2, [r7, #16]
 800a508:	2134      	movs	r1, #52	; 0x34
 800a50a:	fb01 f303 	mul.w	r3, r1, r3
 800a50e:	4413      	add	r3, r2
 800a510:	3390      	adds	r3, #144	; 0x90
 800a512:	2201      	movs	r2, #1
 800a514:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a516:	2300      	movs	r3, #0
 800a518:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a51a:	e058      	b.n	800a5ce <USBH_MSC_RdWrProcess+0x190>
      else if (scsi_status == USBH_FAIL)
 800a51c:	7bfb      	ldrb	r3, [r7, #15]
 800a51e:	2b02      	cmp	r3, #2
 800a520:	d109      	bne.n	800a536 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a522:	78fb      	ldrb	r3, [r7, #3]
 800a524:	693a      	ldr	r2, [r7, #16]
 800a526:	2134      	movs	r1, #52	; 0x34
 800a528:	fb01 f303 	mul.w	r3, r1, r3
 800a52c:	4413      	add	r3, r2
 800a52e:	3390      	adds	r3, #144	; 0x90
 800a530:	2205      	movs	r2, #5
 800a532:	701a      	strb	r2, [r3, #0]
      break;
 800a534:	e04b      	b.n	800a5ce <USBH_MSC_RdWrProcess+0x190>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a536:	7bfb      	ldrb	r3, [r7, #15]
 800a538:	2b04      	cmp	r3, #4
 800a53a:	d148      	bne.n	800a5ce <USBH_MSC_RdWrProcess+0x190>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a53c:	78fb      	ldrb	r3, [r7, #3]
 800a53e:	693a      	ldr	r2, [r7, #16]
 800a540:	2134      	movs	r1, #52	; 0x34
 800a542:	fb01 f303 	mul.w	r3, r1, r3
 800a546:	4413      	add	r3, r2
 800a548:	3390      	adds	r3, #144	; 0x90
 800a54a:	2208      	movs	r2, #8
 800a54c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a54e:	2302      	movs	r3, #2
 800a550:	75fb      	strb	r3, [r7, #23]
      break;
 800a552:	e03c      	b.n	800a5ce <USBH_MSC_RdWrProcess+0x190>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800a554:	78fb      	ldrb	r3, [r7, #3]
 800a556:	2234      	movs	r2, #52	; 0x34
 800a558:	fb02 f303 	mul.w	r3, r2, r3
 800a55c:	3398      	adds	r3, #152	; 0x98
 800a55e:	693a      	ldr	r2, [r7, #16]
 800a560:	4413      	add	r3, r2
 800a562:	1d1a      	adds	r2, r3, #4
 800a564:	78fb      	ldrb	r3, [r7, #3]
 800a566:	4619      	mov	r1, r3
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 fd68 	bl	800b03e <USBH_MSC_SCSI_RequestSense>
 800a56e:	4603      	mov	r3, r0
 800a570:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a572:	7bfb      	ldrb	r3, [r7, #15]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d114      	bne.n	800a5a2 <USBH_MSC_RdWrProcess+0x164>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a578:	78fb      	ldrb	r3, [r7, #3]
 800a57a:	693a      	ldr	r2, [r7, #16]
 800a57c:	2134      	movs	r1, #52	; 0x34
 800a57e:	fb01 f303 	mul.w	r3, r1, r3
 800a582:	4413      	add	r3, r2
 800a584:	3390      	adds	r3, #144	; 0x90
 800a586:	2201      	movs	r2, #1
 800a588:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800a58a:	78fb      	ldrb	r3, [r7, #3]
 800a58c:	693a      	ldr	r2, [r7, #16]
 800a58e:	2134      	movs	r1, #52	; 0x34
 800a590:	fb01 f303 	mul.w	r3, r1, r3
 800a594:	4413      	add	r3, r2
 800a596:	3391      	adds	r3, #145	; 0x91
 800a598:	2202      	movs	r2, #2
 800a59a:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800a59c:	2302      	movs	r3, #2
 800a59e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a5a0:	e017      	b.n	800a5d2 <USBH_MSC_RdWrProcess+0x194>
      else if (scsi_status == USBH_FAIL)
 800a5a2:	7bfb      	ldrb	r3, [r7, #15]
 800a5a4:	2b02      	cmp	r3, #2
 800a5a6:	d014      	beq.n	800a5d2 <USBH_MSC_RdWrProcess+0x194>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a5a8:	7bfb      	ldrb	r3, [r7, #15]
 800a5aa:	2b04      	cmp	r3, #4
 800a5ac:	d111      	bne.n	800a5d2 <USBH_MSC_RdWrProcess+0x194>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a5ae:	78fb      	ldrb	r3, [r7, #3]
 800a5b0:	693a      	ldr	r2, [r7, #16]
 800a5b2:	2134      	movs	r1, #52	; 0x34
 800a5b4:	fb01 f303 	mul.w	r3, r1, r3
 800a5b8:	4413      	add	r3, r2
 800a5ba:	3390      	adds	r3, #144	; 0x90
 800a5bc:	2208      	movs	r2, #8
 800a5be:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a5c0:	2302      	movs	r3, #2
 800a5c2:	75fb      	strb	r3, [r7, #23]
      break;
 800a5c4:	e005      	b.n	800a5d2 <USBH_MSC_RdWrProcess+0x194>

    default:
      break;
 800a5c6:	bf00      	nop
 800a5c8:	e004      	b.n	800a5d4 <USBH_MSC_RdWrProcess+0x196>
      break;
 800a5ca:	bf00      	nop
 800a5cc:	e002      	b.n	800a5d4 <USBH_MSC_RdWrProcess+0x196>
      break;
 800a5ce:	bf00      	nop
 800a5d0:	e000      	b.n	800a5d4 <USBH_MSC_RdWrProcess+0x196>
      break;
 800a5d2:	bf00      	nop

  }
  return error;
 800a5d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3718      	adds	r7, #24
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}

0800a5de <USBH_MSC_IsReady>:
  *         The function check if the MSC function is ready
  * @param  phost: Host handle
  * @retval USBH Status
  */
uint8_t USBH_MSC_IsReady(USBH_HandleTypeDef *phost)
{
 800a5de:	b480      	push	{r7}
 800a5e0:	b085      	sub	sp, #20
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5ec:	69db      	ldr	r3, [r3, #28]
 800a5ee:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->state == MSC_USER_NOTIFY)) // change from MSC_IDLE to MSC_USER_NOTIFY !
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	2b0b      	cmp	r3, #11
 800a5f8:	d106      	bne.n	800a608 <USBH_MSC_IsReady+0x2a>
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	7b1b      	ldrb	r3, [r3, #12]
 800a5fe:	2b0a      	cmp	r3, #10
 800a600:	d102      	bne.n	800a608 <USBH_MSC_IsReady+0x2a>
  {
    res = 1U;
 800a602:	2301      	movs	r3, #1
 800a604:	73fb      	strb	r3, [r7, #15]
 800a606:	e001      	b.n	800a60c <USBH_MSC_IsReady+0x2e>
  }
  else
  {
    res = 0U;
 800a608:	2300      	movs	r3, #0
 800a60a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a60c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3714      	adds	r7, #20
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr

0800a61a <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a61a:	b480      	push	{r7}
 800a61c:	b085      	sub	sp, #20
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
 800a622:	460b      	mov	r3, r1
 800a624:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a62c:	69db      	ldr	r3, [r3, #28]
 800a62e:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 800a630:	78fb      	ldrb	r3, [r7, #3]
 800a632:	b29a      	uxth	r2, r3
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	2b0b      	cmp	r3, #11
 800a642:	d10c      	bne.n	800a65e <USBH_MSC_UnitIsReady+0x44>
 800a644:	78fb      	ldrb	r3, [r7, #3]
 800a646:	68ba      	ldr	r2, [r7, #8]
 800a648:	2134      	movs	r1, #52	; 0x34
 800a64a:	fb01 f303 	mul.w	r3, r1, r3
 800a64e:	4413      	add	r3, r2
 800a650:	3391      	adds	r3, #145	; 0x91
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d102      	bne.n	800a65e <USBH_MSC_UnitIsReady+0x44>
  {
    res = 1U;
 800a658:	2301      	movs	r3, #1
 800a65a:	73fb      	strb	r3, [r7, #15]
 800a65c:	e001      	b.n	800a662 <USBH_MSC_UnitIsReady+0x48>
  }
  else
  {
    res = 0U;
 800a65e:	2300      	movs	r3, #0
 800a660:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a662:	7bfb      	ldrb	r3, [r7, #15]
}
 800a664:	4618      	mov	r0, r3
 800a666:	3714      	adds	r7, #20
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b086      	sub	sp, #24
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	460b      	mov	r3, r1
 800a67a:	607a      	str	r2, [r7, #4]
 800a67c:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a684:	69db      	ldr	r3, [r3, #28]
 800a686:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 800a688:	7afb      	ldrb	r3, [r7, #11]
 800a68a:	b29a      	uxth	r2, r3
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8

  if (phost->gState == HOST_CLASS)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	b2db      	uxtb	r3, r3
 800a698:	2b0b      	cmp	r3, #11
 800a69a:	d10d      	bne.n	800a6b8 <USBH_MSC_GetLUNInfo+0x48>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800a69c:	7afb      	ldrb	r3, [r7, #11]
 800a69e:	2234      	movs	r2, #52	; 0x34
 800a6a0:	fb02 f303 	mul.w	r3, r2, r3
 800a6a4:	3390      	adds	r3, #144	; 0x90
 800a6a6:	697a      	ldr	r2, [r7, #20]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	2234      	movs	r2, #52	; 0x34
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f006 fa6c 	bl	8010b8c <memcpy>
    return USBH_OK;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	e000      	b.n	800a6ba <USBH_MSC_GetLUNInfo+0x4a>
  }
  else
  {
    return USBH_FAIL;
 800a6b8:	2302      	movs	r3, #2
  }
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3718      	adds	r7, #24
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b088      	sub	sp, #32
 800a6c6:	af02      	add	r7, sp, #8
 800a6c8:	60f8      	str	r0, [r7, #12]
 800a6ca:	607a      	str	r2, [r7, #4]
 800a6cc:	603b      	str	r3, [r7, #0]
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6d8:	69db      	ldr	r3, [r3, #28]
 800a6da:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 800a6dc:	7afb      	ldrb	r3, [r7, #11]
 800a6de:	b29a      	uxth	r2, r3
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8

  if ((phost->device.is_connected == 0U) ||
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00e      	beq.n	800a710 <USBH_MSC_Read+0x4e>
      (phost->gState != HOST_CLASS) ||
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a6f8:	2b0b      	cmp	r3, #11
 800a6fa:	d109      	bne.n	800a710 <USBH_MSC_Read+0x4e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a6fc:	7afb      	ldrb	r3, [r7, #11]
 800a6fe:	697a      	ldr	r2, [r7, #20]
 800a700:	2134      	movs	r1, #52	; 0x34
 800a702:	fb01 f303 	mul.w	r3, r1, r3
 800a706:	4413      	add	r3, r2
 800a708:	3390      	adds	r3, #144	; 0x90
 800a70a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d001      	beq.n	800a714 <USBH_MSC_Read+0x52>
  {
    return  USBH_FAIL;
 800a710:	2302      	movs	r3, #2
 800a712:	e032      	b.n	800a77a <USBH_MSC_Read+0xb8>
  }

  MSC_Handle->unit[lun].state = MSC_READ;
 800a714:	7afb      	ldrb	r3, [r7, #11]
 800a716:	697a      	ldr	r2, [r7, #20]
 800a718:	2134      	movs	r1, #52	; 0x34
 800a71a:	fb01 f303 	mul.w	r3, r1, r3
 800a71e:	4413      	add	r3, r2
 800a720:	3390      	adds	r3, #144	; 0x90
 800a722:	2206      	movs	r2, #6
 800a724:	701a      	strb	r2, [r3, #0]

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800a726:	7af9      	ldrb	r1, [r7, #11]
 800a728:	6a3b      	ldr	r3, [r7, #32]
 800a72a:	9300      	str	r3, [sp, #0]
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	68f8      	ldr	r0, [r7, #12]
 800a732:	f000 fd73 	bl	800b21c <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a73c:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a73e:	e013      	b.n	800a768 <USBH_MSC_Read+0xa6>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	1ad2      	subs	r2, r2, r3
 800a74a:	6a3b      	ldr	r3, [r7, #32]
 800a74c:	f242 7110 	movw	r1, #10000	; 0x2710
 800a750:	fb01 f303 	mul.w	r3, r1, r3
 800a754:	429a      	cmp	r2, r3
 800a756:	d805      	bhi.n	800a764 <USBH_MSC_Read+0xa2>
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	2b00      	cmp	r3, #0
 800a762:	d101      	bne.n	800a768 <USBH_MSC_Read+0xa6>
    {
      return USBH_FAIL;
 800a764:	2302      	movs	r3, #2
 800a766:	e008      	b.n	800a77a <USBH_MSC_Read+0xb8>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a768:	7afb      	ldrb	r3, [r7, #11]
 800a76a:	4619      	mov	r1, r3
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f7ff fe66 	bl	800a43e <USBH_MSC_RdWrProcess>
 800a772:	4603      	mov	r3, r0
 800a774:	2b01      	cmp	r3, #1
 800a776:	d0e3      	beq.n	800a740 <USBH_MSC_Read+0x7e>
    }
  }

  return USBH_OK;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3718      	adds	r7, #24
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}

0800a782 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800a782:	b580      	push	{r7, lr}
 800a784:	b088      	sub	sp, #32
 800a786:	af02      	add	r7, sp, #8
 800a788:	60f8      	str	r0, [r7, #12]
 800a78a:	607a      	str	r2, [r7, #4]
 800a78c:	603b      	str	r3, [r7, #0]
 800a78e:	460b      	mov	r3, r1
 800a790:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a798:	69db      	ldr	r3, [r3, #28]
 800a79a:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 800a79c:	7afb      	ldrb	r3, [r7, #11]
 800a79e:	b29a      	uxth	r2, r3
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8

  if ((phost->device.is_connected == 0U) ||
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d00e      	beq.n	800a7d0 <USBH_MSC_Write+0x4e>
      (phost->gState != HOST_CLASS) ||
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a7b8:	2b0b      	cmp	r3, #11
 800a7ba:	d109      	bne.n	800a7d0 <USBH_MSC_Write+0x4e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a7bc:	7afb      	ldrb	r3, [r7, #11]
 800a7be:	697a      	ldr	r2, [r7, #20]
 800a7c0:	2134      	movs	r1, #52	; 0x34
 800a7c2:	fb01 f303 	mul.w	r3, r1, r3
 800a7c6:	4413      	add	r3, r2
 800a7c8:	3390      	adds	r3, #144	; 0x90
 800a7ca:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d001      	beq.n	800a7d4 <USBH_MSC_Write+0x52>
  {
    return  USBH_FAIL;
 800a7d0:	2302      	movs	r3, #2
 800a7d2:	e032      	b.n	800a83a <USBH_MSC_Write+0xb8>
  }

  MSC_Handle->unit[lun].state = MSC_WRITE;
 800a7d4:	7afb      	ldrb	r3, [r7, #11]
 800a7d6:	697a      	ldr	r2, [r7, #20]
 800a7d8:	2134      	movs	r1, #52	; 0x34
 800a7da:	fb01 f303 	mul.w	r3, r1, r3
 800a7de:	4413      	add	r3, r2
 800a7e0:	3390      	adds	r3, #144	; 0x90
 800a7e2:	2207      	movs	r2, #7
 800a7e4:	701a      	strb	r2, [r3, #0]

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800a7e6:	7af9      	ldrb	r1, [r7, #11]
 800a7e8:	6a3b      	ldr	r3, [r7, #32]
 800a7ea:	9300      	str	r3, [sp, #0]
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	68f8      	ldr	r0, [r7, #12]
 800a7f2:	f000 fca3 	bl	800b13c <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a7fc:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a7fe:	e013      	b.n	800a828 <USBH_MSC_Write+0xa6>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	1ad2      	subs	r2, r2, r3
 800a80a:	6a3b      	ldr	r3, [r7, #32]
 800a80c:	f242 7110 	movw	r1, #10000	; 0x2710
 800a810:	fb01 f303 	mul.w	r3, r1, r3
 800a814:	429a      	cmp	r2, r3
 800a816:	d805      	bhi.n	800a824 <USBH_MSC_Write+0xa2>
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a81e:	b2db      	uxtb	r3, r3
 800a820:	2b00      	cmp	r3, #0
 800a822:	d101      	bne.n	800a828 <USBH_MSC_Write+0xa6>
    {
      return USBH_FAIL;
 800a824:	2302      	movs	r3, #2
 800a826:	e008      	b.n	800a83a <USBH_MSC_Write+0xb8>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a828:	7afb      	ldrb	r3, [r7, #11]
 800a82a:	4619      	mov	r1, r3
 800a82c:	68f8      	ldr	r0, [r7, #12]
 800a82e:	f7ff fe06 	bl	800a43e <USBH_MSC_RdWrProcess>
 800a832:	4603      	mov	r3, r0
 800a834:	2b01      	cmp	r3, #1
 800a836:	d0e3      	beq.n	800a800 <USBH_MSC_Write+0x7e>
    }
  }

  return USBH_OK;
 800a838:	2300      	movs	r3, #0
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3718      	adds	r7, #24
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800a842:	b580      	push	{r7, lr}
 800a844:	b082      	sub	sp, #8
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2221      	movs	r2, #33	; 0x21
 800a84e:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	22ff      	movs	r2, #255	; 0xff
 800a854:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800a868:	2200      	movs	r2, #0
 800a86a:	2100      	movs	r1, #0
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f001 ff55 	bl	800c71c <USBH_CtlReq>
 800a872:	4603      	mov	r3, r0
}
 800a874:	4618      	mov	r0, r3
 800a876:	3708      	adds	r7, #8
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	22a1      	movs	r2, #161	; 0xa1
 800a88a:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	22fe      	movs	r2, #254	; 0xfe
 800a890:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2200      	movs	r2, #0
 800a89c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	6839      	ldr	r1, [r7, #0]
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f001 ff37 	bl	800c71c <USBH_CtlReq>
 800a8ae:	4603      	mov	r3, r0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b085      	sub	sp, #20
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8c6:	69db      	ldr	r3, [r3, #28]
 800a8c8:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	4a09      	ldr	r2, [pc, #36]	; (800a8f4 <USBH_MSC_BOT_Init+0x3c>)
 800a8ce:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	4a09      	ldr	r2, [pc, #36]	; (800a8f8 <USBH_MSC_BOT_Init+0x40>)
 800a8d4:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800a8e6:	2300      	movs	r3, #0
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3714      	adds	r7, #20
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr
 800a8f4:	43425355 	.word	0x43425355
 800a8f8:	20304050 	.word	0x20304050

0800a8fc <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b088      	sub	sp, #32
 800a900:	af02      	add	r7, sp, #8
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	460b      	mov	r3, r1
 800a906:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800a908:	2301      	movs	r3, #1
 800a90a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800a90c:	2301      	movs	r3, #1
 800a90e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800a910:	2301      	movs	r3, #1
 800a912:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a914:	2300      	movs	r3, #0
 800a916:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a91e:	69db      	ldr	r3, [r3, #28]
 800a920:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800a922:	2300      	movs	r3, #0
 800a924:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a92c:	3b01      	subs	r3, #1
 800a92e:	2b0a      	cmp	r3, #10
 800a930:	f200 819e 	bhi.w	800ac70 <USBH_MSC_BOT_Process+0x374>
 800a934:	a201      	add	r2, pc, #4	; (adr r2, 800a93c <USBH_MSC_BOT_Process+0x40>)
 800a936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a93a:	bf00      	nop
 800a93c:	0800a969 	.word	0x0800a969
 800a940:	0800a991 	.word	0x0800a991
 800a944:	0800a9fb 	.word	0x0800a9fb
 800a948:	0800aa19 	.word	0x0800aa19
 800a94c:	0800aa9d 	.word	0x0800aa9d
 800a950:	0800aabf 	.word	0x0800aabf
 800a954:	0800ab57 	.word	0x0800ab57
 800a958:	0800ab73 	.word	0x0800ab73
 800a95c:	0800abc5 	.word	0x0800abc5
 800a960:	0800abf5 	.word	0x0800abf5
 800a964:	0800ac57 	.word	0x0800ac57
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	78fa      	ldrb	r2, [r7, #3]
 800a96c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	2202      	movs	r2, #2
 800a974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	795b      	ldrb	r3, [r3, #5]
 800a982:	2201      	movs	r2, #1
 800a984:	9200      	str	r2, [sp, #0]
 800a986:	221f      	movs	r2, #31
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f002 f8d6 	bl	800cb3a <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800a98e:	e17e      	b.n	800ac8e <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	795b      	ldrb	r3, [r3, #5]
 800a994:	4619      	mov	r1, r3
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f005 fef0 	bl	801077c <USBH_LL_GetURBState>
 800a99c:	4603      	mov	r3, r0
 800a99e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a9a0:	7d3b      	ldrb	r3, [r7, #20]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d118      	bne.n	800a9d8 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00f      	beq.n	800a9ce <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a9b4:	b25b      	sxtb	r3, r3
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	da04      	bge.n	800a9c4 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	2203      	movs	r2, #3
 800a9be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a9c2:	e157      	b.n	800ac74 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	2205      	movs	r2, #5
 800a9c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a9cc:	e152      	b.n	800ac74 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	2207      	movs	r2, #7
 800a9d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a9d6:	e14d      	b.n	800ac74 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a9d8:	7d3b      	ldrb	r3, [r7, #20]
 800a9da:	2b02      	cmp	r3, #2
 800a9dc:	d104      	bne.n	800a9e8 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a9e6:	e145      	b.n	800ac74 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800a9e8:	7d3b      	ldrb	r3, [r7, #20]
 800a9ea:	2b05      	cmp	r3, #5
 800a9ec:	f040 8142 	bne.w	800ac74 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_ERROR_OUT;
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	220a      	movs	r2, #10
 800a9f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a9f8:	e13c      	b.n	800ac74 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	895a      	ldrh	r2, [r3, #10]
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	791b      	ldrb	r3, [r3, #4]
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f002 f8bb 	bl	800cb84 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	2204      	movs	r2, #4
 800aa12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800aa16:	e13a      	b.n	800ac8e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	791b      	ldrb	r3, [r3, #4]
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f005 feac 	bl	801077c <USBH_LL_GetURBState>
 800aa24:	4603      	mov	r3, r0
 800aa26:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800aa28:	7d3b      	ldrb	r3, [r7, #20]
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d12d      	bne.n	800aa8a <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa32:	693a      	ldr	r2, [r7, #16]
 800aa34:	8952      	ldrh	r2, [r2, #10]
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d910      	bls.n	800aa5c <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa40:	693a      	ldr	r2, [r7, #16]
 800aa42:	8952      	ldrh	r2, [r2, #10]
 800aa44:	441a      	add	r2, r3
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa50:	693a      	ldr	r2, [r7, #16]
 800aa52:	8952      	ldrh	r2, [r2, #10]
 800aa54:	1a9a      	subs	r2, r3, r2
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	65da      	str	r2, [r3, #92]	; 0x5c
 800aa5a:	e002      	b.n	800aa62 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d00a      	beq.n	800aa80 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	895a      	ldrh	r2, [r3, #10]
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	791b      	ldrb	r3, [r3, #4]
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f002 f883 	bl	800cb84 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800aa7e:	e0fb      	b.n	800ac78 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	2207      	movs	r2, #7
 800aa84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aa88:	e0f6      	b.n	800ac78 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800aa8a:	7d3b      	ldrb	r3, [r7, #20]
 800aa8c:	2b05      	cmp	r3, #5
 800aa8e:	f040 80f3 	bne.w	800ac78 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	2209      	movs	r2, #9
 800aa96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aa9a:	e0ed      	b.n	800ac78 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	891a      	ldrh	r2, [r3, #8]
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	795b      	ldrb	r3, [r3, #5]
 800aaaa:	2001      	movs	r0, #1
 800aaac:	9000      	str	r0, [sp, #0]
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f002 f843 	bl	800cb3a <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	2206      	movs	r2, #6
 800aab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aabc:	e0e7      	b.n	800ac8e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	795b      	ldrb	r3, [r3, #5]
 800aac2:	4619      	mov	r1, r3
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f005 fe59 	bl	801077c <USBH_LL_GetURBState>
 800aaca:	4603      	mov	r3, r0
 800aacc:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800aace:	7d3b      	ldrb	r3, [r7, #20]
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d12f      	bne.n	800ab34 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aad8:	693a      	ldr	r2, [r7, #16]
 800aada:	8912      	ldrh	r2, [r2, #8]
 800aadc:	4293      	cmp	r3, r2
 800aade:	d910      	bls.n	800ab02 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aae6:	693a      	ldr	r2, [r7, #16]
 800aae8:	8912      	ldrh	r2, [r2, #8]
 800aaea:	441a      	add	r2, r3
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaf6:	693a      	ldr	r2, [r7, #16]
 800aaf8:	8912      	ldrh	r2, [r2, #8]
 800aafa:	1a9a      	subs	r2, r3, r2
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	65da      	str	r2, [r3, #92]	; 0x5c
 800ab00:	e002      	b.n	800ab08 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	2200      	movs	r2, #0
 800ab06:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00c      	beq.n	800ab2a <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	891a      	ldrh	r2, [r3, #8]
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	795b      	ldrb	r3, [r3, #5]
 800ab1e:	2001      	movs	r0, #1
 800ab20:	9000      	str	r0, [sp, #0]
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f002 f809 	bl	800cb3a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800ab28:	e0a8      	b.n	800ac7c <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	2207      	movs	r2, #7
 800ab2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ab32:	e0a3      	b.n	800ac7c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ab34:	7d3b      	ldrb	r3, [r7, #20]
 800ab36:	2b02      	cmp	r3, #2
 800ab38:	d104      	bne.n	800ab44 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state = BOT_DATA_OUT;
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	2205      	movs	r2, #5
 800ab3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ab42:	e09b      	b.n	800ac7c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800ab44:	7d3b      	ldrb	r3, [r7, #20]
 800ab46:	2b05      	cmp	r3, #5
 800ab48:	f040 8098 	bne.w	800ac7c <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state = BOT_ERROR_OUT;
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	220a      	movs	r2, #10
 800ab50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ab54:	e092      	b.n	800ac7c <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	791b      	ldrb	r3, [r3, #4]
 800ab60:	220d      	movs	r2, #13
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f002 f80e 	bl	800cb84 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_RECEIVE_CSW_WAIT;
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	2208      	movs	r2, #8
 800ab6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ab70:	e08d      	b.n	800ac8e <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	791b      	ldrb	r3, [r3, #4]
 800ab76:	4619      	mov	r1, r3
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f005 fdff 	bl	801077c <USBH_LL_GetURBState>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800ab82:	7d3b      	ldrb	r3, [r7, #20]
 800ab84:	2b01      	cmp	r3, #1
 800ab86:	d115      	bne.n	800abb4 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	2201      	movs	r2, #1
 800ab94:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 f8a9 	bl	800acf0 <USBH_MSC_DecodeCSW>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800aba2:	7d7b      	ldrb	r3, [r7, #21]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d102      	bne.n	800abae <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800aba8:	2300      	movs	r3, #0
 800abaa:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800abac:	e068      	b.n	800ac80 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800abae:	2302      	movs	r3, #2
 800abb0:	75fb      	strb	r3, [r7, #23]
      break;
 800abb2:	e065      	b.n	800ac80 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800abb4:	7d3b      	ldrb	r3, [r7, #20]
 800abb6:	2b05      	cmp	r3, #5
 800abb8:	d162      	bne.n	800ac80 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	2209      	movs	r2, #9
 800abbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800abc2:	e05d      	b.n	800ac80 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800abc4:	78fb      	ldrb	r3, [r7, #3]
 800abc6:	2200      	movs	r2, #0
 800abc8:	4619      	mov	r1, r3
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 f864 	bl	800ac98 <USBH_MSC_BOT_Abort>
 800abd0:	4603      	mov	r3, r0
 800abd2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800abd4:	7dbb      	ldrb	r3, [r7, #22]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d104      	bne.n	800abe4 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	2207      	movs	r2, #7
 800abde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800abe2:	e04f      	b.n	800ac84 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800abe4:	7dbb      	ldrb	r3, [r7, #22]
 800abe6:	2b04      	cmp	r3, #4
 800abe8:	d14c      	bne.n	800ac84 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	220b      	movs	r2, #11
 800abee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800abf2:	e047      	b.n	800ac84 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800abf4:	78fb      	ldrb	r3, [r7, #3]
 800abf6:	2201      	movs	r2, #1
 800abf8:	4619      	mov	r1, r3
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 f84c 	bl	800ac98 <USBH_MSC_BOT_Abort>
 800ac00:	4603      	mov	r3, r0
 800ac02:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800ac04:	7dbb      	ldrb	r3, [r7, #22]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d11d      	bne.n	800ac46 <USBH_MSC_BOT_Process+0x34a>
      {
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	795b      	ldrb	r3, [r3, #5]
 800ac0e:	4619      	mov	r1, r3
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f005 fe0d 	bl	8010830 <USBH_LL_GetToggle>
 800ac16:	4603      	mov	r3, r0
 800ac18:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	7959      	ldrb	r1, [r3, #5]
 800ac1e:	7bfb      	ldrb	r3, [r7, #15]
 800ac20:	f1c3 0301 	rsb	r3, r3, #1
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	461a      	mov	r2, r3
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f005 fdd1 	bl	80107d0 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	791b      	ldrb	r3, [r3, #4]
 800ac32:	2200      	movs	r2, #0
 800ac34:	4619      	mov	r1, r3
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f005 fdca 	bl	80107d0 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	2209      	movs	r2, #9
 800ac40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800ac44:	e020      	b.n	800ac88 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800ac46:	7dbb      	ldrb	r3, [r7, #22]
 800ac48:	2b04      	cmp	r3, #4
 800ac4a:	d11d      	bne.n	800ac88 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	220b      	movs	r2, #11
 800ac50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ac54:	e018      	b.n	800ac88 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f7ff fdf3 	bl	800a842 <USBH_MSC_BOT_REQ_Reset>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800ac60:	7dfb      	ldrb	r3, [r7, #23]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d112      	bne.n	800ac8c <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	2201      	movs	r2, #1
 800ac6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800ac6e:	e00d      	b.n	800ac8c <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800ac70:	bf00      	nop
 800ac72:	e00c      	b.n	800ac8e <USBH_MSC_BOT_Process+0x392>
      break;
 800ac74:	bf00      	nop
 800ac76:	e00a      	b.n	800ac8e <USBH_MSC_BOT_Process+0x392>
      break;
 800ac78:	bf00      	nop
 800ac7a:	e008      	b.n	800ac8e <USBH_MSC_BOT_Process+0x392>
      break;
 800ac7c:	bf00      	nop
 800ac7e:	e006      	b.n	800ac8e <USBH_MSC_BOT_Process+0x392>
      break;
 800ac80:	bf00      	nop
 800ac82:	e004      	b.n	800ac8e <USBH_MSC_BOT_Process+0x392>
      break;
 800ac84:	bf00      	nop
 800ac86:	e002      	b.n	800ac8e <USBH_MSC_BOT_Process+0x392>
      break;
 800ac88:	bf00      	nop
 800ac8a:	e000      	b.n	800ac8e <USBH_MSC_BOT_Process+0x392>
      break;
 800ac8c:	bf00      	nop
  }
  return status;
 800ac8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3718      	adds	r7, #24
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	460b      	mov	r3, r1
 800aca2:	70fb      	strb	r3, [r7, #3]
 800aca4:	4613      	mov	r3, r2
 800aca6:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800aca8:	2302      	movs	r3, #2
 800acaa:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acb2:	69db      	ldr	r3, [r3, #28]
 800acb4:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800acb6:	78bb      	ldrb	r3, [r7, #2]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d002      	beq.n	800acc2 <USBH_MSC_BOT_Abort+0x2a>
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d009      	beq.n	800acd4 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800acc0:	e011      	b.n	800ace6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	79db      	ldrb	r3, [r3, #7]
 800acc6:	4619      	mov	r1, r3
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f001 f9eb 	bl	800c0a4 <USBH_ClrFeature>
 800acce:	4603      	mov	r3, r0
 800acd0:	73fb      	strb	r3, [r7, #15]
      break;
 800acd2:	e008      	b.n	800ace6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	799b      	ldrb	r3, [r3, #6]
 800acd8:	4619      	mov	r1, r3
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f001 f9e2 	bl	800c0a4 <USBH_ClrFeature>
 800ace0:	4603      	mov	r3, r0
 800ace2:	73fb      	strb	r3, [r7, #15]
      break;
 800ace4:	bf00      	nop
  }
  return status;
 800ace6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3710      	adds	r7, #16
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acfe:	69db      	ldr	r3, [r3, #28]
 800ad00:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800ad02:	2301      	movs	r3, #1
 800ad04:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	791b      	ldrb	r3, [r3, #4]
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f005 fca3 	bl	8010658 <USBH_LL_GetLastXferSize>
 800ad12:	4603      	mov	r3, r0
 800ad14:	2b0d      	cmp	r3, #13
 800ad16:	d002      	beq.n	800ad1e <USBH_MSC_DecodeCSW+0x2e>
    (9) Ho > Dn (Host expects to send data to the device,
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/

    status = BOT_CSW_PHASE_ERROR;
 800ad18:	2302      	movs	r3, #2
 800ad1a:	73fb      	strb	r3, [r7, #15]
 800ad1c:	e024      	b.n	800ad68 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad22:	4a14      	ldr	r2, [pc, #80]	; (800ad74 <USBH_MSC_DecodeCSW+0x84>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d11d      	bne.n	800ad64 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d119      	bne.n	800ad68 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d102      	bne.n	800ad44 <USBH_MSC_DecodeCSW+0x54>
          Device intends to send data to the host)
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_CMD_PASSED;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	73fb      	strb	r3, [r7, #15]
 800ad42:	e011      	b.n	800ad68 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	d102      	bne.n	800ad54 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	73fb      	strb	r3, [r7, #15]
 800ad52:	e009      	b.n	800ad68 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ad5a:	2b02      	cmp	r3, #2
 800ad5c:	d104      	bne.n	800ad68 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800ad5e:	2302      	movs	r3, #2
 800ad60:	73fb      	strb	r3, [r7, #15]
 800ad62:	e001      	b.n	800ad68 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800ad64:	2302      	movs	r3, #2
 800ad66:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800ad68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3710      	adds	r7, #16
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	53425355 	.word	0x53425355

0800ad78 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b084      	sub	sp, #16
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	460b      	mov	r3, r1
 800ad82:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef error = USBH_FAIL;
 800ad84:	2302      	movs	r3, #2
 800ad86:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad8e:	69db      	ldr	r3, [r3, #28]
 800ad90:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d002      	beq.n	800ada2 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800ad9c:	2b02      	cmp	r3, #2
 800ad9e:	d021      	beq.n	800ade4 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800ada0:	e028      	b.n	800adf4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	2200      	movs	r2, #0
 800ada6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	2200      	movs	r2, #0
 800adac:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	220a      	movs	r2, #10
 800adb4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	3363      	adds	r3, #99	; 0x63
 800adbc:	2210      	movs	r2, #16
 800adbe:	2100      	movs	r1, #0
 800adc0:	4618      	mov	r0, r3
 800adc2:	f005 fe75 	bl	8010ab0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_TEST_UNIT_READY;
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	2200      	movs	r2, #0
 800adca:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	2201      	movs	r2, #1
 800add2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	2202      	movs	r2, #2
 800adda:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800adde:	2301      	movs	r3, #1
 800ade0:	73fb      	strb	r3, [r7, #15]
      break;
 800ade2:	e007      	b.n	800adf4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ade4:	78fb      	ldrb	r3, [r7, #3]
 800ade6:	4619      	mov	r1, r3
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f7ff fd87 	bl	800a8fc <USBH_MSC_BOT_Process>
 800adee:	4603      	mov	r3, r0
 800adf0:	73fb      	strb	r3, [r7, #15]
      break;
 800adf2:	bf00      	nop
  }

  return error;
 800adf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3710      	adds	r7, #16
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}

0800adfe <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b086      	sub	sp, #24
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	60f8      	str	r0, [r7, #12]
 800ae06:	460b      	mov	r3, r1
 800ae08:	607a      	str	r2, [r7, #4]
 800ae0a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_BUSY;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae16:	69db      	ldr	r3, [r3, #28]
 800ae18:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	d002      	beq.n	800ae2a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800ae24:	2b02      	cmp	r3, #2
 800ae26:	d027      	beq.n	800ae78 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800ae28:	e05f      	b.n	800aeea <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	2208      	movs	r2, #8
 800ae2e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	2280      	movs	r2, #128	; 0x80
 800ae34:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	220a      	movs	r2, #10
 800ae3c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	3363      	adds	r3, #99	; 0x63
 800ae44:	2210      	movs	r2, #16
 800ae46:	2100      	movs	r1, #0
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f005 fe31 	bl	8010ab0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	2225      	movs	r2, #37	; 0x25
 800ae52:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	2201      	movs	r2, #1
 800ae5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	2202      	movs	r2, #2
 800ae62:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	f103 0210 	add.w	r2, r3, #16
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ae72:	2301      	movs	r3, #1
 800ae74:	75fb      	strb	r3, [r7, #23]
      break;
 800ae76:	e038      	b.n	800aeea <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ae78:	7afb      	ldrb	r3, [r7, #11]
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	68f8      	ldr	r0, [r7, #12]
 800ae7e:	f7ff fd3d 	bl	800a8fc <USBH_MSC_BOT_Process>
 800ae82:	4603      	mov	r3, r0
 800ae84:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ae86:	7dfb      	ldrb	r3, [r7, #23]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d12d      	bne.n	800aee8 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae92:	3303      	adds	r3, #3
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	461a      	mov	r2, r3
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae9e:	3302      	adds	r3, #2
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	021b      	lsls	r3, r3, #8
 800aea4:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aeac:	3301      	adds	r3, #1
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800aeb2:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	061b      	lsls	r3, r3, #24
 800aebe:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aeca:	3307      	adds	r3, #7
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	b29a      	uxth	r2, r3
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aed6:	3306      	adds	r3, #6
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	021b      	lsls	r3, r3, #8
 800aede:	b29b      	uxth	r3, r3
 800aee0:	4313      	orrs	r3, r2
 800aee2:	b29a      	uxth	r2, r3
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	809a      	strh	r2, [r3, #4]
      break;
 800aee8:	bf00      	nop
  }

  return error;
 800aeea:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3718      	adds	r7, #24
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b086      	sub	sp, #24
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	460b      	mov	r3, r1
 800aefe:	607a      	str	r2, [r7, #4]
 800af00:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800af02:	2302      	movs	r3, #2
 800af04:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af0c:	69db      	ldr	r3, [r3, #28]
 800af0e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800af16:	2b01      	cmp	r3, #1
 800af18:	d002      	beq.n	800af20 <USBH_MSC_SCSI_Inquiry+0x2c>
 800af1a:	2b02      	cmp	r3, #2
 800af1c:	d03d      	beq.n	800af9a <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800af1e:	e089      	b.n	800b034 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	2224      	movs	r2, #36	; 0x24
 800af24:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	2280      	movs	r2, #128	; 0x80
 800af2a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	220a      	movs	r2, #10
 800af32:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	3363      	adds	r3, #99	; 0x63
 800af3a:	220a      	movs	r2, #10
 800af3c:	2100      	movs	r1, #0
 800af3e:	4618      	mov	r0, r3
 800af40:	f005 fdb6 	bl	8010ab0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_INQUIRY;
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	2212      	movs	r2, #18
 800af48:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 800af4c:	7afb      	ldrb	r3, [r7, #11]
 800af4e:	015b      	lsls	r3, r3, #5
 800af50:	b2da      	uxtb	r2, r3
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	2200      	movs	r2, #0
 800af64:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = 0x24U;
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	2224      	movs	r2, #36	; 0x24
 800af6c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	2200      	movs	r2, #0
 800af74:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	2201      	movs	r2, #1
 800af7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	2202      	movs	r2, #2
 800af84:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	f103 0210 	add.w	r2, r3, #16
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800af94:	2301      	movs	r3, #1
 800af96:	75fb      	strb	r3, [r7, #23]
      break;
 800af98:	e04c      	b.n	800b034 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800af9a:	7afb      	ldrb	r3, [r7, #11]
 800af9c:	4619      	mov	r1, r3
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	f7ff fcac 	bl	800a8fc <USBH_MSC_BOT_Process>
 800afa4:	4603      	mov	r3, r0
 800afa6:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800afa8:	7dfb      	ldrb	r3, [r7, #23]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d141      	bne.n	800b032 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800afae:	2222      	movs	r2, #34	; 0x22
 800afb0:	2100      	movs	r1, #0
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f005 fd7c 	bl	8010ab0 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	f003 031f 	and.w	r3, r3, #31
 800afc4:	b2da      	uxtb	r2, r3
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	095b      	lsrs	r3, r3, #5
 800afd4:	b2da      	uxtb	r2, r3
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afe0:	3301      	adds	r3, #1
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	b25b      	sxtb	r3, r3
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	da03      	bge.n	800aff2 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2201      	movs	r2, #1
 800afee:	709a      	strb	r2, [r3, #2]
 800aff0:	e002      	b.n	800aff8 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2200      	movs	r2, #0
 800aff6:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	1cd8      	adds	r0, r3, #3
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b002:	3308      	adds	r3, #8
 800b004:	2208      	movs	r2, #8
 800b006:	4619      	mov	r1, r3
 800b008:	f005 fdc0 	bl	8010b8c <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f103 000c 	add.w	r0, r3, #12
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b018:	3310      	adds	r3, #16
 800b01a:	2210      	movs	r2, #16
 800b01c:	4619      	mov	r1, r3
 800b01e:	f005 fdb5 	bl	8010b8c <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	331d      	adds	r3, #29
 800b026:	693a      	ldr	r2, [r7, #16]
 800b028:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800b02c:	3220      	adds	r2, #32
 800b02e:	6812      	ldr	r2, [r2, #0]
 800b030:	601a      	str	r2, [r3, #0]
      break;
 800b032:	bf00      	nop
  }

  return error;
 800b034:	7dfb      	ldrb	r3, [r7, #23]
}
 800b036:	4618      	mov	r0, r3
 800b038:	3718      	adds	r7, #24
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b086      	sub	sp, #24
 800b042:	af00      	add	r7, sp, #0
 800b044:	60f8      	str	r0, [r7, #12]
 800b046:	460b      	mov	r3, r1
 800b048:	607a      	str	r2, [r7, #4]
 800b04a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800b04c:	2302      	movs	r3, #2
 800b04e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b056:	69db      	ldr	r3, [r3, #28]
 800b058:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b060:	2b01      	cmp	r3, #1
 800b062:	d002      	beq.n	800b06a <USBH_MSC_SCSI_RequestSense+0x2c>
 800b064:	2b02      	cmp	r3, #2
 800b066:	d03d      	beq.n	800b0e4 <USBH_MSC_SCSI_RequestSense+0xa6>

      }
      break;

    default:
      break;
 800b068:	e063      	b.n	800b132 <USBH_MSC_SCSI_RequestSense+0xf4>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	220e      	movs	r2, #14
 800b06e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	2280      	movs	r2, #128	; 0x80
 800b074:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	220a      	movs	r2, #10
 800b07c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	3363      	adds	r3, #99	; 0x63
 800b084:	2210      	movs	r2, #16
 800b086:	2100      	movs	r1, #0
 800b088:	4618      	mov	r0, r3
 800b08a:	f005 fd11 	bl	8010ab0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_REQUEST_SENSE;
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	2203      	movs	r2, #3
 800b092:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 800b096:	7afb      	ldrb	r3, [r7, #11]
 800b098:	015b      	lsls	r3, r3, #5
 800b09a:	b2da      	uxtb	r2, r3
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = DATA_LEN_REQUEST_SENSE;
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	220e      	movs	r2, #14
 800b0b6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	2202      	movs	r2, #2
 800b0ce:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	f103 0210 	add.w	r2, r3, #16
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	75fb      	strb	r3, [r7, #23]
      break;
 800b0e2:	e026      	b.n	800b132 <USBH_MSC_SCSI_RequestSense+0xf4>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b0e4:	7afb      	ldrb	r3, [r7, #11]
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	68f8      	ldr	r0, [r7, #12]
 800b0ea:	f7ff fc07 	bl	800a8fc <USBH_MSC_BOT_Process>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b0f2:	7dfb      	ldrb	r3, [r7, #23]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d11b      	bne.n	800b130 <USBH_MSC_SCSI_RequestSense+0xf2>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0fe:	3302      	adds	r3, #2
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	f003 030f 	and.w	r3, r3, #15
 800b106:	b2da      	uxtb	r2, r3
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b112:	7b1a      	ldrb	r2, [r3, #12]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b11e:	7b5a      	ldrb	r2, [r3, #13]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	709a      	strb	r2, [r3, #2]
        if (sense_data->asc == SCSI_ASC_MEDIUM_NOT_PRESENT)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	785b      	ldrb	r3, [r3, #1]
 800b128:	2b3a      	cmp	r3, #58	; 0x3a
 800b12a:	d101      	bne.n	800b130 <USBH_MSC_SCSI_RequestSense+0xf2>
          error = USBH_UNRECOVERED_ERROR;
 800b12c:	2304      	movs	r3, #4
 800b12e:	75fb      	strb	r3, [r7, #23]
      break;
 800b130:	bf00      	nop
  }

  return error;
 800b132:	7dfb      	ldrb	r3, [r7, #23]
}
 800b134:	4618      	mov	r0, r3
 800b136:	3718      	adds	r7, #24
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b086      	sub	sp, #24
 800b140:	af00      	add	r7, sp, #0
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	607a      	str	r2, [r7, #4]
 800b146:	603b      	str	r3, [r7, #0]
 800b148:	460b      	mov	r3, r1
 800b14a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800b14c:	2302      	movs	r3, #2
 800b14e:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b156:	69db      	ldr	r3, [r3, #28]
 800b158:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b160:	2b01      	cmp	r3, #1
 800b162:	d002      	beq.n	800b16a <USBH_MSC_SCSI_Write+0x2e>
 800b164:	2b02      	cmp	r3, #2
 800b166:	d04c      	beq.n	800b202 <USBH_MSC_SCSI_Write+0xc6>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b168:	e053      	b.n	800b212 <USBH_MSC_SCSI_Write+0xd6>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 800b16a:	7afb      	ldrb	r3, [r7, #11]
 800b16c:	693a      	ldr	r2, [r7, #16]
 800b16e:	2134      	movs	r1, #52	; 0x34
 800b170:	fb01 f303 	mul.w	r3, r1, r3
 800b174:	4413      	add	r3, r2
 800b176:	3398      	adds	r3, #152	; 0x98
 800b178:	881b      	ldrh	r3, [r3, #0]
 800b17a:	461a      	mov	r2, r3
 800b17c:	6a3b      	ldr	r3, [r7, #32]
 800b17e:	fb03 f202 	mul.w	r2, r3, r2
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	2200      	movs	r2, #0
 800b18a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	220a      	movs	r2, #10
 800b192:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	3363      	adds	r3, #99	; 0x63
 800b19a:	2210      	movs	r2, #16
 800b19c:	2100      	movs	r1, #0
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f005 fc86 	bl	8010ab0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_WRITE10;
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	222a      	movs	r2, #42	; 0x2a
 800b1a8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 800b1ac:	79fa      	ldrb	r2, [r7, #7]
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 800b1b4:	79ba      	ldrb	r2, [r7, #6]
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 800b1bc:	797a      	ldrb	r2, [r7, #5]
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
 800b1c4:	1d3b      	adds	r3, r7, #4
 800b1c6:	781a      	ldrb	r2, [r3, #0]
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 800b1ce:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8] = (((uint8_t *)(void *)&length)[0]);
 800b1d8:	f107 0320 	add.w	r3, r7, #32
 800b1dc:	781a      	ldrb	r2, [r3, #0]
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	2202      	movs	r2, #2
 800b1f0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	683a      	ldr	r2, [r7, #0]
 800b1f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	75fb      	strb	r3, [r7, #23]
      break;
 800b200:	e007      	b.n	800b212 <USBH_MSC_SCSI_Write+0xd6>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b202:	7afb      	ldrb	r3, [r7, #11]
 800b204:	4619      	mov	r1, r3
 800b206:	68f8      	ldr	r0, [r7, #12]
 800b208:	f7ff fb78 	bl	800a8fc <USBH_MSC_BOT_Process>
 800b20c:	4603      	mov	r3, r0
 800b20e:	75fb      	strb	r3, [r7, #23]
      break;
 800b210:	bf00      	nop
  }

  return error;
 800b212:	7dfb      	ldrb	r3, [r7, #23]
}
 800b214:	4618      	mov	r0, r3
 800b216:	3718      	adds	r7, #24
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b086      	sub	sp, #24
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	607a      	str	r2, [r7, #4]
 800b226:	603b      	str	r3, [r7, #0]
 800b228:	460b      	mov	r3, r1
 800b22a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800b22c:	2302      	movs	r3, #2
 800b22e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b236:	69db      	ldr	r3, [r3, #28]
 800b238:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b240:	2b01      	cmp	r3, #1
 800b242:	d002      	beq.n	800b24a <USBH_MSC_SCSI_Read+0x2e>
 800b244:	2b02      	cmp	r3, #2
 800b246:	d04c      	beq.n	800b2e2 <USBH_MSC_SCSI_Read+0xc6>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b248:	e053      	b.n	800b2f2 <USBH_MSC_SCSI_Read+0xd6>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 800b24a:	7afb      	ldrb	r3, [r7, #11]
 800b24c:	693a      	ldr	r2, [r7, #16]
 800b24e:	2134      	movs	r1, #52	; 0x34
 800b250:	fb01 f303 	mul.w	r3, r1, r3
 800b254:	4413      	add	r3, r2
 800b256:	3398      	adds	r3, #152	; 0x98
 800b258:	881b      	ldrh	r3, [r3, #0]
 800b25a:	461a      	mov	r2, r3
 800b25c:	6a3b      	ldr	r3, [r7, #32]
 800b25e:	fb03 f202 	mul.w	r2, r3, r2
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	2280      	movs	r2, #128	; 0x80
 800b26a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	220a      	movs	r2, #10
 800b272:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	3363      	adds	r3, #99	; 0x63
 800b27a:	2210      	movs	r2, #16
 800b27c:	2100      	movs	r1, #0
 800b27e:	4618      	mov	r0, r3
 800b280:	f005 fc16 	bl	8010ab0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_READ10;
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	2228      	movs	r2, #40	; 0x28
 800b288:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 800b28c:	79fa      	ldrb	r2, [r7, #7]
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 800b294:	79ba      	ldrb	r2, [r7, #6]
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 800b29c:	797a      	ldrb	r2, [r7, #5]
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
 800b2a4:	1d3b      	adds	r3, r7, #4
 800b2a6:	781a      	ldrb	r2, [r3, #0]
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 800b2ae:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8] = (((uint8_t *)(void *)&length)[0]);
 800b2b8:	f107 0320 	add.w	r3, r7, #32
 800b2bc:	781a      	ldrb	r2, [r3, #0]
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	2202      	movs	r2, #2
 800b2d0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	683a      	ldr	r2, [r7, #0]
 800b2d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	75fb      	strb	r3, [r7, #23]
      break;
 800b2e0:	e007      	b.n	800b2f2 <USBH_MSC_SCSI_Read+0xd6>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b2e2:	7afb      	ldrb	r3, [r7, #11]
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	68f8      	ldr	r0, [r7, #12]
 800b2e8:	f7ff fb08 	bl	800a8fc <USBH_MSC_BOT_Process>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	75fb      	strb	r3, [r7, #23]
      break;
 800b2f0:	bf00      	nop
  }

  return error;
 800b2f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3718      	adds	r7, #24
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b084      	sub	sp, #16
 800b300:	af00      	add	r7, sp, #0
 800b302:	60f8      	str	r0, [r7, #12]
 800b304:	60b9      	str	r1, [r7, #8]
 800b306:	4613      	mov	r3, r2
 800b308:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d101      	bne.n	800b314 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b310:	2302      	movs	r3, #2
 800b312:	e029      	b.n	800b368 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	79fa      	ldrb	r2, [r7, #7]
 800b318:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2200      	movs	r2, #0
 800b320:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2200      	movs	r2, #0
 800b328:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800b32c:	68f8      	ldr	r0, [r7, #12]
 800b32e:	f000 f81f 	bl	800b370 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2200      	movs	r2, #0
 800b336:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2200      	movs	r2, #0
 800b33e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2200      	movs	r2, #0
 800b346:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2200      	movs	r2, #0
 800b34e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d003      	beq.n	800b360 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	68ba      	ldr	r2, [r7, #8]
 800b35c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800b360:	68f8      	ldr	r0, [r7, #12]
 800b362:	f005 f8c5 	bl	80104f0 <USBH_LL_Init>

  return USBH_OK;
 800b366:	2300      	movs	r3, #0
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3710      	adds	r7, #16
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b378:	2300      	movs	r3, #0
 800b37a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b37c:	2300      	movs	r3, #0
 800b37e:	60fb      	str	r3, [r7, #12]
 800b380:	e009      	b.n	800b396 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b382:	687a      	ldr	r2, [r7, #4]
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	33e0      	adds	r3, #224	; 0xe0
 800b388:	009b      	lsls	r3, r3, #2
 800b38a:	4413      	add	r3, r2
 800b38c:	2200      	movs	r2, #0
 800b38e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	3301      	adds	r3, #1
 800b394:	60fb      	str	r3, [r7, #12]
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2b0f      	cmp	r3, #15
 800b39a:	d9f2      	bls.n	800b382 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b39c:	2300      	movs	r3, #0
 800b39e:	60fb      	str	r3, [r7, #12]
 800b3a0:	e009      	b.n	800b3b6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	4413      	add	r3, r2
 800b3a8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	60fb      	str	r3, [r7, #12]
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3bc:	d3f1      	bcc.n	800b3a2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2201      	movs	r2, #1
 800b3dc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2240      	movs	r2, #64	; 0x40
 800b3e2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	331c      	adds	r3, #28
 800b40e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b412:	2100      	movs	r1, #0
 800b414:	4618      	mov	r0, r3
 800b416:	f005 fb4b 	bl	8010ab0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b420:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b424:	2100      	movs	r1, #0
 800b426:	4618      	mov	r0, r3
 800b428:	f005 fb42 	bl	8010ab0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f203 3326 	addw	r3, r3, #806	; 0x326
 800b432:	2212      	movs	r2, #18
 800b434:	2100      	movs	r1, #0
 800b436:	4618      	mov	r0, r3
 800b438:	f005 fb3a 	bl	8010ab0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b442:	223e      	movs	r2, #62	; 0x3e
 800b444:	2100      	movs	r1, #0
 800b446:	4618      	mov	r0, r3
 800b448:	f005 fb32 	bl	8010ab0 <memset>

  return USBH_OK;
 800b44c:	2300      	movs	r3, #0
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3710      	adds	r7, #16
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}

0800b456 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b456:	b480      	push	{r7}
 800b458:	b085      	sub	sp, #20
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
 800b45e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b460:	2300      	movs	r3, #0
 800b462:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d016      	beq.n	800b498 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b470:	2b00      	cmp	r3, #0
 800b472:	d10e      	bne.n	800b492 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b47a:	1c59      	adds	r1, r3, #1
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	33de      	adds	r3, #222	; 0xde
 800b486:	6839      	ldr	r1, [r7, #0]
 800b488:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b48c:	2300      	movs	r3, #0
 800b48e:	73fb      	strb	r3, [r7, #15]
 800b490:	e004      	b.n	800b49c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b492:	2302      	movs	r3, #2
 800b494:	73fb      	strb	r3, [r7, #15]
 800b496:	e001      	b.n	800b49c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b498:	2302      	movs	r3, #2
 800b49a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b49c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3714      	adds	r7, #20
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr

0800b4aa <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b4aa:	b480      	push	{r7}
 800b4ac:	b085      	sub	sp, #20
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	6078      	str	r0, [r7, #4]
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b4c0:	78fa      	ldrb	r2, [r7, #3]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d204      	bcs.n	800b4d0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	78fa      	ldrb	r2, [r7, #3]
 800b4ca:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b4ce:	e001      	b.n	800b4d4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b4d0:	2302      	movs	r3, #2
 800b4d2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b4d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3714      	adds	r7, #20
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr

0800b4e2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b4e2:	b480      	push	{r7}
 800b4e4:	b087      	sub	sp, #28
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	6078      	str	r0, [r7, #4]
 800b4ea:	4608      	mov	r0, r1
 800b4ec:	4611      	mov	r1, r2
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	70fb      	strb	r3, [r7, #3]
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	70bb      	strb	r3, [r7, #2]
 800b4f8:	4613      	mov	r3, r2
 800b4fa:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b500:	2300      	movs	r3, #0
 800b502:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b50a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b50c:	e025      	b.n	800b55a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b50e:	7dfb      	ldrb	r3, [r7, #23]
 800b510:	221a      	movs	r2, #26
 800b512:	fb02 f303 	mul.w	r3, r2, r3
 800b516:	3308      	adds	r3, #8
 800b518:	68fa      	ldr	r2, [r7, #12]
 800b51a:	4413      	add	r3, r2
 800b51c:	3302      	adds	r3, #2
 800b51e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	795b      	ldrb	r3, [r3, #5]
 800b524:	78fa      	ldrb	r2, [r7, #3]
 800b526:	429a      	cmp	r2, r3
 800b528:	d002      	beq.n	800b530 <USBH_FindInterface+0x4e>
 800b52a:	78fb      	ldrb	r3, [r7, #3]
 800b52c:	2bff      	cmp	r3, #255	; 0xff
 800b52e:	d111      	bne.n	800b554 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b534:	78ba      	ldrb	r2, [r7, #2]
 800b536:	429a      	cmp	r2, r3
 800b538:	d002      	beq.n	800b540 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b53a:	78bb      	ldrb	r3, [r7, #2]
 800b53c:	2bff      	cmp	r3, #255	; 0xff
 800b53e:	d109      	bne.n	800b554 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b544:	787a      	ldrb	r2, [r7, #1]
 800b546:	429a      	cmp	r2, r3
 800b548:	d002      	beq.n	800b550 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b54a:	787b      	ldrb	r3, [r7, #1]
 800b54c:	2bff      	cmp	r3, #255	; 0xff
 800b54e:	d101      	bne.n	800b554 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b550:	7dfb      	ldrb	r3, [r7, #23]
 800b552:	e006      	b.n	800b562 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b554:	7dfb      	ldrb	r3, [r7, #23]
 800b556:	3301      	adds	r3, #1
 800b558:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b55a:	7dfb      	ldrb	r3, [r7, #23]
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d9d6      	bls.n	800b50e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b560:	23ff      	movs	r3, #255	; 0xff
}
 800b562:	4618      	mov	r0, r3
 800b564:	371c      	adds	r7, #28
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr

0800b56e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800b56e:	b580      	push	{r7, lr}
 800b570:	b082      	sub	sp, #8
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f004 fff6 	bl	8010568 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b57c:	2101      	movs	r1, #1
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f005 f90f 	bl	80107a2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b584:	2300      	movs	r3, #0
}
 800b586:	4618      	mov	r0, r3
 800b588:	3708      	adds	r7, #8
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
	...

0800b590 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b088      	sub	sp, #32
 800b594:	af04      	add	r7, sp, #16
 800b596:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b598:	2302      	movs	r3, #2
 800b59a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b59c:	2300      	movs	r3, #0
 800b59e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d102      	bne.n	800b5b2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2203      	movs	r2, #3
 800b5b0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	b2db      	uxtb	r3, r3
 800b5b8:	2b0b      	cmp	r3, #11
 800b5ba:	f200 81be 	bhi.w	800b93a <USBH_Process+0x3aa>
 800b5be:	a201      	add	r2, pc, #4	; (adr r2, 800b5c4 <USBH_Process+0x34>)
 800b5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5c4:	0800b5f5 	.word	0x0800b5f5
 800b5c8:	0800b627 	.word	0x0800b627
 800b5cc:	0800b68f 	.word	0x0800b68f
 800b5d0:	0800b8d5 	.word	0x0800b8d5
 800b5d4:	0800b93b 	.word	0x0800b93b
 800b5d8:	0800b733 	.word	0x0800b733
 800b5dc:	0800b87b 	.word	0x0800b87b
 800b5e0:	0800b769 	.word	0x0800b769
 800b5e4:	0800b789 	.word	0x0800b789
 800b5e8:	0800b7a9 	.word	0x0800b7a9
 800b5ec:	0800b7ed 	.word	0x0800b7ed
 800b5f0:	0800b8bd 	.word	0x0800b8bd
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	f000 819e 	beq.w	800b93e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2201      	movs	r2, #1
 800b606:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b608:	20c8      	movs	r0, #200	; 0xc8
 800b60a:	f005 f941 	bl	8010890 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f005 f807 	bl	8010622 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2200      	movs	r2, #0
 800b618:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2200      	movs	r2, #0
 800b620:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b624:	e18b      	b.n	800b93e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	d107      	bne.n	800b640 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2202      	movs	r2, #2
 800b63c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b63e:	e18d      	b.n	800b95c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b646:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b64a:	d914      	bls.n	800b676 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b652:	3301      	adds	r3, #1
 800b654:	b2da      	uxtb	r2, r3
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b662:	2b03      	cmp	r3, #3
 800b664:	d903      	bls.n	800b66e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	220d      	movs	r2, #13
 800b66a:	701a      	strb	r2, [r3, #0]
      break;
 800b66c:	e176      	b.n	800b95c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2200      	movs	r2, #0
 800b672:	701a      	strb	r2, [r3, #0]
      break;
 800b674:	e172      	b.n	800b95c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b67c:	f103 020a 	add.w	r2, r3, #10
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b686:	200a      	movs	r0, #10
 800b688:	f005 f902 	bl	8010890 <USBH_Delay>
      break;
 800b68c:	e166      	b.n	800b95c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b694:	2b00      	cmp	r3, #0
 800b696:	d005      	beq.n	800b6a4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b69e:	2104      	movs	r1, #4
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b6a4:	2064      	movs	r0, #100	; 0x64
 800b6a6:	f005 f8f3 	bl	8010890 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f004 ff92 	bl	80105d4 <USBH_LL_GetSpeed>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2205      	movs	r2, #5
 800b6be:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b6c0:	2100      	movs	r1, #0
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f001 faab 	bl	800cc1e <USBH_AllocPipe>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b6d0:	2180      	movs	r1, #128	; 0x80
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f001 faa3 	bl	800cc1e <USBH_AllocPipe>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	461a      	mov	r2, r3
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	7919      	ldrb	r1, [r3, #4]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b6f4:	b292      	uxth	r2, r2
 800b6f6:	9202      	str	r2, [sp, #8]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	9201      	str	r2, [sp, #4]
 800b6fc:	9300      	str	r3, [sp, #0]
 800b6fe:	4603      	mov	r3, r0
 800b700:	2280      	movs	r2, #128	; 0x80
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f001 fa5c 	bl	800cbc0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	7959      	ldrb	r1, [r3, #5]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b71c:	b292      	uxth	r2, r2
 800b71e:	9202      	str	r2, [sp, #8]
 800b720:	2200      	movs	r2, #0
 800b722:	9201      	str	r2, [sp, #4]
 800b724:	9300      	str	r3, [sp, #0]
 800b726:	4603      	mov	r3, r0
 800b728:	2200      	movs	r2, #0
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f001 fa48 	bl	800cbc0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b730:	e114      	b.n	800b95c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 f918 	bl	800b968 <USBH_HandleEnum>
 800b738:	4603      	mov	r3, r0
 800b73a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b73c:	7bbb      	ldrb	r3, [r7, #14]
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	2b00      	cmp	r3, #0
 800b742:	f040 80fe 	bne.w	800b942 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2200      	movs	r2, #0
 800b74a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b754:	2b01      	cmp	r3, #1
 800b756:	d103      	bne.n	800b760 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2208      	movs	r2, #8
 800b75c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b75e:	e0f0      	b.n	800b942 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2207      	movs	r2, #7
 800b764:	701a      	strb	r2, [r3, #0]
      break;
 800b766:	e0ec      	b.n	800b942 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b76e:	2b00      	cmp	r3, #0
 800b770:	f000 80e9 	beq.w	800b946 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b77a:	2101      	movs	r1, #1
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2208      	movs	r2, #8
 800b784:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800b786:	e0de      	b.n	800b946 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b78e:	b29b      	uxth	r3, r3
 800b790:	4619      	mov	r1, r3
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 fc3f 	bl	800c016 <USBH_SetCfg>
 800b798:	4603      	mov	r3, r0
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	f040 80d5 	bne.w	800b94a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2209      	movs	r2, #9
 800b7a4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b7a6:	e0d0      	b.n	800b94a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b7ae:	f003 0320 	and.w	r3, r3, #32
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d016      	beq.n	800b7e4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b7b6:	2101      	movs	r1, #1
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f000 fc4f 	bl	800c05c <USBH_SetFeature>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b7c2:	7bbb      	ldrb	r3, [r7, #14]
 800b7c4:	b2db      	uxtb	r3, r3
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d103      	bne.n	800b7d2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	220a      	movs	r2, #10
 800b7ce:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b7d0:	e0bd      	b.n	800b94e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800b7d2:	7bbb      	ldrb	r3, [r7, #14]
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	2b03      	cmp	r3, #3
 800b7d8:	f040 80b9 	bne.w	800b94e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	220a      	movs	r2, #10
 800b7e0:	701a      	strb	r2, [r3, #0]
      break;
 800b7e2:	e0b4      	b.n	800b94e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	220a      	movs	r2, #10
 800b7e8:	701a      	strb	r2, [r3, #0]
      break;
 800b7ea:	e0b0      	b.n	800b94e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	f000 80ad 	beq.w	800b952 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b800:	2300      	movs	r3, #0
 800b802:	73fb      	strb	r3, [r7, #15]
 800b804:	e016      	b.n	800b834 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b806:	7bfa      	ldrb	r2, [r7, #15]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	32de      	adds	r2, #222	; 0xde
 800b80c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b810:	791a      	ldrb	r2, [r3, #4]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b818:	429a      	cmp	r2, r3
 800b81a:	d108      	bne.n	800b82e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b81c:	7bfa      	ldrb	r2, [r7, #15]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	32de      	adds	r2, #222	; 0xde
 800b822:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b82c:	e005      	b.n	800b83a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b82e:	7bfb      	ldrb	r3, [r7, #15]
 800b830:	3301      	adds	r3, #1
 800b832:	73fb      	strb	r3, [r7, #15]
 800b834:	7bfb      	ldrb	r3, [r7, #15]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d0e5      	beq.n	800b806 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b840:	2b00      	cmp	r3, #0
 800b842:	d016      	beq.n	800b872 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b84a:	689b      	ldr	r3, [r3, #8]
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	4798      	blx	r3
 800b850:	4603      	mov	r3, r0
 800b852:	2b00      	cmp	r3, #0
 800b854:	d109      	bne.n	800b86a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2206      	movs	r2, #6
 800b85a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b862:	2103      	movs	r1, #3
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b868:	e073      	b.n	800b952 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	220d      	movs	r2, #13
 800b86e:	701a      	strb	r2, [r3, #0]
      break;
 800b870:	e06f      	b.n	800b952 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	220d      	movs	r2, #13
 800b876:	701a      	strb	r2, [r3, #0]
      break;
 800b878:	e06b      	b.n	800b952 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b880:	2b00      	cmp	r3, #0
 800b882:	d017      	beq.n	800b8b4 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b88a:	691b      	ldr	r3, [r3, #16]
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	4798      	blx	r3
 800b890:	4603      	mov	r3, r0
 800b892:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b894:	7bbb      	ldrb	r3, [r7, #14]
 800b896:	b2db      	uxtb	r3, r3
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d103      	bne.n	800b8a4 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	220b      	movs	r2, #11
 800b8a0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b8a2:	e058      	b.n	800b956 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800b8a4:	7bbb      	ldrb	r3, [r7, #14]
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	2b02      	cmp	r3, #2
 800b8aa:	d154      	bne.n	800b956 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	220d      	movs	r2, #13
 800b8b0:	701a      	strb	r2, [r3, #0]
      break;
 800b8b2:	e050      	b.n	800b956 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	220d      	movs	r2, #13
 800b8b8:	701a      	strb	r2, [r3, #0]
      break;
 800b8ba:	e04c      	b.n	800b956 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d049      	beq.n	800b95a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8cc:	695b      	ldr	r3, [r3, #20]
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	4798      	blx	r3
      }
      break;
 800b8d2:	e042      	b.n	800b95a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f7ff fd47 	bl	800b370 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d009      	beq.n	800b900 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8f2:	68db      	ldr	r3, [r3, #12]
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b906:	2b00      	cmp	r3, #0
 800b908:	d005      	beq.n	800b916 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b910:	2105      	movs	r1, #5
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b91c:	b2db      	uxtb	r3, r3
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d107      	bne.n	800b932 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2200      	movs	r2, #0
 800b926:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f7ff fe1f 	bl	800b56e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b930:	e014      	b.n	800b95c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f004 fe18 	bl	8010568 <USBH_LL_Start>
      break;
 800b938:	e010      	b.n	800b95c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800b93a:	bf00      	nop
 800b93c:	e00e      	b.n	800b95c <USBH_Process+0x3cc>
      break;
 800b93e:	bf00      	nop
 800b940:	e00c      	b.n	800b95c <USBH_Process+0x3cc>
      break;
 800b942:	bf00      	nop
 800b944:	e00a      	b.n	800b95c <USBH_Process+0x3cc>
    break;
 800b946:	bf00      	nop
 800b948:	e008      	b.n	800b95c <USBH_Process+0x3cc>
      break;
 800b94a:	bf00      	nop
 800b94c:	e006      	b.n	800b95c <USBH_Process+0x3cc>
      break;
 800b94e:	bf00      	nop
 800b950:	e004      	b.n	800b95c <USBH_Process+0x3cc>
      break;
 800b952:	bf00      	nop
 800b954:	e002      	b.n	800b95c <USBH_Process+0x3cc>
      break;
 800b956:	bf00      	nop
 800b958:	e000      	b.n	800b95c <USBH_Process+0x3cc>
      break;
 800b95a:	bf00      	nop
  }
  return USBH_OK;
 800b95c:	2300      	movs	r3, #0
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3710      	adds	r7, #16
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop

0800b968 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b088      	sub	sp, #32
 800b96c:	af04      	add	r7, sp, #16
 800b96e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b970:	2301      	movs	r3, #1
 800b972:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b974:	2301      	movs	r3, #1
 800b976:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	785b      	ldrb	r3, [r3, #1]
 800b97c:	2b07      	cmp	r3, #7
 800b97e:	f200 81c1 	bhi.w	800bd04 <USBH_HandleEnum+0x39c>
 800b982:	a201      	add	r2, pc, #4	; (adr r2, 800b988 <USBH_HandleEnum+0x20>)
 800b984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b988:	0800b9a9 	.word	0x0800b9a9
 800b98c:	0800ba67 	.word	0x0800ba67
 800b990:	0800bad1 	.word	0x0800bad1
 800b994:	0800bb5f 	.word	0x0800bb5f
 800b998:	0800bbc9 	.word	0x0800bbc9
 800b99c:	0800bc39 	.word	0x0800bc39
 800b9a0:	0800bc7f 	.word	0x0800bc7f
 800b9a4:	0800bcc5 	.word	0x0800bcc5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b9a8:	2108      	movs	r1, #8
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 fa50 	bl	800be50 <USBH_Get_DevDesc>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b9b4:	7bbb      	ldrb	r3, [r7, #14]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d130      	bne.n	800ba1c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	7919      	ldrb	r1, [r3, #4]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b9de:	b292      	uxth	r2, r2
 800b9e0:	9202      	str	r2, [sp, #8]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	9201      	str	r2, [sp, #4]
 800b9e6:	9300      	str	r3, [sp, #0]
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2280      	movs	r2, #128	; 0x80
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f001 f8e7 	bl	800cbc0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	7959      	ldrb	r1, [r3, #5]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ba06:	b292      	uxth	r2, r2
 800ba08:	9202      	str	r2, [sp, #8]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	9201      	str	r2, [sp, #4]
 800ba0e:	9300      	str	r3, [sp, #0]
 800ba10:	4603      	mov	r3, r0
 800ba12:	2200      	movs	r2, #0
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f001 f8d3 	bl	800cbc0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ba1a:	e175      	b.n	800bd08 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ba1c:	7bbb      	ldrb	r3, [r7, #14]
 800ba1e:	2b03      	cmp	r3, #3
 800ba20:	f040 8172 	bne.w	800bd08 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	b2da      	uxtb	r2, r3
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ba3a:	2b03      	cmp	r3, #3
 800ba3c:	d903      	bls.n	800ba46 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	220d      	movs	r2, #13
 800ba42:	701a      	strb	r2, [r3, #0]
      break;
 800ba44:	e160      	b.n	800bd08 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	795b      	ldrb	r3, [r3, #5]
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f001 f907 	bl	800cc60 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	791b      	ldrb	r3, [r3, #4]
 800ba56:	4619      	mov	r1, r3
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f001 f901 	bl	800cc60 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2200      	movs	r2, #0
 800ba62:	701a      	strb	r2, [r3, #0]
      break;
 800ba64:	e150      	b.n	800bd08 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ba66:	2112      	movs	r1, #18
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 f9f1 	bl	800be50 <USBH_Get_DevDesc>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ba72:	7bbb      	ldrb	r3, [r7, #14]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d103      	bne.n	800ba80 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2202      	movs	r2, #2
 800ba7c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ba7e:	e145      	b.n	800bd0c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ba80:	7bbb      	ldrb	r3, [r7, #14]
 800ba82:	2b03      	cmp	r3, #3
 800ba84:	f040 8142 	bne.w	800bd0c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ba8e:	3301      	adds	r3, #1
 800ba90:	b2da      	uxtb	r2, r3
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ba9e:	2b03      	cmp	r3, #3
 800baa0:	d903      	bls.n	800baaa <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	220d      	movs	r2, #13
 800baa6:	701a      	strb	r2, [r3, #0]
      break;
 800baa8:	e130      	b.n	800bd0c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	795b      	ldrb	r3, [r3, #5]
 800baae:	4619      	mov	r1, r3
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f001 f8d5 	bl	800cc60 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	791b      	ldrb	r3, [r3, #4]
 800baba:	4619      	mov	r1, r3
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f001 f8cf 	bl	800cc60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2200      	movs	r2, #0
 800bac6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2200      	movs	r2, #0
 800bacc:	701a      	strb	r2, [r3, #0]
      break;
 800bace:	e11d      	b.n	800bd0c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800bad0:	2101      	movs	r1, #1
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 fa7b 	bl	800bfce <USBH_SetAddress>
 800bad8:	4603      	mov	r3, r0
 800bada:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800badc:	7bbb      	ldrb	r3, [r7, #14]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d132      	bne.n	800bb48 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800bae2:	2002      	movs	r0, #2
 800bae4:	f004 fed4 	bl	8010890 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2201      	movs	r2, #1
 800baec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2203      	movs	r2, #3
 800baf4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	7919      	ldrb	r1, [r3, #4]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bb0a:	b292      	uxth	r2, r2
 800bb0c:	9202      	str	r2, [sp, #8]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	9201      	str	r2, [sp, #4]
 800bb12:	9300      	str	r3, [sp, #0]
 800bb14:	4603      	mov	r3, r0
 800bb16:	2280      	movs	r2, #128	; 0x80
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f001 f851 	bl	800cbc0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	7959      	ldrb	r1, [r3, #5]
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bb32:	b292      	uxth	r2, r2
 800bb34:	9202      	str	r2, [sp, #8]
 800bb36:	2200      	movs	r2, #0
 800bb38:	9201      	str	r2, [sp, #4]
 800bb3a:	9300      	str	r3, [sp, #0]
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	2200      	movs	r2, #0
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f001 f83d 	bl	800cbc0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bb46:	e0e3      	b.n	800bd10 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bb48:	7bbb      	ldrb	r3, [r7, #14]
 800bb4a:	2b03      	cmp	r3, #3
 800bb4c:	f040 80e0 	bne.w	800bd10 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	220d      	movs	r2, #13
 800bb54:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	705a      	strb	r2, [r3, #1]
      break;
 800bb5c:	e0d8      	b.n	800bd10 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800bb5e:	2109      	movs	r1, #9
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 f9a1 	bl	800bea8 <USBH_Get_CfgDesc>
 800bb66:	4603      	mov	r3, r0
 800bb68:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bb6a:	7bbb      	ldrb	r3, [r7, #14]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d103      	bne.n	800bb78 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2204      	movs	r2, #4
 800bb74:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bb76:	e0cd      	b.n	800bd14 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bb78:	7bbb      	ldrb	r3, [r7, #14]
 800bb7a:	2b03      	cmp	r3, #3
 800bb7c:	f040 80ca 	bne.w	800bd14 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bb86:	3301      	adds	r3, #1
 800bb88:	b2da      	uxtb	r2, r3
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bb96:	2b03      	cmp	r3, #3
 800bb98:	d903      	bls.n	800bba2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	220d      	movs	r2, #13
 800bb9e:	701a      	strb	r2, [r3, #0]
      break;
 800bba0:	e0b8      	b.n	800bd14 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	795b      	ldrb	r3, [r3, #5]
 800bba6:	4619      	mov	r1, r3
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f001 f859 	bl	800cc60 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	791b      	ldrb	r3, [r3, #4]
 800bbb2:	4619      	mov	r1, r3
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f001 f853 	bl	800cc60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	701a      	strb	r2, [r3, #0]
      break;
 800bbc6:	e0a5      	b.n	800bd14 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800bbce:	4619      	mov	r1, r3
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 f969 	bl	800bea8 <USBH_Get_CfgDesc>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bbda:	7bbb      	ldrb	r3, [r7, #14]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d103      	bne.n	800bbe8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2205      	movs	r2, #5
 800bbe4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bbe6:	e097      	b.n	800bd18 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bbe8:	7bbb      	ldrb	r3, [r7, #14]
 800bbea:	2b03      	cmp	r3, #3
 800bbec:	f040 8094 	bne.w	800bd18 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	b2da      	uxtb	r2, r3
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bc06:	2b03      	cmp	r3, #3
 800bc08:	d903      	bls.n	800bc12 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	220d      	movs	r2, #13
 800bc0e:	701a      	strb	r2, [r3, #0]
      break;
 800bc10:	e082      	b.n	800bd18 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	795b      	ldrb	r3, [r3, #5]
 800bc16:	4619      	mov	r1, r3
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f001 f821 	bl	800cc60 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	791b      	ldrb	r3, [r3, #4]
 800bc22:	4619      	mov	r1, r3
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f001 f81b 	bl	800cc60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2200      	movs	r2, #0
 800bc34:	701a      	strb	r2, [r3, #0]
      break;
 800bc36:	e06f      	b.n	800bd18 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d019      	beq.n	800bc76 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bc4e:	23ff      	movs	r3, #255	; 0xff
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f000 f953 	bl	800befc <USBH_Get_StringDesc>
 800bc56:	4603      	mov	r3, r0
 800bc58:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bc5a:	7bbb      	ldrb	r3, [r7, #14]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d103      	bne.n	800bc68 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2206      	movs	r2, #6
 800bc64:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bc66:	e059      	b.n	800bd1c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bc68:	7bbb      	ldrb	r3, [r7, #14]
 800bc6a:	2b03      	cmp	r3, #3
 800bc6c:	d156      	bne.n	800bd1c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2206      	movs	r2, #6
 800bc72:	705a      	strb	r2, [r3, #1]
      break;
 800bc74:	e052      	b.n	800bd1c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2206      	movs	r2, #6
 800bc7a:	705a      	strb	r2, [r3, #1]
      break;
 800bc7c:	e04e      	b.n	800bd1c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d019      	beq.n	800bcbc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800bc94:	23ff      	movs	r3, #255	; 0xff
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 f930 	bl	800befc <USBH_Get_StringDesc>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bca0:	7bbb      	ldrb	r3, [r7, #14]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d103      	bne.n	800bcae <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2207      	movs	r2, #7
 800bcaa:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bcac:	e038      	b.n	800bd20 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bcae:	7bbb      	ldrb	r3, [r7, #14]
 800bcb0:	2b03      	cmp	r3, #3
 800bcb2:	d135      	bne.n	800bd20 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2207      	movs	r2, #7
 800bcb8:	705a      	strb	r2, [r3, #1]
      break;
 800bcba:	e031      	b.n	800bd20 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2207      	movs	r2, #7
 800bcc0:	705a      	strb	r2, [r3, #1]
      break;
 800bcc2:	e02d      	b.n	800bd20 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d017      	beq.n	800bcfe <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bcda:	23ff      	movs	r3, #255	; 0xff
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f000 f90d 	bl	800befc <USBH_Get_StringDesc>
 800bce2:	4603      	mov	r3, r0
 800bce4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bce6:	7bbb      	ldrb	r3, [r7, #14]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d102      	bne.n	800bcf2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800bcec:	2300      	movs	r3, #0
 800bcee:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800bcf0:	e018      	b.n	800bd24 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bcf2:	7bbb      	ldrb	r3, [r7, #14]
 800bcf4:	2b03      	cmp	r3, #3
 800bcf6:	d115      	bne.n	800bd24 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	73fb      	strb	r3, [r7, #15]
      break;
 800bcfc:	e012      	b.n	800bd24 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	73fb      	strb	r3, [r7, #15]
      break;
 800bd02:	e00f      	b.n	800bd24 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800bd04:	bf00      	nop
 800bd06:	e00e      	b.n	800bd26 <USBH_HandleEnum+0x3be>
      break;
 800bd08:	bf00      	nop
 800bd0a:	e00c      	b.n	800bd26 <USBH_HandleEnum+0x3be>
      break;
 800bd0c:	bf00      	nop
 800bd0e:	e00a      	b.n	800bd26 <USBH_HandleEnum+0x3be>
      break;
 800bd10:	bf00      	nop
 800bd12:	e008      	b.n	800bd26 <USBH_HandleEnum+0x3be>
      break;
 800bd14:	bf00      	nop
 800bd16:	e006      	b.n	800bd26 <USBH_HandleEnum+0x3be>
      break;
 800bd18:	bf00      	nop
 800bd1a:	e004      	b.n	800bd26 <USBH_HandleEnum+0x3be>
      break;
 800bd1c:	bf00      	nop
 800bd1e:	e002      	b.n	800bd26 <USBH_HandleEnum+0x3be>
      break;
 800bd20:	bf00      	nop
 800bd22:	e000      	b.n	800bd26 <USBH_HandleEnum+0x3be>
      break;
 800bd24:	bf00      	nop
  }
  return Status;
 800bd26:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3710      	adds	r7, #16
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b083      	sub	sp, #12
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	683a      	ldr	r2, [r7, #0]
 800bd3e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800bd42:	bf00      	nop
 800bd44:	370c      	adds	r7, #12
 800bd46:	46bd      	mov	sp, r7
 800bd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4c:	4770      	bx	lr

0800bd4e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800bd4e:	b580      	push	{r7, lr}
 800bd50:	b082      	sub	sp, #8
 800bd52:	af00      	add	r7, sp, #0
 800bd54:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bd5c:	1c5a      	adds	r2, r3, #1
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f000 f804 	bl	800bd72 <USBH_HandleSof>
}
 800bd6a:	bf00      	nop
 800bd6c:	3708      	adds	r7, #8
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}

0800bd72 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800bd72:	b580      	push	{r7, lr}
 800bd74:	b082      	sub	sp, #8
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	b2db      	uxtb	r3, r3
 800bd80:	2b0b      	cmp	r3, #11
 800bd82:	d10a      	bne.n	800bd9a <USBH_HandleSof+0x28>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d005      	beq.n	800bd9a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd94:	699b      	ldr	r3, [r3, #24]
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	4798      	blx	r3
  }
}
 800bd9a:	bf00      	nop
 800bd9c:	3708      	adds	r7, #8
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}

0800bda2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800bda2:	b480      	push	{r7}
 800bda4:	b083      	sub	sp, #12
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2201      	movs	r2, #1
 800bdae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800bdb2:	bf00      	nop
}
 800bdb4:	370c      	adds	r7, #12
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbc:	4770      	bx	lr

0800bdbe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800bdbe:	b480      	push	{r7}
 800bdc0:	b083      	sub	sp, #12
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800bdce:	bf00      	nop
}
 800bdd0:	370c      	adds	r7, #12
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd8:	4770      	bx	lr

0800bdda <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800bdda:	b480      	push	{r7}
 800bddc:	b083      	sub	sp, #12
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2201      	movs	r2, #1
 800bde6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2200      	movs	r2, #0
 800bdee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800bdfa:	2300      	movs	r3, #0
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	370c      	adds	r7, #12
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr

0800be08 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b082      	sub	sp, #8
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2201      	movs	r2, #1
 800be14:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2200      	movs	r2, #0
 800be1c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2200      	movs	r2, #0
 800be24:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f004 fbb8 	bl	801059e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	791b      	ldrb	r3, [r3, #4]
 800be32:	4619      	mov	r1, r3
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 ff13 	bl	800cc60 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	795b      	ldrb	r3, [r3, #5]
 800be3e:	4619      	mov	r1, r3
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f000 ff0d 	bl	800cc60 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800be46:	2300      	movs	r3, #0
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3708      	adds	r7, #8
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b086      	sub	sp, #24
 800be54:	af02      	add	r7, sp, #8
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	460b      	mov	r3, r1
 800be5a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800be5c:	887b      	ldrh	r3, [r7, #2]
 800be5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be62:	d901      	bls.n	800be68 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800be64:	2303      	movs	r3, #3
 800be66:	e01b      	b.n	800bea0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800be6e:	887b      	ldrh	r3, [r7, #2]
 800be70:	9300      	str	r3, [sp, #0]
 800be72:	4613      	mov	r3, r2
 800be74:	f44f 7280 	mov.w	r2, #256	; 0x100
 800be78:	2100      	movs	r1, #0
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 f872 	bl	800bf64 <USBH_GetDescriptor>
 800be80:	4603      	mov	r3, r0
 800be82:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800be84:	7bfb      	ldrb	r3, [r7, #15]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d109      	bne.n	800be9e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800be90:	887a      	ldrh	r2, [r7, #2]
 800be92:	4619      	mov	r1, r3
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f000 f929 	bl	800c0ec <USBH_ParseDevDesc>
 800be9a:	4603      	mov	r3, r0
 800be9c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800be9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3710      	adds	r7, #16
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b086      	sub	sp, #24
 800beac:	af02      	add	r7, sp, #8
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	460b      	mov	r3, r1
 800beb2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	331c      	adds	r3, #28
 800beb8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800beba:	887b      	ldrh	r3, [r7, #2]
 800bebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bec0:	d901      	bls.n	800bec6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800bec2:	2303      	movs	r3, #3
 800bec4:	e016      	b.n	800bef4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800bec6:	887b      	ldrh	r3, [r7, #2]
 800bec8:	9300      	str	r3, [sp, #0]
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bed0:	2100      	movs	r1, #0
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f000 f846 	bl	800bf64 <USBH_GetDescriptor>
 800bed8:	4603      	mov	r3, r0
 800beda:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800bedc:	7bfb      	ldrb	r3, [r7, #15]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d107      	bne.n	800bef2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800bee2:	887b      	ldrh	r3, [r7, #2]
 800bee4:	461a      	mov	r2, r3
 800bee6:	68b9      	ldr	r1, [r7, #8]
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 f9b3 	bl	800c254 <USBH_ParseCfgDesc>
 800beee:	4603      	mov	r3, r0
 800bef0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bef2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3710      	adds	r7, #16
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}

0800befc <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b088      	sub	sp, #32
 800bf00:	af02      	add	r7, sp, #8
 800bf02:	60f8      	str	r0, [r7, #12]
 800bf04:	607a      	str	r2, [r7, #4]
 800bf06:	461a      	mov	r2, r3
 800bf08:	460b      	mov	r3, r1
 800bf0a:	72fb      	strb	r3, [r7, #11]
 800bf0c:	4613      	mov	r3, r2
 800bf0e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800bf10:	893b      	ldrh	r3, [r7, #8]
 800bf12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf16:	d802      	bhi.n	800bf1e <USBH_Get_StringDesc+0x22>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d101      	bne.n	800bf22 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800bf1e:	2303      	movs	r3, #3
 800bf20:	e01c      	b.n	800bf5c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800bf22:	7afb      	ldrb	r3, [r7, #11]
 800bf24:	b29b      	uxth	r3, r3
 800bf26:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800bf2a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800bf32:	893b      	ldrh	r3, [r7, #8]
 800bf34:	9300      	str	r3, [sp, #0]
 800bf36:	460b      	mov	r3, r1
 800bf38:	2100      	movs	r1, #0
 800bf3a:	68f8      	ldr	r0, [r7, #12]
 800bf3c:	f000 f812 	bl	800bf64 <USBH_GetDescriptor>
 800bf40:	4603      	mov	r3, r0
 800bf42:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800bf44:	7dfb      	ldrb	r3, [r7, #23]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d107      	bne.n	800bf5a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bf50:	893a      	ldrh	r2, [r7, #8]
 800bf52:	6879      	ldr	r1, [r7, #4]
 800bf54:	4618      	mov	r0, r3
 800bf56:	f000 fb93 	bl	800c680 <USBH_ParseStringDesc>
  }

  return status;
 800bf5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3718      	adds	r7, #24
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b084      	sub	sp, #16
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	60f8      	str	r0, [r7, #12]
 800bf6c:	607b      	str	r3, [r7, #4]
 800bf6e:	460b      	mov	r3, r1
 800bf70:	72fb      	strb	r3, [r7, #11]
 800bf72:	4613      	mov	r3, r2
 800bf74:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	789b      	ldrb	r3, [r3, #2]
 800bf7a:	2b01      	cmp	r3, #1
 800bf7c:	d11c      	bne.n	800bfb8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800bf7e:	7afb      	ldrb	r3, [r7, #11]
 800bf80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bf84:	b2da      	uxtb	r2, r3
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2206      	movs	r2, #6
 800bf8e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	893a      	ldrh	r2, [r7, #8]
 800bf94:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800bf96:	893b      	ldrh	r3, [r7, #8]
 800bf98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bf9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfa0:	d104      	bne.n	800bfac <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	f240 4209 	movw	r2, #1033	; 0x409
 800bfa8:	829a      	strh	r2, [r3, #20]
 800bfaa:	e002      	b.n	800bfb2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	8b3a      	ldrh	r2, [r7, #24]
 800bfb6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800bfb8:	8b3b      	ldrh	r3, [r7, #24]
 800bfba:	461a      	mov	r2, r3
 800bfbc:	6879      	ldr	r1, [r7, #4]
 800bfbe:	68f8      	ldr	r0, [r7, #12]
 800bfc0:	f000 fbac 	bl	800c71c <USBH_CtlReq>
 800bfc4:	4603      	mov	r3, r0
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3710      	adds	r7, #16
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}

0800bfce <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800bfce:	b580      	push	{r7, lr}
 800bfd0:	b082      	sub	sp, #8
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]
 800bfd6:	460b      	mov	r3, r1
 800bfd8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	789b      	ldrb	r3, [r3, #2]
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	d10f      	bne.n	800c002 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2205      	movs	r2, #5
 800bfec:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bfee:	78fb      	ldrb	r3, [r7, #3]
 800bff0:	b29a      	uxth	r2, r3
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2200      	movs	r2, #0
 800bffa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2200      	movs	r2, #0
 800c000:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c002:	2200      	movs	r2, #0
 800c004:	2100      	movs	r1, #0
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 fb88 	bl	800c71c <USBH_CtlReq>
 800c00c:	4603      	mov	r3, r0
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3708      	adds	r7, #8
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}

0800c016 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c016:	b580      	push	{r7, lr}
 800c018:	b082      	sub	sp, #8
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	6078      	str	r0, [r7, #4]
 800c01e:	460b      	mov	r3, r1
 800c020:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	789b      	ldrb	r3, [r3, #2]
 800c026:	2b01      	cmp	r3, #1
 800c028:	d10e      	bne.n	800c048 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2200      	movs	r2, #0
 800c02e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2209      	movs	r2, #9
 800c034:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	887a      	ldrh	r2, [r7, #2]
 800c03a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2200      	movs	r2, #0
 800c040:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c048:	2200      	movs	r2, #0
 800c04a:	2100      	movs	r1, #0
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f000 fb65 	bl	800c71c <USBH_CtlReq>
 800c052:	4603      	mov	r3, r0
}
 800c054:	4618      	mov	r0, r3
 800c056:	3708      	adds	r7, #8
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b082      	sub	sp, #8
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	460b      	mov	r3, r1
 800c066:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	789b      	ldrb	r3, [r3, #2]
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d10f      	bne.n	800c090 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2200      	movs	r2, #0
 800c074:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2203      	movs	r2, #3
 800c07a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c07c:	78fb      	ldrb	r3, [r7, #3]
 800c07e:	b29a      	uxth	r2, r3
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2200      	movs	r2, #0
 800c088:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2200      	movs	r2, #0
 800c08e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c090:	2200      	movs	r2, #0
 800c092:	2100      	movs	r1, #0
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 fb41 	bl	800c71c <USBH_CtlReq>
 800c09a:	4603      	mov	r3, r0
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3708      	adds	r7, #8
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	789b      	ldrb	r3, [r3, #2]
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	d10f      	bne.n	800c0d8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2202      	movs	r2, #2
 800c0bc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c0ca:	78fb      	ldrb	r3, [r7, #3]
 800c0cc:	b29a      	uxth	r2, r3
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c0d8:	2200      	movs	r2, #0
 800c0da:	2100      	movs	r1, #0
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f000 fb1d 	bl	800c71c <USBH_CtlReq>
 800c0e2:	4603      	mov	r3, r0
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3708      	adds	r7, #8
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b087      	sub	sp, #28
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	60f8      	str	r0, [r7, #12]
 800c0f4:	60b9      	str	r1, [r7, #8]
 800c0f6:	4613      	mov	r3, r2
 800c0f8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	f203 3326 	addw	r3, r3, #806	; 0x326
 800c100:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800c102:	2300      	movs	r3, #0
 800c104:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d101      	bne.n	800c110 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800c10c:	2302      	movs	r3, #2
 800c10e:	e098      	b.n	800c242 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	781a      	ldrb	r2, [r3, #0]
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	785a      	ldrb	r2, [r3, #1]
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	3302      	adds	r3, #2
 800c124:	781b      	ldrb	r3, [r3, #0]
 800c126:	b29a      	uxth	r2, r3
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	3303      	adds	r3, #3
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	b29b      	uxth	r3, r3
 800c130:	021b      	lsls	r3, r3, #8
 800c132:	b29b      	uxth	r3, r3
 800c134:	4313      	orrs	r3, r2
 800c136:	b29a      	uxth	r2, r3
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	791a      	ldrb	r2, [r3, #4]
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	795a      	ldrb	r2, [r3, #5]
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	799a      	ldrb	r2, [r3, #6]
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	79da      	ldrb	r2, [r3, #7]
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c162:	2b00      	cmp	r3, #0
 800c164:	d004      	beq.n	800c170 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800c16c:	2b01      	cmp	r3, #1
 800c16e:	d11b      	bne.n	800c1a8 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	79db      	ldrb	r3, [r3, #7]
 800c174:	2b20      	cmp	r3, #32
 800c176:	dc0f      	bgt.n	800c198 <USBH_ParseDevDesc+0xac>
 800c178:	2b08      	cmp	r3, #8
 800c17a:	db0f      	blt.n	800c19c <USBH_ParseDevDesc+0xb0>
 800c17c:	3b08      	subs	r3, #8
 800c17e:	4a34      	ldr	r2, [pc, #208]	; (800c250 <USBH_ParseDevDesc+0x164>)
 800c180:	fa22 f303 	lsr.w	r3, r2, r3
 800c184:	f003 0301 	and.w	r3, r3, #1
 800c188:	2b00      	cmp	r3, #0
 800c18a:	bf14      	ite	ne
 800c18c:	2301      	movne	r3, #1
 800c18e:	2300      	moveq	r3, #0
 800c190:	b2db      	uxtb	r3, r3
 800c192:	2b00      	cmp	r3, #0
 800c194:	d106      	bne.n	800c1a4 <USBH_ParseDevDesc+0xb8>
 800c196:	e001      	b.n	800c19c <USBH_ParseDevDesc+0xb0>
 800c198:	2b40      	cmp	r3, #64	; 0x40
 800c19a:	d003      	beq.n	800c1a4 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	2208      	movs	r2, #8
 800c1a0:	71da      	strb	r2, [r3, #7]
        break;
 800c1a2:	e000      	b.n	800c1a6 <USBH_ParseDevDesc+0xba>
        break;
 800c1a4:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800c1a6:	e00e      	b.n	800c1c6 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c1ae:	2b02      	cmp	r3, #2
 800c1b0:	d107      	bne.n	800c1c2 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	79db      	ldrb	r3, [r3, #7]
 800c1b6:	2b08      	cmp	r3, #8
 800c1b8:	d005      	beq.n	800c1c6 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	2208      	movs	r2, #8
 800c1be:	71da      	strb	r2, [r3, #7]
 800c1c0:	e001      	b.n	800c1c6 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c1c2:	2303      	movs	r3, #3
 800c1c4:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800c1c6:	88fb      	ldrh	r3, [r7, #6]
 800c1c8:	2b08      	cmp	r3, #8
 800c1ca:	d939      	bls.n	800c240 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	3308      	adds	r3, #8
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	b29a      	uxth	r2, r3
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	3309      	adds	r3, #9
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	b29b      	uxth	r3, r3
 800c1dc:	021b      	lsls	r3, r3, #8
 800c1de:	b29b      	uxth	r3, r3
 800c1e0:	4313      	orrs	r3, r2
 800c1e2:	b29a      	uxth	r2, r3
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	330a      	adds	r3, #10
 800c1ec:	781b      	ldrb	r3, [r3, #0]
 800c1ee:	b29a      	uxth	r2, r3
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	330b      	adds	r3, #11
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	021b      	lsls	r3, r3, #8
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	b29a      	uxth	r2, r3
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	330c      	adds	r3, #12
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	b29a      	uxth	r2, r3
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	330d      	adds	r3, #13
 800c210:	781b      	ldrb	r3, [r3, #0]
 800c212:	b29b      	uxth	r3, r3
 800c214:	021b      	lsls	r3, r3, #8
 800c216:	b29b      	uxth	r3, r3
 800c218:	4313      	orrs	r3, r2
 800c21a:	b29a      	uxth	r2, r3
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	7b9a      	ldrb	r2, [r3, #14]
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	7bda      	ldrb	r2, [r3, #15]
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	7c1a      	ldrb	r2, [r3, #16]
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	7c5a      	ldrb	r2, [r3, #17]
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800c240:	7dfb      	ldrb	r3, [r7, #23]
}
 800c242:	4618      	mov	r0, r3
 800c244:	371c      	adds	r7, #28
 800c246:	46bd      	mov	sp, r7
 800c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24c:	4770      	bx	lr
 800c24e:	bf00      	nop
 800c250:	01000101 	.word	0x01000101

0800c254 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b08c      	sub	sp, #48	; 0x30
 800c258:	af00      	add	r7, sp, #0
 800c25a:	60f8      	str	r0, [r7, #12]
 800c25c:	60b9      	str	r1, [r7, #8]
 800c25e:	4613      	mov	r3, r2
 800c260:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c268:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c26a:	2300      	movs	r3, #0
 800c26c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c270:	2300      	movs	r3, #0
 800c272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800c276:	2300      	movs	r3, #0
 800c278:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d101      	bne.n	800c286 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800c282:	2302      	movs	r3, #2
 800c284:	e0db      	b.n	800c43e <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800c28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c28c:	781b      	ldrb	r3, [r3, #0]
 800c28e:	2b09      	cmp	r3, #9
 800c290:	d002      	beq.n	800c298 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c294:	2209      	movs	r2, #9
 800c296:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	781a      	ldrb	r2, [r3, #0]
 800c29c:	6a3b      	ldr	r3, [r7, #32]
 800c29e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	785a      	ldrb	r2, [r3, #1]
 800c2a4:	6a3b      	ldr	r3, [r7, #32]
 800c2a6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	3302      	adds	r3, #2
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	b29a      	uxth	r2, r3
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	3303      	adds	r3, #3
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	021b      	lsls	r3, r3, #8
 800c2ba:	b29b      	uxth	r3, r3
 800c2bc:	4313      	orrs	r3, r2
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2c4:	bf28      	it	cs
 800c2c6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800c2ca:	b29a      	uxth	r2, r3
 800c2cc:	6a3b      	ldr	r3, [r7, #32]
 800c2ce:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	791a      	ldrb	r2, [r3, #4]
 800c2d4:	6a3b      	ldr	r3, [r7, #32]
 800c2d6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	795a      	ldrb	r2, [r3, #5]
 800c2dc:	6a3b      	ldr	r3, [r7, #32]
 800c2de:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	799a      	ldrb	r2, [r3, #6]
 800c2e4:	6a3b      	ldr	r3, [r7, #32]
 800c2e6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	79da      	ldrb	r2, [r3, #7]
 800c2ec:	6a3b      	ldr	r3, [r7, #32]
 800c2ee:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	7a1a      	ldrb	r2, [r3, #8]
 800c2f4:	6a3b      	ldr	r3, [r7, #32]
 800c2f6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c2f8:	88fb      	ldrh	r3, [r7, #6]
 800c2fa:	2b09      	cmp	r3, #9
 800c2fc:	f240 809d 	bls.w	800c43a <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800c300:	2309      	movs	r3, #9
 800c302:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c304:	2300      	movs	r3, #0
 800c306:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c308:	e081      	b.n	800c40e <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c30a:	f107 0316 	add.w	r3, r7, #22
 800c30e:	4619      	mov	r1, r3
 800c310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c312:	f000 f9e8 	bl	800c6e6 <USBH_GetNextDesc>
 800c316:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c31a:	785b      	ldrb	r3, [r3, #1]
 800c31c:	2b04      	cmp	r3, #4
 800c31e:	d176      	bne.n	800c40e <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	2b09      	cmp	r3, #9
 800c326:	d002      	beq.n	800c32e <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c32a:	2209      	movs	r2, #9
 800c32c:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c32e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c332:	221a      	movs	r2, #26
 800c334:	fb02 f303 	mul.w	r3, r2, r3
 800c338:	3308      	adds	r3, #8
 800c33a:	6a3a      	ldr	r2, [r7, #32]
 800c33c:	4413      	add	r3, r2
 800c33e:	3302      	adds	r3, #2
 800c340:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c342:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c344:	69f8      	ldr	r0, [r7, #28]
 800c346:	f000 f87e 	bl	800c446 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c34a:	2300      	movs	r3, #0
 800c34c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c350:	2300      	movs	r3, #0
 800c352:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c354:	e043      	b.n	800c3de <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c356:	f107 0316 	add.w	r3, r7, #22
 800c35a:	4619      	mov	r1, r3
 800c35c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c35e:	f000 f9c2 	bl	800c6e6 <USBH_GetNextDesc>
 800c362:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c366:	785b      	ldrb	r3, [r3, #1]
 800c368:	2b05      	cmp	r3, #5
 800c36a:	d138      	bne.n	800c3de <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800c36c:	69fb      	ldr	r3, [r7, #28]
 800c36e:	795b      	ldrb	r3, [r3, #5]
 800c370:	2b01      	cmp	r3, #1
 800c372:	d113      	bne.n	800c39c <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c374:	69fb      	ldr	r3, [r7, #28]
 800c376:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800c378:	2b02      	cmp	r3, #2
 800c37a:	d003      	beq.n	800c384 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c37c:	69fb      	ldr	r3, [r7, #28]
 800c37e:	799b      	ldrb	r3, [r3, #6]
 800c380:	2b03      	cmp	r3, #3
 800c382:	d10b      	bne.n	800c39c <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c384:	69fb      	ldr	r3, [r7, #28]
 800c386:	79db      	ldrb	r3, [r3, #7]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d10b      	bne.n	800c3a4 <USBH_ParseCfgDesc+0x150>
 800c38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	2b09      	cmp	r3, #9
 800c392:	d007      	beq.n	800c3a4 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800c394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c396:	2209      	movs	r2, #9
 800c398:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c39a:	e003      	b.n	800c3a4 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c39e:	2207      	movs	r2, #7
 800c3a0:	701a      	strb	r2, [r3, #0]
 800c3a2:	e000      	b.n	800c3a6 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c3a4:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c3a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3aa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c3ae:	3201      	adds	r2, #1
 800c3b0:	00d2      	lsls	r2, r2, #3
 800c3b2:	211a      	movs	r1, #26
 800c3b4:	fb01 f303 	mul.w	r3, r1, r3
 800c3b8:	4413      	add	r3, r2
 800c3ba:	3308      	adds	r3, #8
 800c3bc:	6a3a      	ldr	r2, [r7, #32]
 800c3be:	4413      	add	r3, r2
 800c3c0:	3304      	adds	r3, #4
 800c3c2:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c3c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3c6:	69b9      	ldr	r1, [r7, #24]
 800c3c8:	68f8      	ldr	r0, [r7, #12]
 800c3ca:	f000 f870 	bl	800c4ae <USBH_ParseEPDesc>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800c3d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c3d8:	3301      	adds	r3, #1
 800c3da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c3de:	69fb      	ldr	r3, [r7, #28]
 800c3e0:	791b      	ldrb	r3, [r3, #4]
 800c3e2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d204      	bcs.n	800c3f4 <USBH_ParseCfgDesc+0x1a0>
 800c3ea:	6a3b      	ldr	r3, [r7, #32]
 800c3ec:	885a      	ldrh	r2, [r3, #2]
 800c3ee:	8afb      	ldrh	r3, [r7, #22]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d8b0      	bhi.n	800c356 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c3f4:	69fb      	ldr	r3, [r7, #28]
 800c3f6:	791b      	ldrb	r3, [r3, #4]
 800c3f8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d201      	bcs.n	800c404 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800c400:	2303      	movs	r3, #3
 800c402:	e01c      	b.n	800c43e <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800c404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c408:	3301      	adds	r3, #1
 800c40a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c40e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c412:	2b01      	cmp	r3, #1
 800c414:	d805      	bhi.n	800c422 <USBH_ParseCfgDesc+0x1ce>
 800c416:	6a3b      	ldr	r3, [r7, #32]
 800c418:	885a      	ldrh	r2, [r3, #2]
 800c41a:	8afb      	ldrh	r3, [r7, #22]
 800c41c:	429a      	cmp	r2, r3
 800c41e:	f63f af74 	bhi.w	800c30a <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c422:	6a3b      	ldr	r3, [r7, #32]
 800c424:	791b      	ldrb	r3, [r3, #4]
 800c426:	2b02      	cmp	r3, #2
 800c428:	bf28      	it	cs
 800c42a:	2302      	movcs	r3, #2
 800c42c:	b2db      	uxtb	r3, r3
 800c42e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c432:	429a      	cmp	r2, r3
 800c434:	d201      	bcs.n	800c43a <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800c436:	2303      	movs	r3, #3
 800c438:	e001      	b.n	800c43e <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800c43a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3730      	adds	r7, #48	; 0x30
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}

0800c446 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800c446:	b480      	push	{r7}
 800c448:	b083      	sub	sp, #12
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
 800c44e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	781a      	ldrb	r2, [r3, #0]
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	785a      	ldrb	r2, [r3, #1]
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	789a      	ldrb	r2, [r3, #2]
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	78da      	ldrb	r2, [r3, #3]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	3304      	adds	r3, #4
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	2b02      	cmp	r3, #2
 800c478:	bf28      	it	cs
 800c47a:	2302      	movcs	r3, #2
 800c47c:	b2da      	uxtb	r2, r3
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	795a      	ldrb	r2, [r3, #5]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	799a      	ldrb	r2, [r3, #6]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	79da      	ldrb	r2, [r3, #7]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	7a1a      	ldrb	r2, [r3, #8]
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	721a      	strb	r2, [r3, #8]
}
 800c4a2:	bf00      	nop
 800c4a4:	370c      	adds	r7, #12
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr

0800c4ae <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800c4ae:	b480      	push	{r7}
 800c4b0:	b087      	sub	sp, #28
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	60f8      	str	r0, [r7, #12]
 800c4b6:	60b9      	str	r1, [r7, #8]
 800c4b8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	781a      	ldrb	r2, [r3, #0]
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	785a      	ldrb	r2, [r3, #1]
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	789a      	ldrb	r2, [r3, #2]
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	78da      	ldrb	r2, [r3, #3]
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	3304      	adds	r3, #4
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	b29a      	uxth	r2, r3
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	3305      	adds	r3, #5
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	b29b      	uxth	r3, r3
 800c4ee:	021b      	lsls	r3, r3, #8
 800c4f0:	b29b      	uxth	r3, r3
 800c4f2:	4313      	orrs	r3, r2
 800c4f4:	b29a      	uxth	r2, r3
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	799a      	ldrb	r2, [r3, #6]
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	889b      	ldrh	r3, [r3, #4]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d009      	beq.n	800c51e <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c50e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c512:	d804      	bhi.n	800c51e <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c51c:	d901      	bls.n	800c522 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800c51e:	2303      	movs	r3, #3
 800c520:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d136      	bne.n	800c59a <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	78db      	ldrb	r3, [r3, #3]
 800c530:	f003 0303 	and.w	r3, r3, #3
 800c534:	2b02      	cmp	r3, #2
 800c536:	d108      	bne.n	800c54a <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	889b      	ldrh	r3, [r3, #4]
 800c53c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c540:	f240 8097 	bls.w	800c672 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c544:	2303      	movs	r3, #3
 800c546:	75fb      	strb	r3, [r7, #23]
 800c548:	e093      	b.n	800c672 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	78db      	ldrb	r3, [r3, #3]
 800c54e:	f003 0303 	and.w	r3, r3, #3
 800c552:	2b00      	cmp	r3, #0
 800c554:	d107      	bne.n	800c566 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	889b      	ldrh	r3, [r3, #4]
 800c55a:	2b40      	cmp	r3, #64	; 0x40
 800c55c:	f240 8089 	bls.w	800c672 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c560:	2303      	movs	r3, #3
 800c562:	75fb      	strb	r3, [r7, #23]
 800c564:	e085      	b.n	800c672 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	78db      	ldrb	r3, [r3, #3]
 800c56a:	f003 0303 	and.w	r3, r3, #3
 800c56e:	2b01      	cmp	r3, #1
 800c570:	d005      	beq.n	800c57e <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	78db      	ldrb	r3, [r3, #3]
 800c576:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c57a:	2b03      	cmp	r3, #3
 800c57c:	d10a      	bne.n	800c594 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	799b      	ldrb	r3, [r3, #6]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d003      	beq.n	800c58e <USBH_ParseEPDesc+0xe0>
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	799b      	ldrb	r3, [r3, #6]
 800c58a:	2b10      	cmp	r3, #16
 800c58c:	d970      	bls.n	800c670 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c58e:	2303      	movs	r3, #3
 800c590:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c592:	e06d      	b.n	800c670 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c594:	2303      	movs	r3, #3
 800c596:	75fb      	strb	r3, [r7, #23]
 800c598:	e06b      	b.n	800c672 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d13c      	bne.n	800c61e <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	78db      	ldrb	r3, [r3, #3]
 800c5a8:	f003 0303 	and.w	r3, r3, #3
 800c5ac:	2b02      	cmp	r3, #2
 800c5ae:	d005      	beq.n	800c5bc <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	78db      	ldrb	r3, [r3, #3]
 800c5b4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d106      	bne.n	800c5ca <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	889b      	ldrh	r3, [r3, #4]
 800c5c0:	2b40      	cmp	r3, #64	; 0x40
 800c5c2:	d956      	bls.n	800c672 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c5c4:	2303      	movs	r3, #3
 800c5c6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c5c8:	e053      	b.n	800c672 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	78db      	ldrb	r3, [r3, #3]
 800c5ce:	f003 0303 	and.w	r3, r3, #3
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d10e      	bne.n	800c5f4 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	799b      	ldrb	r3, [r3, #6]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d007      	beq.n	800c5ee <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800c5e2:	2b10      	cmp	r3, #16
 800c5e4:	d803      	bhi.n	800c5ee <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800c5ea:	2b40      	cmp	r3, #64	; 0x40
 800c5ec:	d941      	bls.n	800c672 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c5ee:	2303      	movs	r3, #3
 800c5f0:	75fb      	strb	r3, [r7, #23]
 800c5f2:	e03e      	b.n	800c672 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	78db      	ldrb	r3, [r3, #3]
 800c5f8:	f003 0303 	and.w	r3, r3, #3
 800c5fc:	2b03      	cmp	r3, #3
 800c5fe:	d10b      	bne.n	800c618 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	799b      	ldrb	r3, [r3, #6]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d004      	beq.n	800c612 <USBH_ParseEPDesc+0x164>
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	889b      	ldrh	r3, [r3, #4]
 800c60c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c610:	d32f      	bcc.n	800c672 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c612:	2303      	movs	r3, #3
 800c614:	75fb      	strb	r3, [r7, #23]
 800c616:	e02c      	b.n	800c672 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c618:	2303      	movs	r3, #3
 800c61a:	75fb      	strb	r3, [r7, #23]
 800c61c:	e029      	b.n	800c672 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c624:	2b02      	cmp	r3, #2
 800c626:	d120      	bne.n	800c66a <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	78db      	ldrb	r3, [r3, #3]
 800c62c:	f003 0303 	and.w	r3, r3, #3
 800c630:	2b00      	cmp	r3, #0
 800c632:	d106      	bne.n	800c642 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	889b      	ldrh	r3, [r3, #4]
 800c638:	2b08      	cmp	r3, #8
 800c63a:	d01a      	beq.n	800c672 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c63c:	2303      	movs	r3, #3
 800c63e:	75fb      	strb	r3, [r7, #23]
 800c640:	e017      	b.n	800c672 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	78db      	ldrb	r3, [r3, #3]
 800c646:	f003 0303 	and.w	r3, r3, #3
 800c64a:	2b03      	cmp	r3, #3
 800c64c:	d10a      	bne.n	800c664 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	799b      	ldrb	r3, [r3, #6]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d003      	beq.n	800c65e <USBH_ParseEPDesc+0x1b0>
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	889b      	ldrh	r3, [r3, #4]
 800c65a:	2b08      	cmp	r3, #8
 800c65c:	d909      	bls.n	800c672 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c65e:	2303      	movs	r3, #3
 800c660:	75fb      	strb	r3, [r7, #23]
 800c662:	e006      	b.n	800c672 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c664:	2303      	movs	r3, #3
 800c666:	75fb      	strb	r3, [r7, #23]
 800c668:	e003      	b.n	800c672 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c66a:	2303      	movs	r3, #3
 800c66c:	75fb      	strb	r3, [r7, #23]
 800c66e:	e000      	b.n	800c672 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c670:	bf00      	nop
  }

  return status;
 800c672:	7dfb      	ldrb	r3, [r7, #23]
}
 800c674:	4618      	mov	r0, r3
 800c676:	371c      	adds	r7, #28
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c680:	b480      	push	{r7}
 800c682:	b087      	sub	sp, #28
 800c684:	af00      	add	r7, sp, #0
 800c686:	60f8      	str	r0, [r7, #12]
 800c688:	60b9      	str	r1, [r7, #8]
 800c68a:	4613      	mov	r3, r2
 800c68c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	3301      	adds	r3, #1
 800c692:	781b      	ldrb	r3, [r3, #0]
 800c694:	2b03      	cmp	r3, #3
 800c696:	d120      	bne.n	800c6da <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	1e9a      	subs	r2, r3, #2
 800c69e:	88fb      	ldrh	r3, [r7, #6]
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	bf28      	it	cs
 800c6a4:	4613      	movcs	r3, r2
 800c6a6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	3302      	adds	r3, #2
 800c6ac:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	82fb      	strh	r3, [r7, #22]
 800c6b2:	e00b      	b.n	800c6cc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c6b4:	8afb      	ldrh	r3, [r7, #22]
 800c6b6:	68fa      	ldr	r2, [r7, #12]
 800c6b8:	4413      	add	r3, r2
 800c6ba:	781a      	ldrb	r2, [r3, #0]
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c6c6:	8afb      	ldrh	r3, [r7, #22]
 800c6c8:	3302      	adds	r3, #2
 800c6ca:	82fb      	strh	r3, [r7, #22]
 800c6cc:	8afa      	ldrh	r2, [r7, #22]
 800c6ce:	8abb      	ldrh	r3, [r7, #20]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d3ef      	bcc.n	800c6b4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	701a      	strb	r2, [r3, #0]
  }
}
 800c6da:	bf00      	nop
 800c6dc:	371c      	adds	r7, #28
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr

0800c6e6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c6e6:	b480      	push	{r7}
 800c6e8:	b085      	sub	sp, #20
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	6078      	str	r0, [r7, #4]
 800c6ee:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	881a      	ldrh	r2, [r3, #0]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	b29b      	uxth	r3, r3
 800c6fa:	4413      	add	r3, r2
 800c6fc:	b29a      	uxth	r2, r3
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	4413      	add	r3, r2
 800c70c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c70e:	68fb      	ldr	r3, [r7, #12]
}
 800c710:	4618      	mov	r0, r3
 800c712:	3714      	adds	r7, #20
 800c714:	46bd      	mov	sp, r7
 800c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71a:	4770      	bx	lr

0800c71c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b086      	sub	sp, #24
 800c720:	af00      	add	r7, sp, #0
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	60b9      	str	r1, [r7, #8]
 800c726:	4613      	mov	r3, r2
 800c728:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c72a:	2301      	movs	r3, #1
 800c72c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	789b      	ldrb	r3, [r3, #2]
 800c732:	2b01      	cmp	r3, #1
 800c734:	d002      	beq.n	800c73c <USBH_CtlReq+0x20>
 800c736:	2b02      	cmp	r3, #2
 800c738:	d00f      	beq.n	800c75a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c73a:	e027      	b.n	800c78c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	68ba      	ldr	r2, [r7, #8]
 800c740:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	88fa      	ldrh	r2, [r7, #6]
 800c746:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2201      	movs	r2, #1
 800c74c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	2202      	movs	r2, #2
 800c752:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c754:	2301      	movs	r3, #1
 800c756:	75fb      	strb	r3, [r7, #23]
      break;
 800c758:	e018      	b.n	800c78c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c75a:	68f8      	ldr	r0, [r7, #12]
 800c75c:	f000 f81c 	bl	800c798 <USBH_HandleControl>
 800c760:	4603      	mov	r3, r0
 800c762:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c764:	7dfb      	ldrb	r3, [r7, #23]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d002      	beq.n	800c770 <USBH_CtlReq+0x54>
 800c76a:	7dfb      	ldrb	r3, [r7, #23]
 800c76c:	2b03      	cmp	r3, #3
 800c76e:	d106      	bne.n	800c77e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	2201      	movs	r2, #1
 800c774:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2200      	movs	r2, #0
 800c77a:	761a      	strb	r2, [r3, #24]
      break;
 800c77c:	e005      	b.n	800c78a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c77e:	7dfb      	ldrb	r3, [r7, #23]
 800c780:	2b02      	cmp	r3, #2
 800c782:	d102      	bne.n	800c78a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	2201      	movs	r2, #1
 800c788:	709a      	strb	r2, [r3, #2]
      break;
 800c78a:	bf00      	nop
  }
  return status;
 800c78c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3718      	adds	r7, #24
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}
	...

0800c798 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b086      	sub	sp, #24
 800c79c:	af02      	add	r7, sp, #8
 800c79e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	7e1b      	ldrb	r3, [r3, #24]
 800c7ac:	3b01      	subs	r3, #1
 800c7ae:	2b0a      	cmp	r3, #10
 800c7b0:	f200 8156 	bhi.w	800ca60 <USBH_HandleControl+0x2c8>
 800c7b4:	a201      	add	r2, pc, #4	; (adr r2, 800c7bc <USBH_HandleControl+0x24>)
 800c7b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ba:	bf00      	nop
 800c7bc:	0800c7e9 	.word	0x0800c7e9
 800c7c0:	0800c803 	.word	0x0800c803
 800c7c4:	0800c86d 	.word	0x0800c86d
 800c7c8:	0800c893 	.word	0x0800c893
 800c7cc:	0800c8cb 	.word	0x0800c8cb
 800c7d0:	0800c8f5 	.word	0x0800c8f5
 800c7d4:	0800c947 	.word	0x0800c947
 800c7d8:	0800c969 	.word	0x0800c969
 800c7dc:	0800c9a5 	.word	0x0800c9a5
 800c7e0:	0800c9cb 	.word	0x0800c9cb
 800c7e4:	0800ca09 	.word	0x0800ca09
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f103 0110 	add.w	r1, r3, #16
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	795b      	ldrb	r3, [r3, #5]
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f000 f943 	bl	800ca80 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2202      	movs	r2, #2
 800c7fe:	761a      	strb	r2, [r3, #24]
      break;
 800c800:	e139      	b.n	800ca76 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	795b      	ldrb	r3, [r3, #5]
 800c806:	4619      	mov	r1, r3
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f003 ffb7 	bl	801077c <USBH_LL_GetURBState>
 800c80e:	4603      	mov	r3, r0
 800c810:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c812:	7bbb      	ldrb	r3, [r7, #14]
 800c814:	2b01      	cmp	r3, #1
 800c816:	d11e      	bne.n	800c856 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	7c1b      	ldrb	r3, [r3, #16]
 800c81c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c820:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	8adb      	ldrh	r3, [r3, #22]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d00a      	beq.n	800c840 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c82a:	7b7b      	ldrb	r3, [r7, #13]
 800c82c:	2b80      	cmp	r3, #128	; 0x80
 800c82e:	d103      	bne.n	800c838 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2203      	movs	r2, #3
 800c834:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c836:	e115      	b.n	800ca64 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2205      	movs	r2, #5
 800c83c:	761a      	strb	r2, [r3, #24]
      break;
 800c83e:	e111      	b.n	800ca64 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c840:	7b7b      	ldrb	r3, [r7, #13]
 800c842:	2b80      	cmp	r3, #128	; 0x80
 800c844:	d103      	bne.n	800c84e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2209      	movs	r2, #9
 800c84a:	761a      	strb	r2, [r3, #24]
      break;
 800c84c:	e10a      	b.n	800ca64 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2207      	movs	r2, #7
 800c852:	761a      	strb	r2, [r3, #24]
      break;
 800c854:	e106      	b.n	800ca64 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c856:	7bbb      	ldrb	r3, [r7, #14]
 800c858:	2b04      	cmp	r3, #4
 800c85a:	d003      	beq.n	800c864 <USBH_HandleControl+0xcc>
 800c85c:	7bbb      	ldrb	r3, [r7, #14]
 800c85e:	2b02      	cmp	r3, #2
 800c860:	f040 8100 	bne.w	800ca64 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	220b      	movs	r2, #11
 800c868:	761a      	strb	r2, [r3, #24]
      break;
 800c86a:	e0fb      	b.n	800ca64 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c872:	b29a      	uxth	r2, r3
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6899      	ldr	r1, [r3, #8]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	899a      	ldrh	r2, [r3, #12]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	791b      	ldrb	r3, [r3, #4]
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f000 f93a 	bl	800cafe <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2204      	movs	r2, #4
 800c88e:	761a      	strb	r2, [r3, #24]
      break;
 800c890:	e0f1      	b.n	800ca76 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	791b      	ldrb	r3, [r3, #4]
 800c896:	4619      	mov	r1, r3
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f003 ff6f 	bl	801077c <USBH_LL_GetURBState>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c8a2:	7bbb      	ldrb	r3, [r7, #14]
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	d102      	bne.n	800c8ae <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2209      	movs	r2, #9
 800c8ac:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c8ae:	7bbb      	ldrb	r3, [r7, #14]
 800c8b0:	2b05      	cmp	r3, #5
 800c8b2:	d102      	bne.n	800c8ba <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c8b4:	2303      	movs	r3, #3
 800c8b6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c8b8:	e0d6      	b.n	800ca68 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800c8ba:	7bbb      	ldrb	r3, [r7, #14]
 800c8bc:	2b04      	cmp	r3, #4
 800c8be:	f040 80d3 	bne.w	800ca68 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	220b      	movs	r2, #11
 800c8c6:	761a      	strb	r2, [r3, #24]
      break;
 800c8c8:	e0ce      	b.n	800ca68 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6899      	ldr	r1, [r3, #8]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	899a      	ldrh	r2, [r3, #12]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	795b      	ldrb	r3, [r3, #5]
 800c8d6:	2001      	movs	r0, #1
 800c8d8:	9000      	str	r0, [sp, #0]
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f000 f8ea 	bl	800cab4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c8e6:	b29a      	uxth	r2, r3
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2206      	movs	r2, #6
 800c8f0:	761a      	strb	r2, [r3, #24]
      break;
 800c8f2:	e0c0      	b.n	800ca76 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	795b      	ldrb	r3, [r3, #5]
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f003 ff3e 	bl	801077c <USBH_LL_GetURBState>
 800c900:	4603      	mov	r3, r0
 800c902:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c904:	7bbb      	ldrb	r3, [r7, #14]
 800c906:	2b01      	cmp	r3, #1
 800c908:	d103      	bne.n	800c912 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2207      	movs	r2, #7
 800c90e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c910:	e0ac      	b.n	800ca6c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800c912:	7bbb      	ldrb	r3, [r7, #14]
 800c914:	2b05      	cmp	r3, #5
 800c916:	d105      	bne.n	800c924 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	220c      	movs	r2, #12
 800c91c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c91e:	2303      	movs	r3, #3
 800c920:	73fb      	strb	r3, [r7, #15]
      break;
 800c922:	e0a3      	b.n	800ca6c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c924:	7bbb      	ldrb	r3, [r7, #14]
 800c926:	2b02      	cmp	r3, #2
 800c928:	d103      	bne.n	800c932 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2205      	movs	r2, #5
 800c92e:	761a      	strb	r2, [r3, #24]
      break;
 800c930:	e09c      	b.n	800ca6c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c932:	7bbb      	ldrb	r3, [r7, #14]
 800c934:	2b04      	cmp	r3, #4
 800c936:	f040 8099 	bne.w	800ca6c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	220b      	movs	r2, #11
 800c93e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c940:	2302      	movs	r3, #2
 800c942:	73fb      	strb	r3, [r7, #15]
      break;
 800c944:	e092      	b.n	800ca6c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	791b      	ldrb	r3, [r3, #4]
 800c94a:	2200      	movs	r2, #0
 800c94c:	2100      	movs	r1, #0
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 f8d5 	bl	800cafe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c95a:	b29a      	uxth	r2, r3
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2208      	movs	r2, #8
 800c964:	761a      	strb	r2, [r3, #24]

      break;
 800c966:	e086      	b.n	800ca76 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	791b      	ldrb	r3, [r3, #4]
 800c96c:	4619      	mov	r1, r3
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f003 ff04 	bl	801077c <USBH_LL_GetURBState>
 800c974:	4603      	mov	r3, r0
 800c976:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c978:	7bbb      	ldrb	r3, [r7, #14]
 800c97a:	2b01      	cmp	r3, #1
 800c97c:	d105      	bne.n	800c98a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	220d      	movs	r2, #13
 800c982:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c984:	2300      	movs	r3, #0
 800c986:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c988:	e072      	b.n	800ca70 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800c98a:	7bbb      	ldrb	r3, [r7, #14]
 800c98c:	2b04      	cmp	r3, #4
 800c98e:	d103      	bne.n	800c998 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	220b      	movs	r2, #11
 800c994:	761a      	strb	r2, [r3, #24]
      break;
 800c996:	e06b      	b.n	800ca70 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800c998:	7bbb      	ldrb	r3, [r7, #14]
 800c99a:	2b05      	cmp	r3, #5
 800c99c:	d168      	bne.n	800ca70 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800c99e:	2303      	movs	r3, #3
 800c9a0:	73fb      	strb	r3, [r7, #15]
      break;
 800c9a2:	e065      	b.n	800ca70 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	795b      	ldrb	r3, [r3, #5]
 800c9a8:	2201      	movs	r2, #1
 800c9aa:	9200      	str	r2, [sp, #0]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	2100      	movs	r1, #0
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f000 f87f 	bl	800cab4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c9bc:	b29a      	uxth	r2, r3
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	220a      	movs	r2, #10
 800c9c6:	761a      	strb	r2, [r3, #24]
      break;
 800c9c8:	e055      	b.n	800ca76 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	795b      	ldrb	r3, [r3, #5]
 800c9ce:	4619      	mov	r1, r3
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f003 fed3 	bl	801077c <USBH_LL_GetURBState>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c9da:	7bbb      	ldrb	r3, [r7, #14]
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d105      	bne.n	800c9ec <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	220d      	movs	r2, #13
 800c9e8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c9ea:	e043      	b.n	800ca74 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c9ec:	7bbb      	ldrb	r3, [r7, #14]
 800c9ee:	2b02      	cmp	r3, #2
 800c9f0:	d103      	bne.n	800c9fa <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2209      	movs	r2, #9
 800c9f6:	761a      	strb	r2, [r3, #24]
      break;
 800c9f8:	e03c      	b.n	800ca74 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800c9fa:	7bbb      	ldrb	r3, [r7, #14]
 800c9fc:	2b04      	cmp	r3, #4
 800c9fe:	d139      	bne.n	800ca74 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	220b      	movs	r2, #11
 800ca04:	761a      	strb	r2, [r3, #24]
      break;
 800ca06:	e035      	b.n	800ca74 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	7e5b      	ldrb	r3, [r3, #25]
 800ca0c:	3301      	adds	r3, #1
 800ca0e:	b2da      	uxtb	r2, r3
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	765a      	strb	r2, [r3, #25]
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	7e5b      	ldrb	r3, [r3, #25]
 800ca18:	2b02      	cmp	r3, #2
 800ca1a:	d806      	bhi.n	800ca2a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2201      	movs	r2, #1
 800ca20:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2201      	movs	r2, #1
 800ca26:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ca28:	e025      	b.n	800ca76 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ca30:	2106      	movs	r1, #6
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	795b      	ldrb	r3, [r3, #5]
 800ca40:	4619      	mov	r1, r3
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 f90c 	bl	800cc60 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	791b      	ldrb	r3, [r3, #4]
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f000 f906 	bl	800cc60 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2200      	movs	r2, #0
 800ca58:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ca5a:	2302      	movs	r3, #2
 800ca5c:	73fb      	strb	r3, [r7, #15]
      break;
 800ca5e:	e00a      	b.n	800ca76 <USBH_HandleControl+0x2de>

    default:
      break;
 800ca60:	bf00      	nop
 800ca62:	e008      	b.n	800ca76 <USBH_HandleControl+0x2de>
      break;
 800ca64:	bf00      	nop
 800ca66:	e006      	b.n	800ca76 <USBH_HandleControl+0x2de>
      break;
 800ca68:	bf00      	nop
 800ca6a:	e004      	b.n	800ca76 <USBH_HandleControl+0x2de>
      break;
 800ca6c:	bf00      	nop
 800ca6e:	e002      	b.n	800ca76 <USBH_HandleControl+0x2de>
      break;
 800ca70:	bf00      	nop
 800ca72:	e000      	b.n	800ca76 <USBH_HandleControl+0x2de>
      break;
 800ca74:	bf00      	nop
  }

  return status;
 800ca76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3710      	adds	r7, #16
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b088      	sub	sp, #32
 800ca84:	af04      	add	r7, sp, #16
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	60b9      	str	r1, [r7, #8]
 800ca8a:	4613      	mov	r3, r2
 800ca8c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ca8e:	79f9      	ldrb	r1, [r7, #7]
 800ca90:	2300      	movs	r3, #0
 800ca92:	9303      	str	r3, [sp, #12]
 800ca94:	2308      	movs	r3, #8
 800ca96:	9302      	str	r3, [sp, #8]
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	9301      	str	r3, [sp, #4]
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	9300      	str	r3, [sp, #0]
 800caa0:	2300      	movs	r3, #0
 800caa2:	2200      	movs	r2, #0
 800caa4:	68f8      	ldr	r0, [r7, #12]
 800caa6:	f003 fe38 	bl	801071a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800caaa:	2300      	movs	r3, #0
}
 800caac:	4618      	mov	r0, r3
 800caae:	3710      	adds	r7, #16
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b088      	sub	sp, #32
 800cab8:	af04      	add	r7, sp, #16
 800caba:	60f8      	str	r0, [r7, #12]
 800cabc:	60b9      	str	r1, [r7, #8]
 800cabe:	4611      	mov	r1, r2
 800cac0:	461a      	mov	r2, r3
 800cac2:	460b      	mov	r3, r1
 800cac4:	80fb      	strh	r3, [r7, #6]
 800cac6:	4613      	mov	r3, r2
 800cac8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d001      	beq.n	800cad8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800cad4:	2300      	movs	r3, #0
 800cad6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cad8:	7979      	ldrb	r1, [r7, #5]
 800cada:	7e3b      	ldrb	r3, [r7, #24]
 800cadc:	9303      	str	r3, [sp, #12]
 800cade:	88fb      	ldrh	r3, [r7, #6]
 800cae0:	9302      	str	r3, [sp, #8]
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	9301      	str	r3, [sp, #4]
 800cae6:	2301      	movs	r3, #1
 800cae8:	9300      	str	r3, [sp, #0]
 800caea:	2300      	movs	r3, #0
 800caec:	2200      	movs	r2, #0
 800caee:	68f8      	ldr	r0, [r7, #12]
 800caf0:	f003 fe13 	bl	801071a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800caf4:	2300      	movs	r3, #0
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3710      	adds	r7, #16
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}

0800cafe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800cafe:	b580      	push	{r7, lr}
 800cb00:	b088      	sub	sp, #32
 800cb02:	af04      	add	r7, sp, #16
 800cb04:	60f8      	str	r0, [r7, #12]
 800cb06:	60b9      	str	r1, [r7, #8]
 800cb08:	4611      	mov	r1, r2
 800cb0a:	461a      	mov	r2, r3
 800cb0c:	460b      	mov	r3, r1
 800cb0e:	80fb      	strh	r3, [r7, #6]
 800cb10:	4613      	mov	r3, r2
 800cb12:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cb14:	7979      	ldrb	r1, [r7, #5]
 800cb16:	2300      	movs	r3, #0
 800cb18:	9303      	str	r3, [sp, #12]
 800cb1a:	88fb      	ldrh	r3, [r7, #6]
 800cb1c:	9302      	str	r3, [sp, #8]
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	9301      	str	r3, [sp, #4]
 800cb22:	2301      	movs	r3, #1
 800cb24:	9300      	str	r3, [sp, #0]
 800cb26:	2300      	movs	r3, #0
 800cb28:	2201      	movs	r2, #1
 800cb2a:	68f8      	ldr	r0, [r7, #12]
 800cb2c:	f003 fdf5 	bl	801071a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800cb30:	2300      	movs	r3, #0

}
 800cb32:	4618      	mov	r0, r3
 800cb34:	3710      	adds	r7, #16
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}

0800cb3a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800cb3a:	b580      	push	{r7, lr}
 800cb3c:	b088      	sub	sp, #32
 800cb3e:	af04      	add	r7, sp, #16
 800cb40:	60f8      	str	r0, [r7, #12]
 800cb42:	60b9      	str	r1, [r7, #8]
 800cb44:	4611      	mov	r1, r2
 800cb46:	461a      	mov	r2, r3
 800cb48:	460b      	mov	r3, r1
 800cb4a:	80fb      	strh	r3, [r7, #6]
 800cb4c:	4613      	mov	r3, r2
 800cb4e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d001      	beq.n	800cb5e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cb5e:	7979      	ldrb	r1, [r7, #5]
 800cb60:	7e3b      	ldrb	r3, [r7, #24]
 800cb62:	9303      	str	r3, [sp, #12]
 800cb64:	88fb      	ldrh	r3, [r7, #6]
 800cb66:	9302      	str	r3, [sp, #8]
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	9301      	str	r3, [sp, #4]
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	9300      	str	r3, [sp, #0]
 800cb70:	2302      	movs	r3, #2
 800cb72:	2200      	movs	r2, #0
 800cb74:	68f8      	ldr	r0, [r7, #12]
 800cb76:	f003 fdd0 	bl	801071a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800cb7a:	2300      	movs	r3, #0
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3710      	adds	r7, #16
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b088      	sub	sp, #32
 800cb88:	af04      	add	r7, sp, #16
 800cb8a:	60f8      	str	r0, [r7, #12]
 800cb8c:	60b9      	str	r1, [r7, #8]
 800cb8e:	4611      	mov	r1, r2
 800cb90:	461a      	mov	r2, r3
 800cb92:	460b      	mov	r3, r1
 800cb94:	80fb      	strh	r3, [r7, #6]
 800cb96:	4613      	mov	r3, r2
 800cb98:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cb9a:	7979      	ldrb	r1, [r7, #5]
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	9303      	str	r3, [sp, #12]
 800cba0:	88fb      	ldrh	r3, [r7, #6]
 800cba2:	9302      	str	r3, [sp, #8]
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	9301      	str	r3, [sp, #4]
 800cba8:	2301      	movs	r3, #1
 800cbaa:	9300      	str	r3, [sp, #0]
 800cbac:	2302      	movs	r3, #2
 800cbae:	2201      	movs	r2, #1
 800cbb0:	68f8      	ldr	r0, [r7, #12]
 800cbb2:	f003 fdb2 	bl	801071a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800cbb6:	2300      	movs	r3, #0
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3710      	adds	r7, #16
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}

0800cbc0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b086      	sub	sp, #24
 800cbc4:	af04      	add	r7, sp, #16
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	4608      	mov	r0, r1
 800cbca:	4611      	mov	r1, r2
 800cbcc:	461a      	mov	r2, r3
 800cbce:	4603      	mov	r3, r0
 800cbd0:	70fb      	strb	r3, [r7, #3]
 800cbd2:	460b      	mov	r3, r1
 800cbd4:	70bb      	strb	r3, [r7, #2]
 800cbd6:	4613      	mov	r3, r2
 800cbd8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800cbda:	7878      	ldrb	r0, [r7, #1]
 800cbdc:	78ba      	ldrb	r2, [r7, #2]
 800cbde:	78f9      	ldrb	r1, [r7, #3]
 800cbe0:	8b3b      	ldrh	r3, [r7, #24]
 800cbe2:	9302      	str	r3, [sp, #8]
 800cbe4:	7d3b      	ldrb	r3, [r7, #20]
 800cbe6:	9301      	str	r3, [sp, #4]
 800cbe8:	7c3b      	ldrb	r3, [r7, #16]
 800cbea:	9300      	str	r3, [sp, #0]
 800cbec:	4603      	mov	r3, r0
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f003 fd45 	bl	801067e <USBH_LL_OpenPipe>

  return USBH_OK;
 800cbf4:	2300      	movs	r3, #0
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3708      	adds	r7, #8
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}

0800cbfe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800cbfe:	b580      	push	{r7, lr}
 800cc00:	b082      	sub	sp, #8
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	6078      	str	r0, [r7, #4]
 800cc06:	460b      	mov	r3, r1
 800cc08:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800cc0a:	78fb      	ldrb	r3, [r7, #3]
 800cc0c:	4619      	mov	r1, r3
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f003 fd64 	bl	80106dc <USBH_LL_ClosePipe>

  return USBH_OK;
 800cc14:	2300      	movs	r3, #0
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3708      	adds	r7, #8
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}

0800cc1e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800cc1e:	b580      	push	{r7, lr}
 800cc20:	b084      	sub	sp, #16
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	6078      	str	r0, [r7, #4]
 800cc26:	460b      	mov	r3, r1
 800cc28:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f000 f836 	bl	800cc9c <USBH_GetFreePipe>
 800cc30:	4603      	mov	r3, r0
 800cc32:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800cc34:	89fb      	ldrh	r3, [r7, #14]
 800cc36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d00a      	beq.n	800cc54 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800cc3e:	78fa      	ldrb	r2, [r7, #3]
 800cc40:	89fb      	ldrh	r3, [r7, #14]
 800cc42:	f003 030f 	and.w	r3, r3, #15
 800cc46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cc4a:	6879      	ldr	r1, [r7, #4]
 800cc4c:	33e0      	adds	r3, #224	; 0xe0
 800cc4e:	009b      	lsls	r3, r3, #2
 800cc50:	440b      	add	r3, r1
 800cc52:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800cc54:	89fb      	ldrh	r3, [r7, #14]
 800cc56:	b2db      	uxtb	r3, r3
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3710      	adds	r7, #16
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}

0800cc60 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800cc60:	b480      	push	{r7}
 800cc62:	b083      	sub	sp, #12
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	460b      	mov	r3, r1
 800cc6a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800cc6c:	78fb      	ldrb	r3, [r7, #3]
 800cc6e:	2b0f      	cmp	r3, #15
 800cc70:	d80d      	bhi.n	800cc8e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800cc72:	78fb      	ldrb	r3, [r7, #3]
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	33e0      	adds	r3, #224	; 0xe0
 800cc78:	009b      	lsls	r3, r3, #2
 800cc7a:	4413      	add	r3, r2
 800cc7c:	685a      	ldr	r2, [r3, #4]
 800cc7e:	78fb      	ldrb	r3, [r7, #3]
 800cc80:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800cc84:	6879      	ldr	r1, [r7, #4]
 800cc86:	33e0      	adds	r3, #224	; 0xe0
 800cc88:	009b      	lsls	r3, r3, #2
 800cc8a:	440b      	add	r3, r1
 800cc8c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800cc8e:	2300      	movs	r3, #0
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	370c      	adds	r7, #12
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr

0800cc9c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b085      	sub	sp, #20
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800cca4:	2300      	movs	r3, #0
 800cca6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800cca8:	2300      	movs	r3, #0
 800ccaa:	73fb      	strb	r3, [r7, #15]
 800ccac:	e00f      	b.n	800ccce <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ccae:	7bfb      	ldrb	r3, [r7, #15]
 800ccb0:	687a      	ldr	r2, [r7, #4]
 800ccb2:	33e0      	adds	r3, #224	; 0xe0
 800ccb4:	009b      	lsls	r3, r3, #2
 800ccb6:	4413      	add	r3, r2
 800ccb8:	685b      	ldr	r3, [r3, #4]
 800ccba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d102      	bne.n	800ccc8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ccc2:	7bfb      	ldrb	r3, [r7, #15]
 800ccc4:	b29b      	uxth	r3, r3
 800ccc6:	e007      	b.n	800ccd8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ccc8:	7bfb      	ldrb	r3, [r7, #15]
 800ccca:	3301      	adds	r3, #1
 800cccc:	73fb      	strb	r3, [r7, #15]
 800ccce:	7bfb      	ldrb	r3, [r7, #15]
 800ccd0:	2b0f      	cmp	r3, #15
 800ccd2:	d9ec      	bls.n	800ccae <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ccd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3714      	adds	r7, #20
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce2:	4770      	bx	lr

0800cce4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b084      	sub	sp, #16
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	4603      	mov	r3, r0
 800ccec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ccee:	79fb      	ldrb	r3, [r7, #7]
 800ccf0:	4a08      	ldr	r2, [pc, #32]	; (800cd14 <disk_status+0x30>)
 800ccf2:	009b      	lsls	r3, r3, #2
 800ccf4:	4413      	add	r3, r2
 800ccf6:	685b      	ldr	r3, [r3, #4]
 800ccf8:	685b      	ldr	r3, [r3, #4]
 800ccfa:	79fa      	ldrb	r2, [r7, #7]
 800ccfc:	4905      	ldr	r1, [pc, #20]	; (800cd14 <disk_status+0x30>)
 800ccfe:	440a      	add	r2, r1
 800cd00:	7a12      	ldrb	r2, [r2, #8]
 800cd02:	4610      	mov	r0, r2
 800cd04:	4798      	blx	r3
 800cd06:	4603      	mov	r3, r0
 800cd08:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cd0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3710      	adds	r7, #16
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}
 800cd14:	20002e88 	.word	0x20002e88

0800cd18 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b084      	sub	sp, #16
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	4603      	mov	r3, r0
 800cd20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cd22:	2300      	movs	r3, #0
 800cd24:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cd26:	79fb      	ldrb	r3, [r7, #7]
 800cd28:	4a0d      	ldr	r2, [pc, #52]	; (800cd60 <disk_initialize+0x48>)
 800cd2a:	5cd3      	ldrb	r3, [r2, r3]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d111      	bne.n	800cd54 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800cd30:	79fb      	ldrb	r3, [r7, #7]
 800cd32:	4a0b      	ldr	r2, [pc, #44]	; (800cd60 <disk_initialize+0x48>)
 800cd34:	2101      	movs	r1, #1
 800cd36:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cd38:	79fb      	ldrb	r3, [r7, #7]
 800cd3a:	4a09      	ldr	r2, [pc, #36]	; (800cd60 <disk_initialize+0x48>)
 800cd3c:	009b      	lsls	r3, r3, #2
 800cd3e:	4413      	add	r3, r2
 800cd40:	685b      	ldr	r3, [r3, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	79fa      	ldrb	r2, [r7, #7]
 800cd46:	4906      	ldr	r1, [pc, #24]	; (800cd60 <disk_initialize+0x48>)
 800cd48:	440a      	add	r2, r1
 800cd4a:	7a12      	ldrb	r2, [r2, #8]
 800cd4c:	4610      	mov	r0, r2
 800cd4e:	4798      	blx	r3
 800cd50:	4603      	mov	r3, r0
 800cd52:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cd54:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	3710      	adds	r7, #16
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
 800cd5e:	bf00      	nop
 800cd60:	20002e88 	.word	0x20002e88

0800cd64 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cd64:	b590      	push	{r4, r7, lr}
 800cd66:	b087      	sub	sp, #28
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	60b9      	str	r1, [r7, #8]
 800cd6c:	607a      	str	r2, [r7, #4]
 800cd6e:	603b      	str	r3, [r7, #0]
 800cd70:	4603      	mov	r3, r0
 800cd72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cd74:	7bfb      	ldrb	r3, [r7, #15]
 800cd76:	4a0a      	ldr	r2, [pc, #40]	; (800cda0 <disk_read+0x3c>)
 800cd78:	009b      	lsls	r3, r3, #2
 800cd7a:	4413      	add	r3, r2
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	689c      	ldr	r4, [r3, #8]
 800cd80:	7bfb      	ldrb	r3, [r7, #15]
 800cd82:	4a07      	ldr	r2, [pc, #28]	; (800cda0 <disk_read+0x3c>)
 800cd84:	4413      	add	r3, r2
 800cd86:	7a18      	ldrb	r0, [r3, #8]
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	687a      	ldr	r2, [r7, #4]
 800cd8c:	68b9      	ldr	r1, [r7, #8]
 800cd8e:	47a0      	blx	r4
 800cd90:	4603      	mov	r3, r0
 800cd92:	75fb      	strb	r3, [r7, #23]
  return res;
 800cd94:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	371c      	adds	r7, #28
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd90      	pop	{r4, r7, pc}
 800cd9e:	bf00      	nop
 800cda0:	20002e88 	.word	0x20002e88

0800cda4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cda4:	b590      	push	{r4, r7, lr}
 800cda6:	b087      	sub	sp, #28
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	60b9      	str	r1, [r7, #8]
 800cdac:	607a      	str	r2, [r7, #4]
 800cdae:	603b      	str	r3, [r7, #0]
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cdb4:	7bfb      	ldrb	r3, [r7, #15]
 800cdb6:	4a0a      	ldr	r2, [pc, #40]	; (800cde0 <disk_write+0x3c>)
 800cdb8:	009b      	lsls	r3, r3, #2
 800cdba:	4413      	add	r3, r2
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	68dc      	ldr	r4, [r3, #12]
 800cdc0:	7bfb      	ldrb	r3, [r7, #15]
 800cdc2:	4a07      	ldr	r2, [pc, #28]	; (800cde0 <disk_write+0x3c>)
 800cdc4:	4413      	add	r3, r2
 800cdc6:	7a18      	ldrb	r0, [r3, #8]
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	687a      	ldr	r2, [r7, #4]
 800cdcc:	68b9      	ldr	r1, [r7, #8]
 800cdce:	47a0      	blx	r4
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	75fb      	strb	r3, [r7, #23]
  return res;
 800cdd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	371c      	adds	r7, #28
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd90      	pop	{r4, r7, pc}
 800cdde:	bf00      	nop
 800cde0:	20002e88 	.word	0x20002e88

0800cde4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b084      	sub	sp, #16
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	4603      	mov	r3, r0
 800cdec:	603a      	str	r2, [r7, #0]
 800cdee:	71fb      	strb	r3, [r7, #7]
 800cdf0:	460b      	mov	r3, r1
 800cdf2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cdf4:	79fb      	ldrb	r3, [r7, #7]
 800cdf6:	4a09      	ldr	r2, [pc, #36]	; (800ce1c <disk_ioctl+0x38>)
 800cdf8:	009b      	lsls	r3, r3, #2
 800cdfa:	4413      	add	r3, r2
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	691b      	ldr	r3, [r3, #16]
 800ce00:	79fa      	ldrb	r2, [r7, #7]
 800ce02:	4906      	ldr	r1, [pc, #24]	; (800ce1c <disk_ioctl+0x38>)
 800ce04:	440a      	add	r2, r1
 800ce06:	7a10      	ldrb	r0, [r2, #8]
 800ce08:	79b9      	ldrb	r1, [r7, #6]
 800ce0a:	683a      	ldr	r2, [r7, #0]
 800ce0c:	4798      	blx	r3
 800ce0e:	4603      	mov	r3, r0
 800ce10:	73fb      	strb	r3, [r7, #15]
  return res;
 800ce12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3710      	adds	r7, #16
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	20002e88 	.word	0x20002e88

0800ce20 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ce20:	b480      	push	{r7}
 800ce22:	b085      	sub	sp, #20
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ce30:	89fb      	ldrh	r3, [r7, #14]
 800ce32:	021b      	lsls	r3, r3, #8
 800ce34:	b21a      	sxth	r2, r3
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	781b      	ldrb	r3, [r3, #0]
 800ce3a:	b21b      	sxth	r3, r3
 800ce3c:	4313      	orrs	r3, r2
 800ce3e:	b21b      	sxth	r3, r3
 800ce40:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ce42:	89fb      	ldrh	r3, [r7, #14]
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3714      	adds	r7, #20
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr

0800ce50 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ce50:	b480      	push	{r7}
 800ce52:	b085      	sub	sp, #20
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	3303      	adds	r3, #3
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	021b      	lsls	r3, r3, #8
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	3202      	adds	r2, #2
 800ce68:	7812      	ldrb	r2, [r2, #0]
 800ce6a:	4313      	orrs	r3, r2
 800ce6c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	021b      	lsls	r3, r3, #8
 800ce72:	687a      	ldr	r2, [r7, #4]
 800ce74:	3201      	adds	r2, #1
 800ce76:	7812      	ldrb	r2, [r2, #0]
 800ce78:	4313      	orrs	r3, r2
 800ce7a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	021b      	lsls	r3, r3, #8
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	7812      	ldrb	r2, [r2, #0]
 800ce84:	4313      	orrs	r3, r2
 800ce86:	60fb      	str	r3, [r7, #12]
	return rv;
 800ce88:	68fb      	ldr	r3, [r7, #12]
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3714      	adds	r7, #20
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce94:	4770      	bx	lr

0800ce96 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ce96:	b480      	push	{r7}
 800ce98:	b083      	sub	sp, #12
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	6078      	str	r0, [r7, #4]
 800ce9e:	460b      	mov	r3, r1
 800cea0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	1c5a      	adds	r2, r3, #1
 800cea6:	607a      	str	r2, [r7, #4]
 800cea8:	887a      	ldrh	r2, [r7, #2]
 800ceaa:	b2d2      	uxtb	r2, r2
 800ceac:	701a      	strb	r2, [r3, #0]
 800ceae:	887b      	ldrh	r3, [r7, #2]
 800ceb0:	0a1b      	lsrs	r3, r3, #8
 800ceb2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	1c5a      	adds	r2, r3, #1
 800ceb8:	607a      	str	r2, [r7, #4]
 800ceba:	887a      	ldrh	r2, [r7, #2]
 800cebc:	b2d2      	uxtb	r2, r2
 800cebe:	701a      	strb	r2, [r3, #0]
}
 800cec0:	bf00      	nop
 800cec2:	370c      	adds	r7, #12
 800cec4:	46bd      	mov	sp, r7
 800cec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceca:	4770      	bx	lr

0800cecc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cecc:	b480      	push	{r7}
 800cece:	b083      	sub	sp, #12
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	1c5a      	adds	r2, r3, #1
 800ceda:	607a      	str	r2, [r7, #4]
 800cedc:	683a      	ldr	r2, [r7, #0]
 800cede:	b2d2      	uxtb	r2, r2
 800cee0:	701a      	strb	r2, [r3, #0]
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	0a1b      	lsrs	r3, r3, #8
 800cee6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	1c5a      	adds	r2, r3, #1
 800ceec:	607a      	str	r2, [r7, #4]
 800ceee:	683a      	ldr	r2, [r7, #0]
 800cef0:	b2d2      	uxtb	r2, r2
 800cef2:	701a      	strb	r2, [r3, #0]
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	0a1b      	lsrs	r3, r3, #8
 800cef8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	1c5a      	adds	r2, r3, #1
 800cefe:	607a      	str	r2, [r7, #4]
 800cf00:	683a      	ldr	r2, [r7, #0]
 800cf02:	b2d2      	uxtb	r2, r2
 800cf04:	701a      	strb	r2, [r3, #0]
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	0a1b      	lsrs	r3, r3, #8
 800cf0a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	1c5a      	adds	r2, r3, #1
 800cf10:	607a      	str	r2, [r7, #4]
 800cf12:	683a      	ldr	r2, [r7, #0]
 800cf14:	b2d2      	uxtb	r2, r2
 800cf16:	701a      	strb	r2, [r3, #0]
}
 800cf18:	bf00      	nop
 800cf1a:	370c      	adds	r7, #12
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf22:	4770      	bx	lr

0800cf24 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cf24:	b480      	push	{r7}
 800cf26:	b087      	sub	sp, #28
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	60b9      	str	r1, [r7, #8]
 800cf2e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d00d      	beq.n	800cf5a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cf3e:	693a      	ldr	r2, [r7, #16]
 800cf40:	1c53      	adds	r3, r2, #1
 800cf42:	613b      	str	r3, [r7, #16]
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	1c59      	adds	r1, r3, #1
 800cf48:	6179      	str	r1, [r7, #20]
 800cf4a:	7812      	ldrb	r2, [r2, #0]
 800cf4c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	3b01      	subs	r3, #1
 800cf52:	607b      	str	r3, [r7, #4]
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d1f1      	bne.n	800cf3e <mem_cpy+0x1a>
	}
}
 800cf5a:	bf00      	nop
 800cf5c:	371c      	adds	r7, #28
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf64:	4770      	bx	lr

0800cf66 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cf66:	b480      	push	{r7}
 800cf68:	b087      	sub	sp, #28
 800cf6a:	af00      	add	r7, sp, #0
 800cf6c:	60f8      	str	r0, [r7, #12]
 800cf6e:	60b9      	str	r1, [r7, #8]
 800cf70:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	1c5a      	adds	r2, r3, #1
 800cf7a:	617a      	str	r2, [r7, #20]
 800cf7c:	68ba      	ldr	r2, [r7, #8]
 800cf7e:	b2d2      	uxtb	r2, r2
 800cf80:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	3b01      	subs	r3, #1
 800cf86:	607b      	str	r3, [r7, #4]
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d1f3      	bne.n	800cf76 <mem_set+0x10>
}
 800cf8e:	bf00      	nop
 800cf90:	bf00      	nop
 800cf92:	371c      	adds	r7, #28
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800cf9c:	b480      	push	{r7}
 800cf9e:	b089      	sub	sp, #36	; 0x24
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	60f8      	str	r0, [r7, #12]
 800cfa4:	60b9      	str	r1, [r7, #8]
 800cfa6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	61fb      	str	r3, [r7, #28]
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800cfb4:	69fb      	ldr	r3, [r7, #28]
 800cfb6:	1c5a      	adds	r2, r3, #1
 800cfb8:	61fa      	str	r2, [r7, #28]
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	69bb      	ldr	r3, [r7, #24]
 800cfc0:	1c5a      	adds	r2, r3, #1
 800cfc2:	61ba      	str	r2, [r7, #24]
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	1acb      	subs	r3, r1, r3
 800cfc8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	3b01      	subs	r3, #1
 800cfce:	607b      	str	r3, [r7, #4]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d002      	beq.n	800cfdc <mem_cmp+0x40>
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d0eb      	beq.n	800cfb4 <mem_cmp+0x18>

	return r;
 800cfdc:	697b      	ldr	r3, [r7, #20]
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3724      	adds	r7, #36	; 0x24
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr

0800cfea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cfea:	b480      	push	{r7}
 800cfec:	b083      	sub	sp, #12
 800cfee:	af00      	add	r7, sp, #0
 800cff0:	6078      	str	r0, [r7, #4]
 800cff2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cff4:	e002      	b.n	800cffc <chk_chr+0x12>
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	3301      	adds	r3, #1
 800cffa:	607b      	str	r3, [r7, #4]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d005      	beq.n	800d010 <chk_chr+0x26>
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	781b      	ldrb	r3, [r3, #0]
 800d008:	461a      	mov	r2, r3
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d1f2      	bne.n	800cff6 <chk_chr+0xc>
	return *str;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	781b      	ldrb	r3, [r3, #0]
}
 800d014:	4618      	mov	r0, r3
 800d016:	370c      	adds	r7, #12
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr

0800d020 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d020:	b480      	push	{r7}
 800d022:	b085      	sub	sp, #20
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d02a:	2300      	movs	r3, #0
 800d02c:	60bb      	str	r3, [r7, #8]
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	60fb      	str	r3, [r7, #12]
 800d032:	e029      	b.n	800d088 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d034:	4a27      	ldr	r2, [pc, #156]	; (800d0d4 <chk_lock+0xb4>)
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	011b      	lsls	r3, r3, #4
 800d03a:	4413      	add	r3, r2
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d01d      	beq.n	800d07e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d042:	4a24      	ldr	r2, [pc, #144]	; (800d0d4 <chk_lock+0xb4>)
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	011b      	lsls	r3, r3, #4
 800d048:	4413      	add	r3, r2
 800d04a:	681a      	ldr	r2, [r3, #0]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	429a      	cmp	r2, r3
 800d052:	d116      	bne.n	800d082 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d054:	4a1f      	ldr	r2, [pc, #124]	; (800d0d4 <chk_lock+0xb4>)
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	011b      	lsls	r3, r3, #4
 800d05a:	4413      	add	r3, r2
 800d05c:	3304      	adds	r3, #4
 800d05e:	681a      	ldr	r2, [r3, #0]
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d064:	429a      	cmp	r2, r3
 800d066:	d10c      	bne.n	800d082 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d068:	4a1a      	ldr	r2, [pc, #104]	; (800d0d4 <chk_lock+0xb4>)
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	011b      	lsls	r3, r3, #4
 800d06e:	4413      	add	r3, r2
 800d070:	3308      	adds	r3, #8
 800d072:	681a      	ldr	r2, [r3, #0]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d078:	429a      	cmp	r2, r3
 800d07a:	d102      	bne.n	800d082 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d07c:	e007      	b.n	800d08e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d07e:	2301      	movs	r3, #1
 800d080:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	3301      	adds	r3, #1
 800d086:	60fb      	str	r3, [r7, #12]
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2b01      	cmp	r3, #1
 800d08c:	d9d2      	bls.n	800d034 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	2b02      	cmp	r3, #2
 800d092:	d109      	bne.n	800d0a8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d102      	bne.n	800d0a0 <chk_lock+0x80>
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	2b02      	cmp	r3, #2
 800d09e:	d101      	bne.n	800d0a4 <chk_lock+0x84>
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	e010      	b.n	800d0c6 <chk_lock+0xa6>
 800d0a4:	2312      	movs	r3, #18
 800d0a6:	e00e      	b.n	800d0c6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d108      	bne.n	800d0c0 <chk_lock+0xa0>
 800d0ae:	4a09      	ldr	r2, [pc, #36]	; (800d0d4 <chk_lock+0xb4>)
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	011b      	lsls	r3, r3, #4
 800d0b4:	4413      	add	r3, r2
 800d0b6:	330c      	adds	r3, #12
 800d0b8:	881b      	ldrh	r3, [r3, #0]
 800d0ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0be:	d101      	bne.n	800d0c4 <chk_lock+0xa4>
 800d0c0:	2310      	movs	r3, #16
 800d0c2:	e000      	b.n	800d0c6 <chk_lock+0xa6>
 800d0c4:	2300      	movs	r3, #0
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3714      	adds	r7, #20
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d0:	4770      	bx	lr
 800d0d2:	bf00      	nop
 800d0d4:	20002c68 	.word	0x20002c68

0800d0d8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b083      	sub	sp, #12
 800d0dc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	607b      	str	r3, [r7, #4]
 800d0e2:	e002      	b.n	800d0ea <enq_lock+0x12>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	3301      	adds	r3, #1
 800d0e8:	607b      	str	r3, [r7, #4]
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2b01      	cmp	r3, #1
 800d0ee:	d806      	bhi.n	800d0fe <enq_lock+0x26>
 800d0f0:	4a09      	ldr	r2, [pc, #36]	; (800d118 <enq_lock+0x40>)
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	011b      	lsls	r3, r3, #4
 800d0f6:	4413      	add	r3, r2
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d1f2      	bne.n	800d0e4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2b02      	cmp	r3, #2
 800d102:	bf14      	ite	ne
 800d104:	2301      	movne	r3, #1
 800d106:	2300      	moveq	r3, #0
 800d108:	b2db      	uxtb	r3, r3
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	370c      	adds	r7, #12
 800d10e:	46bd      	mov	sp, r7
 800d110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d114:	4770      	bx	lr
 800d116:	bf00      	nop
 800d118:	20002c68 	.word	0x20002c68

0800d11c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b085      	sub	sp, #20
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d126:	2300      	movs	r3, #0
 800d128:	60fb      	str	r3, [r7, #12]
 800d12a:	e01f      	b.n	800d16c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d12c:	4a41      	ldr	r2, [pc, #260]	; (800d234 <inc_lock+0x118>)
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	011b      	lsls	r3, r3, #4
 800d132:	4413      	add	r3, r2
 800d134:	681a      	ldr	r2, [r3, #0]
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d113      	bne.n	800d166 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d13e:	4a3d      	ldr	r2, [pc, #244]	; (800d234 <inc_lock+0x118>)
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	011b      	lsls	r3, r3, #4
 800d144:	4413      	add	r3, r2
 800d146:	3304      	adds	r3, #4
 800d148:	681a      	ldr	r2, [r3, #0]
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d14e:	429a      	cmp	r2, r3
 800d150:	d109      	bne.n	800d166 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d152:	4a38      	ldr	r2, [pc, #224]	; (800d234 <inc_lock+0x118>)
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	011b      	lsls	r3, r3, #4
 800d158:	4413      	add	r3, r2
 800d15a:	3308      	adds	r3, #8
 800d15c:	681a      	ldr	r2, [r3, #0]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d162:	429a      	cmp	r2, r3
 800d164:	d006      	beq.n	800d174 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	3301      	adds	r3, #1
 800d16a:	60fb      	str	r3, [r7, #12]
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	2b01      	cmp	r3, #1
 800d170:	d9dc      	bls.n	800d12c <inc_lock+0x10>
 800d172:	e000      	b.n	800d176 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d174:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2b02      	cmp	r3, #2
 800d17a:	d132      	bne.n	800d1e2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d17c:	2300      	movs	r3, #0
 800d17e:	60fb      	str	r3, [r7, #12]
 800d180:	e002      	b.n	800d188 <inc_lock+0x6c>
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	3301      	adds	r3, #1
 800d186:	60fb      	str	r3, [r7, #12]
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	2b01      	cmp	r3, #1
 800d18c:	d806      	bhi.n	800d19c <inc_lock+0x80>
 800d18e:	4a29      	ldr	r2, [pc, #164]	; (800d234 <inc_lock+0x118>)
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	011b      	lsls	r3, r3, #4
 800d194:	4413      	add	r3, r2
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d1f2      	bne.n	800d182 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2b02      	cmp	r3, #2
 800d1a0:	d101      	bne.n	800d1a6 <inc_lock+0x8a>
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	e040      	b.n	800d228 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681a      	ldr	r2, [r3, #0]
 800d1aa:	4922      	ldr	r1, [pc, #136]	; (800d234 <inc_lock+0x118>)
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	011b      	lsls	r3, r3, #4
 800d1b0:	440b      	add	r3, r1
 800d1b2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	689a      	ldr	r2, [r3, #8]
 800d1b8:	491e      	ldr	r1, [pc, #120]	; (800d234 <inc_lock+0x118>)
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	011b      	lsls	r3, r3, #4
 800d1be:	440b      	add	r3, r1
 800d1c0:	3304      	adds	r3, #4
 800d1c2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	695a      	ldr	r2, [r3, #20]
 800d1c8:	491a      	ldr	r1, [pc, #104]	; (800d234 <inc_lock+0x118>)
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	011b      	lsls	r3, r3, #4
 800d1ce:	440b      	add	r3, r1
 800d1d0:	3308      	adds	r3, #8
 800d1d2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d1d4:	4a17      	ldr	r2, [pc, #92]	; (800d234 <inc_lock+0x118>)
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	011b      	lsls	r3, r3, #4
 800d1da:	4413      	add	r3, r2
 800d1dc:	330c      	adds	r3, #12
 800d1de:	2200      	movs	r2, #0
 800d1e0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d009      	beq.n	800d1fc <inc_lock+0xe0>
 800d1e8:	4a12      	ldr	r2, [pc, #72]	; (800d234 <inc_lock+0x118>)
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	011b      	lsls	r3, r3, #4
 800d1ee:	4413      	add	r3, r2
 800d1f0:	330c      	adds	r3, #12
 800d1f2:	881b      	ldrh	r3, [r3, #0]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d001      	beq.n	800d1fc <inc_lock+0xe0>
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	e015      	b.n	800d228 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d108      	bne.n	800d214 <inc_lock+0xf8>
 800d202:	4a0c      	ldr	r2, [pc, #48]	; (800d234 <inc_lock+0x118>)
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	011b      	lsls	r3, r3, #4
 800d208:	4413      	add	r3, r2
 800d20a:	330c      	adds	r3, #12
 800d20c:	881b      	ldrh	r3, [r3, #0]
 800d20e:	3301      	adds	r3, #1
 800d210:	b29a      	uxth	r2, r3
 800d212:	e001      	b.n	800d218 <inc_lock+0xfc>
 800d214:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d218:	4906      	ldr	r1, [pc, #24]	; (800d234 <inc_lock+0x118>)
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	011b      	lsls	r3, r3, #4
 800d21e:	440b      	add	r3, r1
 800d220:	330c      	adds	r3, #12
 800d222:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	3301      	adds	r3, #1
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3714      	adds	r7, #20
 800d22c:	46bd      	mov	sp, r7
 800d22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d232:	4770      	bx	lr
 800d234:	20002c68 	.word	0x20002c68

0800d238 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d238:	b480      	push	{r7}
 800d23a:	b085      	sub	sp, #20
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	3b01      	subs	r3, #1
 800d244:	607b      	str	r3, [r7, #4]
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2b01      	cmp	r3, #1
 800d24a:	d825      	bhi.n	800d298 <dec_lock+0x60>
		n = Files[i].ctr;
 800d24c:	4a17      	ldr	r2, [pc, #92]	; (800d2ac <dec_lock+0x74>)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	011b      	lsls	r3, r3, #4
 800d252:	4413      	add	r3, r2
 800d254:	330c      	adds	r3, #12
 800d256:	881b      	ldrh	r3, [r3, #0]
 800d258:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d25a:	89fb      	ldrh	r3, [r7, #14]
 800d25c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d260:	d101      	bne.n	800d266 <dec_lock+0x2e>
 800d262:	2300      	movs	r3, #0
 800d264:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d266:	89fb      	ldrh	r3, [r7, #14]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d002      	beq.n	800d272 <dec_lock+0x3a>
 800d26c:	89fb      	ldrh	r3, [r7, #14]
 800d26e:	3b01      	subs	r3, #1
 800d270:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d272:	4a0e      	ldr	r2, [pc, #56]	; (800d2ac <dec_lock+0x74>)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	011b      	lsls	r3, r3, #4
 800d278:	4413      	add	r3, r2
 800d27a:	330c      	adds	r3, #12
 800d27c:	89fa      	ldrh	r2, [r7, #14]
 800d27e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d280:	89fb      	ldrh	r3, [r7, #14]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d105      	bne.n	800d292 <dec_lock+0x5a>
 800d286:	4a09      	ldr	r2, [pc, #36]	; (800d2ac <dec_lock+0x74>)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	011b      	lsls	r3, r3, #4
 800d28c:	4413      	add	r3, r2
 800d28e:	2200      	movs	r2, #0
 800d290:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d292:	2300      	movs	r3, #0
 800d294:	737b      	strb	r3, [r7, #13]
 800d296:	e001      	b.n	800d29c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d298:	2302      	movs	r3, #2
 800d29a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d29c:	7b7b      	ldrb	r3, [r7, #13]
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3714      	adds	r7, #20
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop
 800d2ac:	20002c68 	.word	0x20002c68

0800d2b0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b085      	sub	sp, #20
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	60fb      	str	r3, [r7, #12]
 800d2bc:	e010      	b.n	800d2e0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d2be:	4a0d      	ldr	r2, [pc, #52]	; (800d2f4 <clear_lock+0x44>)
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	011b      	lsls	r3, r3, #4
 800d2c4:	4413      	add	r3, r2
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	687a      	ldr	r2, [r7, #4]
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d105      	bne.n	800d2da <clear_lock+0x2a>
 800d2ce:	4a09      	ldr	r2, [pc, #36]	; (800d2f4 <clear_lock+0x44>)
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	011b      	lsls	r3, r3, #4
 800d2d4:	4413      	add	r3, r2
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	3301      	adds	r3, #1
 800d2de:	60fb      	str	r3, [r7, #12]
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	d9eb      	bls.n	800d2be <clear_lock+0xe>
	}
}
 800d2e6:	bf00      	nop
 800d2e8:	bf00      	nop
 800d2ea:	3714      	adds	r7, #20
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr
 800d2f4:	20002c68 	.word	0x20002c68

0800d2f8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b086      	sub	sp, #24
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d300:	2300      	movs	r3, #0
 800d302:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	78db      	ldrb	r3, [r3, #3]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d034      	beq.n	800d376 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d310:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	7858      	ldrb	r0, [r3, #1]
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d31c:	2301      	movs	r3, #1
 800d31e:	697a      	ldr	r2, [r7, #20]
 800d320:	f7ff fd40 	bl	800cda4 <disk_write>
 800d324:	4603      	mov	r3, r0
 800d326:	2b00      	cmp	r3, #0
 800d328:	d002      	beq.n	800d330 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d32a:	2301      	movs	r3, #1
 800d32c:	73fb      	strb	r3, [r7, #15]
 800d32e:	e022      	b.n	800d376 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2200      	movs	r2, #0
 800d334:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d33a:	697a      	ldr	r2, [r7, #20]
 800d33c:	1ad2      	subs	r2, r2, r3
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	69db      	ldr	r3, [r3, #28]
 800d342:	429a      	cmp	r2, r3
 800d344:	d217      	bcs.n	800d376 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	789b      	ldrb	r3, [r3, #2]
 800d34a:	613b      	str	r3, [r7, #16]
 800d34c:	e010      	b.n	800d370 <sync_window+0x78>
					wsect += fs->fsize;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	69db      	ldr	r3, [r3, #28]
 800d352:	697a      	ldr	r2, [r7, #20]
 800d354:	4413      	add	r3, r2
 800d356:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	7858      	ldrb	r0, [r3, #1]
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d362:	2301      	movs	r3, #1
 800d364:	697a      	ldr	r2, [r7, #20]
 800d366:	f7ff fd1d 	bl	800cda4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	3b01      	subs	r3, #1
 800d36e:	613b      	str	r3, [r7, #16]
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	2b01      	cmp	r3, #1
 800d374:	d8eb      	bhi.n	800d34e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d376:	7bfb      	ldrb	r3, [r7, #15]
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3718      	adds	r7, #24
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b084      	sub	sp, #16
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d38a:	2300      	movs	r3, #0
 800d38c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d392:	683a      	ldr	r2, [r7, #0]
 800d394:	429a      	cmp	r2, r3
 800d396:	d01b      	beq.n	800d3d0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f7ff ffad 	bl	800d2f8 <sync_window>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d3a2:	7bfb      	ldrb	r3, [r7, #15]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d113      	bne.n	800d3d0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	7858      	ldrb	r0, [r3, #1]
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	683a      	ldr	r2, [r7, #0]
 800d3b6:	f7ff fcd5 	bl	800cd64 <disk_read>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d004      	beq.n	800d3ca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d3c0:	f04f 33ff 	mov.w	r3, #4294967295
 800d3c4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	683a      	ldr	r2, [r7, #0]
 800d3ce:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800d3d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3710      	adds	r7, #16
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
	...

0800d3dc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b084      	sub	sp, #16
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f7ff ff87 	bl	800d2f8 <sync_window>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d3ee:	7bfb      	ldrb	r3, [r7, #15]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d158      	bne.n	800d4a6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	2b03      	cmp	r3, #3
 800d3fa:	d148      	bne.n	800d48e <sync_fs+0xb2>
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	791b      	ldrb	r3, [r3, #4]
 800d400:	2b01      	cmp	r3, #1
 800d402:	d144      	bne.n	800d48e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	3334      	adds	r3, #52	; 0x34
 800d408:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d40c:	2100      	movs	r1, #0
 800d40e:	4618      	mov	r0, r3
 800d410:	f7ff fda9 	bl	800cf66 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	3334      	adds	r3, #52	; 0x34
 800d418:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d41c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d420:	4618      	mov	r0, r3
 800d422:	f7ff fd38 	bl	800ce96 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	3334      	adds	r3, #52	; 0x34
 800d42a:	4921      	ldr	r1, [pc, #132]	; (800d4b0 <sync_fs+0xd4>)
 800d42c:	4618      	mov	r0, r3
 800d42e:	f7ff fd4d 	bl	800cecc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	3334      	adds	r3, #52	; 0x34
 800d436:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d43a:	491e      	ldr	r1, [pc, #120]	; (800d4b4 <sync_fs+0xd8>)
 800d43c:	4618      	mov	r0, r3
 800d43e:	f7ff fd45 	bl	800cecc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	3334      	adds	r3, #52	; 0x34
 800d446:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	695b      	ldr	r3, [r3, #20]
 800d44e:	4619      	mov	r1, r3
 800d450:	4610      	mov	r0, r2
 800d452:	f7ff fd3b 	bl	800cecc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	3334      	adds	r3, #52	; 0x34
 800d45a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	691b      	ldr	r3, [r3, #16]
 800d462:	4619      	mov	r1, r3
 800d464:	4610      	mov	r0, r2
 800d466:	f7ff fd31 	bl	800cecc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6a1b      	ldr	r3, [r3, #32]
 800d46e:	1c5a      	adds	r2, r3, #1
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	7858      	ldrb	r0, [r3, #1]
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d482:	2301      	movs	r3, #1
 800d484:	f7ff fc8e 	bl	800cda4 <disk_write>
			fs->fsi_flag = 0;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2200      	movs	r2, #0
 800d48c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	785b      	ldrb	r3, [r3, #1]
 800d492:	2200      	movs	r2, #0
 800d494:	2100      	movs	r1, #0
 800d496:	4618      	mov	r0, r3
 800d498:	f7ff fca4 	bl	800cde4 <disk_ioctl>
 800d49c:	4603      	mov	r3, r0
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d001      	beq.n	800d4a6 <sync_fs+0xca>
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d4a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3710      	adds	r7, #16
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}
 800d4b0:	41615252 	.word	0x41615252
 800d4b4:	61417272 	.word	0x61417272

0800d4b8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b083      	sub	sp, #12
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
 800d4c0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	3b02      	subs	r3, #2
 800d4c6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	699b      	ldr	r3, [r3, #24]
 800d4cc:	3b02      	subs	r3, #2
 800d4ce:	683a      	ldr	r2, [r7, #0]
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d301      	bcc.n	800d4d8 <clust2sect+0x20>
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	e008      	b.n	800d4ea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	895b      	ldrh	r3, [r3, #10]
 800d4dc:	461a      	mov	r2, r3
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	fb03 f202 	mul.w	r2, r3, r2
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e8:	4413      	add	r3, r2
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	370c      	adds	r7, #12
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f4:	4770      	bx	lr

0800d4f6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d4f6:	b580      	push	{r7, lr}
 800d4f8:	b086      	sub	sp, #24
 800d4fa:	af00      	add	r7, sp, #0
 800d4fc:	6078      	str	r0, [r7, #4]
 800d4fe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	2b01      	cmp	r3, #1
 800d50a:	d904      	bls.n	800d516 <get_fat+0x20>
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	699b      	ldr	r3, [r3, #24]
 800d510:	683a      	ldr	r2, [r7, #0]
 800d512:	429a      	cmp	r2, r3
 800d514:	d302      	bcc.n	800d51c <get_fat+0x26>
		val = 1;	/* Internal error */
 800d516:	2301      	movs	r3, #1
 800d518:	617b      	str	r3, [r7, #20]
 800d51a:	e08f      	b.n	800d63c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d51c:	f04f 33ff 	mov.w	r3, #4294967295
 800d520:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d522:	693b      	ldr	r3, [r7, #16]
 800d524:	781b      	ldrb	r3, [r3, #0]
 800d526:	2b03      	cmp	r3, #3
 800d528:	d062      	beq.n	800d5f0 <get_fat+0xfa>
 800d52a:	2b03      	cmp	r3, #3
 800d52c:	dc7c      	bgt.n	800d628 <get_fat+0x132>
 800d52e:	2b01      	cmp	r3, #1
 800d530:	d002      	beq.n	800d538 <get_fat+0x42>
 800d532:	2b02      	cmp	r3, #2
 800d534:	d042      	beq.n	800d5bc <get_fat+0xc6>
 800d536:	e077      	b.n	800d628 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	60fb      	str	r3, [r7, #12]
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	085b      	lsrs	r3, r3, #1
 800d540:	68fa      	ldr	r2, [r7, #12]
 800d542:	4413      	add	r3, r2
 800d544:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	0a5b      	lsrs	r3, r3, #9
 800d54e:	4413      	add	r3, r2
 800d550:	4619      	mov	r1, r3
 800d552:	6938      	ldr	r0, [r7, #16]
 800d554:	f7ff ff14 	bl	800d380 <move_window>
 800d558:	4603      	mov	r3, r0
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d167      	bne.n	800d62e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	1c5a      	adds	r2, r3, #1
 800d562:	60fa      	str	r2, [r7, #12]
 800d564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d568:	693a      	ldr	r2, [r7, #16]
 800d56a:	4413      	add	r3, r2
 800d56c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d570:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	0a5b      	lsrs	r3, r3, #9
 800d57a:	4413      	add	r3, r2
 800d57c:	4619      	mov	r1, r3
 800d57e:	6938      	ldr	r0, [r7, #16]
 800d580:	f7ff fefe 	bl	800d380 <move_window>
 800d584:	4603      	mov	r3, r0
 800d586:	2b00      	cmp	r3, #0
 800d588:	d153      	bne.n	800d632 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d590:	693a      	ldr	r2, [r7, #16]
 800d592:	4413      	add	r3, r2
 800d594:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d598:	021b      	lsls	r3, r3, #8
 800d59a:	461a      	mov	r2, r3
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	4313      	orrs	r3, r2
 800d5a0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	f003 0301 	and.w	r3, r3, #1
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d002      	beq.n	800d5b2 <get_fat+0xbc>
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	091b      	lsrs	r3, r3, #4
 800d5b0:	e002      	b.n	800d5b8 <get_fat+0xc2>
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d5b8:	617b      	str	r3, [r7, #20]
			break;
 800d5ba:	e03f      	b.n	800d63c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	0a1b      	lsrs	r3, r3, #8
 800d5c4:	4413      	add	r3, r2
 800d5c6:	4619      	mov	r1, r3
 800d5c8:	6938      	ldr	r0, [r7, #16]
 800d5ca:	f7ff fed9 	bl	800d380 <move_window>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d130      	bne.n	800d636 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	005b      	lsls	r3, r3, #1
 800d5de:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d5e2:	4413      	add	r3, r2
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f7ff fc1b 	bl	800ce20 <ld_word>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	617b      	str	r3, [r7, #20]
			break;
 800d5ee:	e025      	b.n	800d63c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d5f0:	693b      	ldr	r3, [r7, #16]
 800d5f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	09db      	lsrs	r3, r3, #7
 800d5f8:	4413      	add	r3, r2
 800d5fa:	4619      	mov	r1, r3
 800d5fc:	6938      	ldr	r0, [r7, #16]
 800d5fe:	f7ff febf 	bl	800d380 <move_window>
 800d602:	4603      	mov	r3, r0
 800d604:	2b00      	cmp	r3, #0
 800d606:	d118      	bne.n	800d63a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	009b      	lsls	r3, r3, #2
 800d612:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d616:	4413      	add	r3, r2
 800d618:	4618      	mov	r0, r3
 800d61a:	f7ff fc19 	bl	800ce50 <ld_dword>
 800d61e:	4603      	mov	r3, r0
 800d620:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d624:	617b      	str	r3, [r7, #20]
			break;
 800d626:	e009      	b.n	800d63c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d628:	2301      	movs	r3, #1
 800d62a:	617b      	str	r3, [r7, #20]
 800d62c:	e006      	b.n	800d63c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d62e:	bf00      	nop
 800d630:	e004      	b.n	800d63c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d632:	bf00      	nop
 800d634:	e002      	b.n	800d63c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d636:	bf00      	nop
 800d638:	e000      	b.n	800d63c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d63a:	bf00      	nop
		}
	}

	return val;
 800d63c:	697b      	ldr	r3, [r7, #20]
}
 800d63e:	4618      	mov	r0, r3
 800d640:	3718      	adds	r7, #24
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}

0800d646 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d646:	b590      	push	{r4, r7, lr}
 800d648:	b089      	sub	sp, #36	; 0x24
 800d64a:	af00      	add	r7, sp, #0
 800d64c:	60f8      	str	r0, [r7, #12]
 800d64e:	60b9      	str	r1, [r7, #8]
 800d650:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d652:	2302      	movs	r3, #2
 800d654:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	2b01      	cmp	r3, #1
 800d65a:	f240 80d9 	bls.w	800d810 <put_fat+0x1ca>
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	699b      	ldr	r3, [r3, #24]
 800d662:	68ba      	ldr	r2, [r7, #8]
 800d664:	429a      	cmp	r2, r3
 800d666:	f080 80d3 	bcs.w	800d810 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	2b03      	cmp	r3, #3
 800d670:	f000 8096 	beq.w	800d7a0 <put_fat+0x15a>
 800d674:	2b03      	cmp	r3, #3
 800d676:	f300 80cb 	bgt.w	800d810 <put_fat+0x1ca>
 800d67a:	2b01      	cmp	r3, #1
 800d67c:	d002      	beq.n	800d684 <put_fat+0x3e>
 800d67e:	2b02      	cmp	r3, #2
 800d680:	d06e      	beq.n	800d760 <put_fat+0x11a>
 800d682:	e0c5      	b.n	800d810 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	61bb      	str	r3, [r7, #24]
 800d688:	69bb      	ldr	r3, [r7, #24]
 800d68a:	085b      	lsrs	r3, r3, #1
 800d68c:	69ba      	ldr	r2, [r7, #24]
 800d68e:	4413      	add	r3, r2
 800d690:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d696:	69bb      	ldr	r3, [r7, #24]
 800d698:	0a5b      	lsrs	r3, r3, #9
 800d69a:	4413      	add	r3, r2
 800d69c:	4619      	mov	r1, r3
 800d69e:	68f8      	ldr	r0, [r7, #12]
 800d6a0:	f7ff fe6e 	bl	800d380 <move_window>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d6a8:	7ffb      	ldrb	r3, [r7, #31]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	f040 80a9 	bne.w	800d802 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d6b6:	69bb      	ldr	r3, [r7, #24]
 800d6b8:	1c59      	adds	r1, r3, #1
 800d6ba:	61b9      	str	r1, [r7, #24]
 800d6bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6c0:	4413      	add	r3, r2
 800d6c2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	f003 0301 	and.w	r3, r3, #1
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d00d      	beq.n	800d6ea <put_fat+0xa4>
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	781b      	ldrb	r3, [r3, #0]
 800d6d2:	b25b      	sxtb	r3, r3
 800d6d4:	f003 030f 	and.w	r3, r3, #15
 800d6d8:	b25a      	sxtb	r2, r3
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	b2db      	uxtb	r3, r3
 800d6de:	011b      	lsls	r3, r3, #4
 800d6e0:	b25b      	sxtb	r3, r3
 800d6e2:	4313      	orrs	r3, r2
 800d6e4:	b25b      	sxtb	r3, r3
 800d6e6:	b2db      	uxtb	r3, r3
 800d6e8:	e001      	b.n	800d6ee <put_fat+0xa8>
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	b2db      	uxtb	r3, r3
 800d6ee:	697a      	ldr	r2, [r7, #20]
 800d6f0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d6fc:	69bb      	ldr	r3, [r7, #24]
 800d6fe:	0a5b      	lsrs	r3, r3, #9
 800d700:	4413      	add	r3, r2
 800d702:	4619      	mov	r1, r3
 800d704:	68f8      	ldr	r0, [r7, #12]
 800d706:	f7ff fe3b 	bl	800d380 <move_window>
 800d70a:	4603      	mov	r3, r0
 800d70c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d70e:	7ffb      	ldrb	r3, [r7, #31]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d178      	bne.n	800d806 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d71a:	69bb      	ldr	r3, [r7, #24]
 800d71c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d720:	4413      	add	r3, r2
 800d722:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	f003 0301 	and.w	r3, r3, #1
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d003      	beq.n	800d736 <put_fat+0xf0>
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	091b      	lsrs	r3, r3, #4
 800d732:	b2db      	uxtb	r3, r3
 800d734:	e00e      	b.n	800d754 <put_fat+0x10e>
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	781b      	ldrb	r3, [r3, #0]
 800d73a:	b25b      	sxtb	r3, r3
 800d73c:	f023 030f 	bic.w	r3, r3, #15
 800d740:	b25a      	sxtb	r2, r3
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	0a1b      	lsrs	r3, r3, #8
 800d746:	b25b      	sxtb	r3, r3
 800d748:	f003 030f 	and.w	r3, r3, #15
 800d74c:	b25b      	sxtb	r3, r3
 800d74e:	4313      	orrs	r3, r2
 800d750:	b25b      	sxtb	r3, r3
 800d752:	b2db      	uxtb	r3, r3
 800d754:	697a      	ldr	r2, [r7, #20]
 800d756:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	2201      	movs	r2, #1
 800d75c:	70da      	strb	r2, [r3, #3]
			break;
 800d75e:	e057      	b.n	800d810 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	0a1b      	lsrs	r3, r3, #8
 800d768:	4413      	add	r3, r2
 800d76a:	4619      	mov	r1, r3
 800d76c:	68f8      	ldr	r0, [r7, #12]
 800d76e:	f7ff fe07 	bl	800d380 <move_window>
 800d772:	4603      	mov	r3, r0
 800d774:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d776:	7ffb      	ldrb	r3, [r7, #31]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d146      	bne.n	800d80a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	005b      	lsls	r3, r3, #1
 800d786:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d78a:	4413      	add	r3, r2
 800d78c:	687a      	ldr	r2, [r7, #4]
 800d78e:	b292      	uxth	r2, r2
 800d790:	4611      	mov	r1, r2
 800d792:	4618      	mov	r0, r3
 800d794:	f7ff fb7f 	bl	800ce96 <st_word>
			fs->wflag = 1;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	2201      	movs	r2, #1
 800d79c:	70da      	strb	r2, [r3, #3]
			break;
 800d79e:	e037      	b.n	800d810 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	09db      	lsrs	r3, r3, #7
 800d7a8:	4413      	add	r3, r2
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	68f8      	ldr	r0, [r7, #12]
 800d7ae:	f7ff fde7 	bl	800d380 <move_window>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d7b6:	7ffb      	ldrb	r3, [r7, #31]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d128      	bne.n	800d80e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	009b      	lsls	r3, r3, #2
 800d7cc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d7d0:	4413      	add	r3, r2
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7ff fb3c 	bl	800ce50 <ld_dword>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d7de:	4323      	orrs	r3, r4
 800d7e0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	009b      	lsls	r3, r3, #2
 800d7ec:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d7f0:	4413      	add	r3, r2
 800d7f2:	6879      	ldr	r1, [r7, #4]
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f7ff fb69 	bl	800cecc <st_dword>
			fs->wflag = 1;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	2201      	movs	r2, #1
 800d7fe:	70da      	strb	r2, [r3, #3]
			break;
 800d800:	e006      	b.n	800d810 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d802:	bf00      	nop
 800d804:	e004      	b.n	800d810 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d806:	bf00      	nop
 800d808:	e002      	b.n	800d810 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d80a:	bf00      	nop
 800d80c:	e000      	b.n	800d810 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d80e:	bf00      	nop
		}
	}
	return res;
 800d810:	7ffb      	ldrb	r3, [r7, #31]
}
 800d812:	4618      	mov	r0, r3
 800d814:	3724      	adds	r7, #36	; 0x24
 800d816:	46bd      	mov	sp, r7
 800d818:	bd90      	pop	{r4, r7, pc}

0800d81a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d81a:	b580      	push	{r7, lr}
 800d81c:	b088      	sub	sp, #32
 800d81e:	af00      	add	r7, sp, #0
 800d820:	60f8      	str	r0, [r7, #12]
 800d822:	60b9      	str	r1, [r7, #8]
 800d824:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d826:	2300      	movs	r3, #0
 800d828:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d830:	68bb      	ldr	r3, [r7, #8]
 800d832:	2b01      	cmp	r3, #1
 800d834:	d904      	bls.n	800d840 <remove_chain+0x26>
 800d836:	69bb      	ldr	r3, [r7, #24]
 800d838:	699b      	ldr	r3, [r3, #24]
 800d83a:	68ba      	ldr	r2, [r7, #8]
 800d83c:	429a      	cmp	r2, r3
 800d83e:	d301      	bcc.n	800d844 <remove_chain+0x2a>
 800d840:	2302      	movs	r3, #2
 800d842:	e04b      	b.n	800d8dc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d00c      	beq.n	800d864 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d84a:	f04f 32ff 	mov.w	r2, #4294967295
 800d84e:	6879      	ldr	r1, [r7, #4]
 800d850:	69b8      	ldr	r0, [r7, #24]
 800d852:	f7ff fef8 	bl	800d646 <put_fat>
 800d856:	4603      	mov	r3, r0
 800d858:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d85a:	7ffb      	ldrb	r3, [r7, #31]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d001      	beq.n	800d864 <remove_chain+0x4a>
 800d860:	7ffb      	ldrb	r3, [r7, #31]
 800d862:	e03b      	b.n	800d8dc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d864:	68b9      	ldr	r1, [r7, #8]
 800d866:	68f8      	ldr	r0, [r7, #12]
 800d868:	f7ff fe45 	bl	800d4f6 <get_fat>
 800d86c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d031      	beq.n	800d8d8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	2b01      	cmp	r3, #1
 800d878:	d101      	bne.n	800d87e <remove_chain+0x64>
 800d87a:	2302      	movs	r3, #2
 800d87c:	e02e      	b.n	800d8dc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d884:	d101      	bne.n	800d88a <remove_chain+0x70>
 800d886:	2301      	movs	r3, #1
 800d888:	e028      	b.n	800d8dc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d88a:	2200      	movs	r2, #0
 800d88c:	68b9      	ldr	r1, [r7, #8]
 800d88e:	69b8      	ldr	r0, [r7, #24]
 800d890:	f7ff fed9 	bl	800d646 <put_fat>
 800d894:	4603      	mov	r3, r0
 800d896:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d898:	7ffb      	ldrb	r3, [r7, #31]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d001      	beq.n	800d8a2 <remove_chain+0x88>
 800d89e:	7ffb      	ldrb	r3, [r7, #31]
 800d8a0:	e01c      	b.n	800d8dc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d8a2:	69bb      	ldr	r3, [r7, #24]
 800d8a4:	695a      	ldr	r2, [r3, #20]
 800d8a6:	69bb      	ldr	r3, [r7, #24]
 800d8a8:	699b      	ldr	r3, [r3, #24]
 800d8aa:	3b02      	subs	r3, #2
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d20b      	bcs.n	800d8c8 <remove_chain+0xae>
			fs->free_clst++;
 800d8b0:	69bb      	ldr	r3, [r7, #24]
 800d8b2:	695b      	ldr	r3, [r3, #20]
 800d8b4:	1c5a      	adds	r2, r3, #1
 800d8b6:	69bb      	ldr	r3, [r7, #24]
 800d8b8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d8ba:	69bb      	ldr	r3, [r7, #24]
 800d8bc:	791b      	ldrb	r3, [r3, #4]
 800d8be:	f043 0301 	orr.w	r3, r3, #1
 800d8c2:	b2da      	uxtb	r2, r3
 800d8c4:	69bb      	ldr	r3, [r7, #24]
 800d8c6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d8cc:	69bb      	ldr	r3, [r7, #24]
 800d8ce:	699b      	ldr	r3, [r3, #24]
 800d8d0:	68ba      	ldr	r2, [r7, #8]
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	d3c6      	bcc.n	800d864 <remove_chain+0x4a>
 800d8d6:	e000      	b.n	800d8da <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d8d8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d8da:	2300      	movs	r3, #0
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3720      	adds	r7, #32
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}

0800d8e4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b088      	sub	sp, #32
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d10d      	bne.n	800d916 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	691b      	ldr	r3, [r3, #16]
 800d8fe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d900:	69bb      	ldr	r3, [r7, #24]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d004      	beq.n	800d910 <create_chain+0x2c>
 800d906:	693b      	ldr	r3, [r7, #16]
 800d908:	699b      	ldr	r3, [r3, #24]
 800d90a:	69ba      	ldr	r2, [r7, #24]
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d31b      	bcc.n	800d948 <create_chain+0x64>
 800d910:	2301      	movs	r3, #1
 800d912:	61bb      	str	r3, [r7, #24]
 800d914:	e018      	b.n	800d948 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d916:	6839      	ldr	r1, [r7, #0]
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f7ff fdec 	bl	800d4f6 <get_fat>
 800d91e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	2b01      	cmp	r3, #1
 800d924:	d801      	bhi.n	800d92a <create_chain+0x46>
 800d926:	2301      	movs	r3, #1
 800d928:	e070      	b.n	800da0c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d930:	d101      	bne.n	800d936 <create_chain+0x52>
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	e06a      	b.n	800da0c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	699b      	ldr	r3, [r3, #24]
 800d93a:	68fa      	ldr	r2, [r7, #12]
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d201      	bcs.n	800d944 <create_chain+0x60>
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	e063      	b.n	800da0c <create_chain+0x128>
		scl = clst;
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d948:	69bb      	ldr	r3, [r7, #24]
 800d94a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d94c:	69fb      	ldr	r3, [r7, #28]
 800d94e:	3301      	adds	r3, #1
 800d950:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	699b      	ldr	r3, [r3, #24]
 800d956:	69fa      	ldr	r2, [r7, #28]
 800d958:	429a      	cmp	r2, r3
 800d95a:	d307      	bcc.n	800d96c <create_chain+0x88>
				ncl = 2;
 800d95c:	2302      	movs	r3, #2
 800d95e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d960:	69fa      	ldr	r2, [r7, #28]
 800d962:	69bb      	ldr	r3, [r7, #24]
 800d964:	429a      	cmp	r2, r3
 800d966:	d901      	bls.n	800d96c <create_chain+0x88>
 800d968:	2300      	movs	r3, #0
 800d96a:	e04f      	b.n	800da0c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d96c:	69f9      	ldr	r1, [r7, #28]
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f7ff fdc1 	bl	800d4f6 <get_fat>
 800d974:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d00e      	beq.n	800d99a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	2b01      	cmp	r3, #1
 800d980:	d003      	beq.n	800d98a <create_chain+0xa6>
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d988:	d101      	bne.n	800d98e <create_chain+0xaa>
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	e03e      	b.n	800da0c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d98e:	69fa      	ldr	r2, [r7, #28]
 800d990:	69bb      	ldr	r3, [r7, #24]
 800d992:	429a      	cmp	r2, r3
 800d994:	d1da      	bne.n	800d94c <create_chain+0x68>
 800d996:	2300      	movs	r3, #0
 800d998:	e038      	b.n	800da0c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d99a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d99c:	f04f 32ff 	mov.w	r2, #4294967295
 800d9a0:	69f9      	ldr	r1, [r7, #28]
 800d9a2:	6938      	ldr	r0, [r7, #16]
 800d9a4:	f7ff fe4f 	bl	800d646 <put_fat>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d9ac:	7dfb      	ldrb	r3, [r7, #23]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d109      	bne.n	800d9c6 <create_chain+0xe2>
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d006      	beq.n	800d9c6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d9b8:	69fa      	ldr	r2, [r7, #28]
 800d9ba:	6839      	ldr	r1, [r7, #0]
 800d9bc:	6938      	ldr	r0, [r7, #16]
 800d9be:	f7ff fe42 	bl	800d646 <put_fat>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d9c6:	7dfb      	ldrb	r3, [r7, #23]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d116      	bne.n	800d9fa <create_chain+0x116>
		fs->last_clst = ncl;
 800d9cc:	693b      	ldr	r3, [r7, #16]
 800d9ce:	69fa      	ldr	r2, [r7, #28]
 800d9d0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	695a      	ldr	r2, [r3, #20]
 800d9d6:	693b      	ldr	r3, [r7, #16]
 800d9d8:	699b      	ldr	r3, [r3, #24]
 800d9da:	3b02      	subs	r3, #2
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d804      	bhi.n	800d9ea <create_chain+0x106>
 800d9e0:	693b      	ldr	r3, [r7, #16]
 800d9e2:	695b      	ldr	r3, [r3, #20]
 800d9e4:	1e5a      	subs	r2, r3, #1
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d9ea:	693b      	ldr	r3, [r7, #16]
 800d9ec:	791b      	ldrb	r3, [r3, #4]
 800d9ee:	f043 0301 	orr.w	r3, r3, #1
 800d9f2:	b2da      	uxtb	r2, r3
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	711a      	strb	r2, [r3, #4]
 800d9f8:	e007      	b.n	800da0a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d9fa:	7dfb      	ldrb	r3, [r7, #23]
 800d9fc:	2b01      	cmp	r3, #1
 800d9fe:	d102      	bne.n	800da06 <create_chain+0x122>
 800da00:	f04f 33ff 	mov.w	r3, #4294967295
 800da04:	e000      	b.n	800da08 <create_chain+0x124>
 800da06:	2301      	movs	r3, #1
 800da08:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800da0a:	69fb      	ldr	r3, [r7, #28]
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3720      	adds	r7, #32
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}

0800da14 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800da14:	b480      	push	{r7}
 800da16:	b087      	sub	sp, #28
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
 800da1c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da28:	3304      	adds	r3, #4
 800da2a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	0a5b      	lsrs	r3, r3, #9
 800da30:	68fa      	ldr	r2, [r7, #12]
 800da32:	8952      	ldrh	r2, [r2, #10]
 800da34:	fbb3 f3f2 	udiv	r3, r3, r2
 800da38:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	1d1a      	adds	r2, r3, #4
 800da3e:	613a      	str	r2, [r7, #16]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d101      	bne.n	800da4e <clmt_clust+0x3a>
 800da4a:	2300      	movs	r3, #0
 800da4c:	e010      	b.n	800da70 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800da4e:	697a      	ldr	r2, [r7, #20]
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	429a      	cmp	r2, r3
 800da54:	d307      	bcc.n	800da66 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800da56:	697a      	ldr	r2, [r7, #20]
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	1ad3      	subs	r3, r2, r3
 800da5c:	617b      	str	r3, [r7, #20]
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	3304      	adds	r3, #4
 800da62:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800da64:	e7e9      	b.n	800da3a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800da66:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	681a      	ldr	r2, [r3, #0]
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	4413      	add	r3, r2
}
 800da70:	4618      	mov	r0, r3
 800da72:	371c      	adds	r7, #28
 800da74:	46bd      	mov	sp, r7
 800da76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7a:	4770      	bx	lr

0800da7c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b086      	sub	sp, #24
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800da92:	d204      	bcs.n	800da9e <dir_sdi+0x22>
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	f003 031f 	and.w	r3, r3, #31
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d001      	beq.n	800daa2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800da9e:	2302      	movs	r3, #2
 800daa0:	e063      	b.n	800db6a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	683a      	ldr	r2, [r7, #0]
 800daa6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	689b      	ldr	r3, [r3, #8]
 800daac:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d106      	bne.n	800dac2 <dir_sdi+0x46>
 800dab4:	693b      	ldr	r3, [r7, #16]
 800dab6:	781b      	ldrb	r3, [r3, #0]
 800dab8:	2b02      	cmp	r3, #2
 800daba:	d902      	bls.n	800dac2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dac0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d10c      	bne.n	800dae2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	095b      	lsrs	r3, r3, #5
 800dacc:	693a      	ldr	r2, [r7, #16]
 800dace:	8912      	ldrh	r2, [r2, #8]
 800dad0:	4293      	cmp	r3, r2
 800dad2:	d301      	bcc.n	800dad8 <dir_sdi+0x5c>
 800dad4:	2302      	movs	r3, #2
 800dad6:	e048      	b.n	800db6a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800dad8:	693b      	ldr	r3, [r7, #16]
 800dada:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	61da      	str	r2, [r3, #28]
 800dae0:	e029      	b.n	800db36 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	895b      	ldrh	r3, [r3, #10]
 800dae6:	025b      	lsls	r3, r3, #9
 800dae8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800daea:	e019      	b.n	800db20 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	6979      	ldr	r1, [r7, #20]
 800daf0:	4618      	mov	r0, r3
 800daf2:	f7ff fd00 	bl	800d4f6 <get_fat>
 800daf6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dafe:	d101      	bne.n	800db04 <dir_sdi+0x88>
 800db00:	2301      	movs	r3, #1
 800db02:	e032      	b.n	800db6a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	2b01      	cmp	r3, #1
 800db08:	d904      	bls.n	800db14 <dir_sdi+0x98>
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	699b      	ldr	r3, [r3, #24]
 800db0e:	697a      	ldr	r2, [r7, #20]
 800db10:	429a      	cmp	r2, r3
 800db12:	d301      	bcc.n	800db18 <dir_sdi+0x9c>
 800db14:	2302      	movs	r3, #2
 800db16:	e028      	b.n	800db6a <dir_sdi+0xee>
			ofs -= csz;
 800db18:	683a      	ldr	r2, [r7, #0]
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	1ad3      	subs	r3, r2, r3
 800db1e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800db20:	683a      	ldr	r2, [r7, #0]
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	429a      	cmp	r2, r3
 800db26:	d2e1      	bcs.n	800daec <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800db28:	6979      	ldr	r1, [r7, #20]
 800db2a:	6938      	ldr	r0, [r7, #16]
 800db2c:	f7ff fcc4 	bl	800d4b8 <clust2sect>
 800db30:	4602      	mov	r2, r0
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	697a      	ldr	r2, [r7, #20]
 800db3a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	69db      	ldr	r3, [r3, #28]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d101      	bne.n	800db48 <dir_sdi+0xcc>
 800db44:	2302      	movs	r3, #2
 800db46:	e010      	b.n	800db6a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	69da      	ldr	r2, [r3, #28]
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	0a5b      	lsrs	r3, r3, #9
 800db50:	441a      	add	r2, r3
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db62:	441a      	add	r2, r3
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800db68:	2300      	movs	r3, #0
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	3718      	adds	r7, #24
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}

0800db72 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800db72:	b580      	push	{r7, lr}
 800db74:	b086      	sub	sp, #24
 800db76:	af00      	add	r7, sp, #0
 800db78:	6078      	str	r0, [r7, #4]
 800db7a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	695b      	ldr	r3, [r3, #20]
 800db86:	3320      	adds	r3, #32
 800db88:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	69db      	ldr	r3, [r3, #28]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d003      	beq.n	800db9a <dir_next+0x28>
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800db98:	d301      	bcc.n	800db9e <dir_next+0x2c>
 800db9a:	2304      	movs	r3, #4
 800db9c:	e0aa      	b.n	800dcf4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	f040 8098 	bne.w	800dcda <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	69db      	ldr	r3, [r3, #28]
 800dbae:	1c5a      	adds	r2, r3, #1
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	699b      	ldr	r3, [r3, #24]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d10b      	bne.n	800dbd4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	095b      	lsrs	r3, r3, #5
 800dbc0:	68fa      	ldr	r2, [r7, #12]
 800dbc2:	8912      	ldrh	r2, [r2, #8]
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	f0c0 8088 	bcc.w	800dcda <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	61da      	str	r2, [r3, #28]
 800dbd0:	2304      	movs	r3, #4
 800dbd2:	e08f      	b.n	800dcf4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	0a5b      	lsrs	r3, r3, #9
 800dbd8:	68fa      	ldr	r2, [r7, #12]
 800dbda:	8952      	ldrh	r2, [r2, #10]
 800dbdc:	3a01      	subs	r2, #1
 800dbde:	4013      	ands	r3, r2
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d17a      	bne.n	800dcda <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800dbe4:	687a      	ldr	r2, [r7, #4]
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	699b      	ldr	r3, [r3, #24]
 800dbea:	4619      	mov	r1, r3
 800dbec:	4610      	mov	r0, r2
 800dbee:	f7ff fc82 	bl	800d4f6 <get_fat>
 800dbf2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	2b01      	cmp	r3, #1
 800dbf8:	d801      	bhi.n	800dbfe <dir_next+0x8c>
 800dbfa:	2302      	movs	r3, #2
 800dbfc:	e07a      	b.n	800dcf4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc04:	d101      	bne.n	800dc0a <dir_next+0x98>
 800dc06:	2301      	movs	r3, #1
 800dc08:	e074      	b.n	800dcf4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	699b      	ldr	r3, [r3, #24]
 800dc0e:	697a      	ldr	r2, [r7, #20]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d358      	bcc.n	800dcc6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d104      	bne.n	800dc24 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	61da      	str	r2, [r3, #28]
 800dc20:	2304      	movs	r3, #4
 800dc22:	e067      	b.n	800dcf4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800dc24:	687a      	ldr	r2, [r7, #4]
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	699b      	ldr	r3, [r3, #24]
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	4610      	mov	r0, r2
 800dc2e:	f7ff fe59 	bl	800d8e4 <create_chain>
 800dc32:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d101      	bne.n	800dc3e <dir_next+0xcc>
 800dc3a:	2307      	movs	r3, #7
 800dc3c:	e05a      	b.n	800dcf4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	2b01      	cmp	r3, #1
 800dc42:	d101      	bne.n	800dc48 <dir_next+0xd6>
 800dc44:	2302      	movs	r3, #2
 800dc46:	e055      	b.n	800dcf4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc4e:	d101      	bne.n	800dc54 <dir_next+0xe2>
 800dc50:	2301      	movs	r3, #1
 800dc52:	e04f      	b.n	800dcf4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800dc54:	68f8      	ldr	r0, [r7, #12]
 800dc56:	f7ff fb4f 	bl	800d2f8 <sync_window>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d001      	beq.n	800dc64 <dir_next+0xf2>
 800dc60:	2301      	movs	r3, #1
 800dc62:	e047      	b.n	800dcf4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	3334      	adds	r3, #52	; 0x34
 800dc68:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dc6c:	2100      	movs	r1, #0
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7ff f979 	bl	800cf66 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dc74:	2300      	movs	r3, #0
 800dc76:	613b      	str	r3, [r7, #16]
 800dc78:	6979      	ldr	r1, [r7, #20]
 800dc7a:	68f8      	ldr	r0, [r7, #12]
 800dc7c:	f7ff fc1c 	bl	800d4b8 <clust2sect>
 800dc80:	4602      	mov	r2, r0
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	631a      	str	r2, [r3, #48]	; 0x30
 800dc86:	e012      	b.n	800dcae <dir_next+0x13c>
						fs->wflag = 1;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	2201      	movs	r2, #1
 800dc8c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800dc8e:	68f8      	ldr	r0, [r7, #12]
 800dc90:	f7ff fb32 	bl	800d2f8 <sync_window>
 800dc94:	4603      	mov	r3, r0
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d001      	beq.n	800dc9e <dir_next+0x12c>
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	e02a      	b.n	800dcf4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	3301      	adds	r3, #1
 800dca2:	613b      	str	r3, [r7, #16]
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dca8:	1c5a      	adds	r2, r3, #1
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	631a      	str	r2, [r3, #48]	; 0x30
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	895b      	ldrh	r3, [r3, #10]
 800dcb2:	461a      	mov	r2, r3
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d3e6      	bcc.n	800dc88 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	1ad2      	subs	r2, r2, r3
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	697a      	ldr	r2, [r7, #20]
 800dcca:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800dccc:	6979      	ldr	r1, [r7, #20]
 800dcce:	68f8      	ldr	r0, [r7, #12]
 800dcd0:	f7ff fbf2 	bl	800d4b8 <clust2sect>
 800dcd4:	4602      	mov	r2, r0
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	68ba      	ldr	r2, [r7, #8]
 800dcde:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcec:	441a      	add	r2, r3
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dcf2:	2300      	movs	r3, #0
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3718      	adds	r7, #24
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}

0800dcfc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b086      	sub	sp, #24
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800dd0c:	2100      	movs	r1, #0
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f7ff feb4 	bl	800da7c <dir_sdi>
 800dd14:	4603      	mov	r3, r0
 800dd16:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dd18:	7dfb      	ldrb	r3, [r7, #23]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d12b      	bne.n	800dd76 <dir_alloc+0x7a>
		n = 0;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	69db      	ldr	r3, [r3, #28]
 800dd26:	4619      	mov	r1, r3
 800dd28:	68f8      	ldr	r0, [r7, #12]
 800dd2a:	f7ff fb29 	bl	800d380 <move_window>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dd32:	7dfb      	ldrb	r3, [r7, #23]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d11d      	bne.n	800dd74 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6a1b      	ldr	r3, [r3, #32]
 800dd3c:	781b      	ldrb	r3, [r3, #0]
 800dd3e:	2be5      	cmp	r3, #229	; 0xe5
 800dd40:	d004      	beq.n	800dd4c <dir_alloc+0x50>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6a1b      	ldr	r3, [r3, #32]
 800dd46:	781b      	ldrb	r3, [r3, #0]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d107      	bne.n	800dd5c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	3301      	adds	r3, #1
 800dd50:	613b      	str	r3, [r7, #16]
 800dd52:	693a      	ldr	r2, [r7, #16]
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d102      	bne.n	800dd60 <dir_alloc+0x64>
 800dd5a:	e00c      	b.n	800dd76 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dd60:	2101      	movs	r1, #1
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f7ff ff05 	bl	800db72 <dir_next>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dd6c:	7dfb      	ldrb	r3, [r7, #23]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d0d7      	beq.n	800dd22 <dir_alloc+0x26>
 800dd72:	e000      	b.n	800dd76 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800dd74:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dd76:	7dfb      	ldrb	r3, [r7, #23]
 800dd78:	2b04      	cmp	r3, #4
 800dd7a:	d101      	bne.n	800dd80 <dir_alloc+0x84>
 800dd7c:	2307      	movs	r3, #7
 800dd7e:	75fb      	strb	r3, [r7, #23]
	return res;
 800dd80:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	3718      	adds	r7, #24
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}

0800dd8a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800dd8a:	b580      	push	{r7, lr}
 800dd8c:	b084      	sub	sp, #16
 800dd8e:	af00      	add	r7, sp, #0
 800dd90:	6078      	str	r0, [r7, #4]
 800dd92:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	331a      	adds	r3, #26
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f7ff f841 	bl	800ce20 <ld_word>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	781b      	ldrb	r3, [r3, #0]
 800dda6:	2b03      	cmp	r3, #3
 800dda8:	d109      	bne.n	800ddbe <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	3314      	adds	r3, #20
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7ff f836 	bl	800ce20 <ld_word>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	041b      	lsls	r3, r3, #16
 800ddb8:	68fa      	ldr	r2, [r7, #12]
 800ddba:	4313      	orrs	r3, r2
 800ddbc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3710      	adds	r7, #16
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b084      	sub	sp, #16
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	60f8      	str	r0, [r7, #12]
 800ddd0:	60b9      	str	r1, [r7, #8]
 800ddd2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	331a      	adds	r3, #26
 800ddd8:	687a      	ldr	r2, [r7, #4]
 800ddda:	b292      	uxth	r2, r2
 800dddc:	4611      	mov	r1, r2
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7ff f859 	bl	800ce96 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	781b      	ldrb	r3, [r3, #0]
 800dde8:	2b03      	cmp	r3, #3
 800ddea:	d109      	bne.n	800de00 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	f103 0214 	add.w	r2, r3, #20
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	0c1b      	lsrs	r3, r3, #16
 800ddf6:	b29b      	uxth	r3, r3
 800ddf8:	4619      	mov	r1, r3
 800ddfa:	4610      	mov	r0, r2
 800ddfc:	f7ff f84b 	bl	800ce96 <st_word>
	}
}
 800de00:	bf00      	nop
 800de02:	3710      	adds	r7, #16
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}

0800de08 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800de08:	b590      	push	{r4, r7, lr}
 800de0a:	b087      	sub	sp, #28
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	331a      	adds	r3, #26
 800de16:	4618      	mov	r0, r3
 800de18:	f7ff f802 	bl	800ce20 <ld_word>
 800de1c:	4603      	mov	r3, r0
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d001      	beq.n	800de26 <cmp_lfn+0x1e>
 800de22:	2300      	movs	r3, #0
 800de24:	e059      	b.n	800deda <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	781b      	ldrb	r3, [r3, #0]
 800de2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de2e:	1e5a      	subs	r2, r3, #1
 800de30:	4613      	mov	r3, r2
 800de32:	005b      	lsls	r3, r3, #1
 800de34:	4413      	add	r3, r2
 800de36:	009b      	lsls	r3, r3, #2
 800de38:	4413      	add	r3, r2
 800de3a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800de3c:	2301      	movs	r3, #1
 800de3e:	81fb      	strh	r3, [r7, #14]
 800de40:	2300      	movs	r3, #0
 800de42:	613b      	str	r3, [r7, #16]
 800de44:	e033      	b.n	800deae <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800de46:	4a27      	ldr	r2, [pc, #156]	; (800dee4 <cmp_lfn+0xdc>)
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	4413      	add	r3, r2
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	461a      	mov	r2, r3
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	4413      	add	r3, r2
 800de54:	4618      	mov	r0, r3
 800de56:	f7fe ffe3 	bl	800ce20 <ld_word>
 800de5a:	4603      	mov	r3, r0
 800de5c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800de5e:	89fb      	ldrh	r3, [r7, #14]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d01a      	beq.n	800de9a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	2bfe      	cmp	r3, #254	; 0xfe
 800de68:	d812      	bhi.n	800de90 <cmp_lfn+0x88>
 800de6a:	89bb      	ldrh	r3, [r7, #12]
 800de6c:	4618      	mov	r0, r3
 800de6e:	f002 f99f 	bl	80101b0 <ff_wtoupper>
 800de72:	4603      	mov	r3, r0
 800de74:	461c      	mov	r4, r3
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	1c5a      	adds	r2, r3, #1
 800de7a:	617a      	str	r2, [r7, #20]
 800de7c:	005b      	lsls	r3, r3, #1
 800de7e:	687a      	ldr	r2, [r7, #4]
 800de80:	4413      	add	r3, r2
 800de82:	881b      	ldrh	r3, [r3, #0]
 800de84:	4618      	mov	r0, r3
 800de86:	f002 f993 	bl	80101b0 <ff_wtoupper>
 800de8a:	4603      	mov	r3, r0
 800de8c:	429c      	cmp	r4, r3
 800de8e:	d001      	beq.n	800de94 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800de90:	2300      	movs	r3, #0
 800de92:	e022      	b.n	800deda <cmp_lfn+0xd2>
			}
			wc = uc;
 800de94:	89bb      	ldrh	r3, [r7, #12]
 800de96:	81fb      	strh	r3, [r7, #14]
 800de98:	e006      	b.n	800dea8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800de9a:	89bb      	ldrh	r3, [r7, #12]
 800de9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dea0:	4293      	cmp	r3, r2
 800dea2:	d001      	beq.n	800dea8 <cmp_lfn+0xa0>
 800dea4:	2300      	movs	r3, #0
 800dea6:	e018      	b.n	800deda <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	3301      	adds	r3, #1
 800deac:	613b      	str	r3, [r7, #16]
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	2b0c      	cmp	r3, #12
 800deb2:	d9c8      	bls.n	800de46 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	781b      	ldrb	r3, [r3, #0]
 800deb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800debc:	2b00      	cmp	r3, #0
 800debe:	d00b      	beq.n	800ded8 <cmp_lfn+0xd0>
 800dec0:	89fb      	ldrh	r3, [r7, #14]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d008      	beq.n	800ded8 <cmp_lfn+0xd0>
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	005b      	lsls	r3, r3, #1
 800deca:	687a      	ldr	r2, [r7, #4]
 800decc:	4413      	add	r3, r2
 800dece:	881b      	ldrh	r3, [r3, #0]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d001      	beq.n	800ded8 <cmp_lfn+0xd0>
 800ded4:	2300      	movs	r3, #0
 800ded6:	e000      	b.n	800deda <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ded8:	2301      	movs	r3, #1
}
 800deda:	4618      	mov	r0, r3
 800dedc:	371c      	adds	r7, #28
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd90      	pop	{r4, r7, pc}
 800dee2:	bf00      	nop
 800dee4:	08010d58 	.word	0x08010d58

0800dee8 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b086      	sub	sp, #24
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	331a      	adds	r3, #26
 800def6:	4618      	mov	r0, r3
 800def8:	f7fe ff92 	bl	800ce20 <ld_word>
 800defc:	4603      	mov	r3, r0
 800defe:	2b00      	cmp	r3, #0
 800df00:	d001      	beq.n	800df06 <pick_lfn+0x1e>
 800df02:	2300      	movs	r3, #0
 800df04:	e04d      	b.n	800dfa2 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df0e:	1e5a      	subs	r2, r3, #1
 800df10:	4613      	mov	r3, r2
 800df12:	005b      	lsls	r3, r3, #1
 800df14:	4413      	add	r3, r2
 800df16:	009b      	lsls	r3, r3, #2
 800df18:	4413      	add	r3, r2
 800df1a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800df1c:	2301      	movs	r3, #1
 800df1e:	81fb      	strh	r3, [r7, #14]
 800df20:	2300      	movs	r3, #0
 800df22:	613b      	str	r3, [r7, #16]
 800df24:	e028      	b.n	800df78 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800df26:	4a21      	ldr	r2, [pc, #132]	; (800dfac <pick_lfn+0xc4>)
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	4413      	add	r3, r2
 800df2c:	781b      	ldrb	r3, [r3, #0]
 800df2e:	461a      	mov	r2, r3
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	4413      	add	r3, r2
 800df34:	4618      	mov	r0, r3
 800df36:	f7fe ff73 	bl	800ce20 <ld_word>
 800df3a:	4603      	mov	r3, r0
 800df3c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800df3e:	89fb      	ldrh	r3, [r7, #14]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d00f      	beq.n	800df64 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	2bfe      	cmp	r3, #254	; 0xfe
 800df48:	d901      	bls.n	800df4e <pick_lfn+0x66>
 800df4a:	2300      	movs	r3, #0
 800df4c:	e029      	b.n	800dfa2 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800df4e:	89bb      	ldrh	r3, [r7, #12]
 800df50:	81fb      	strh	r3, [r7, #14]
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	1c5a      	adds	r2, r3, #1
 800df56:	617a      	str	r2, [r7, #20]
 800df58:	005b      	lsls	r3, r3, #1
 800df5a:	687a      	ldr	r2, [r7, #4]
 800df5c:	4413      	add	r3, r2
 800df5e:	89fa      	ldrh	r2, [r7, #14]
 800df60:	801a      	strh	r2, [r3, #0]
 800df62:	e006      	b.n	800df72 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800df64:	89bb      	ldrh	r3, [r7, #12]
 800df66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df6a:	4293      	cmp	r3, r2
 800df6c:	d001      	beq.n	800df72 <pick_lfn+0x8a>
 800df6e:	2300      	movs	r3, #0
 800df70:	e017      	b.n	800dfa2 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	3301      	adds	r3, #1
 800df76:	613b      	str	r3, [r7, #16]
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	2b0c      	cmp	r3, #12
 800df7c:	d9d3      	bls.n	800df26 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	781b      	ldrb	r3, [r3, #0]
 800df82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df86:	2b00      	cmp	r3, #0
 800df88:	d00a      	beq.n	800dfa0 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	2bfe      	cmp	r3, #254	; 0xfe
 800df8e:	d901      	bls.n	800df94 <pick_lfn+0xac>
 800df90:	2300      	movs	r3, #0
 800df92:	e006      	b.n	800dfa2 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800df94:	697b      	ldr	r3, [r7, #20]
 800df96:	005b      	lsls	r3, r3, #1
 800df98:	687a      	ldr	r2, [r7, #4]
 800df9a:	4413      	add	r3, r2
 800df9c:	2200      	movs	r2, #0
 800df9e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800dfa0:	2301      	movs	r3, #1
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3718      	adds	r7, #24
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}
 800dfaa:	bf00      	nop
 800dfac:	08010d58 	.word	0x08010d58

0800dfb0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b088      	sub	sp, #32
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	60f8      	str	r0, [r7, #12]
 800dfb8:	60b9      	str	r1, [r7, #8]
 800dfba:	4611      	mov	r1, r2
 800dfbc:	461a      	mov	r2, r3
 800dfbe:	460b      	mov	r3, r1
 800dfc0:	71fb      	strb	r3, [r7, #7]
 800dfc2:	4613      	mov	r3, r2
 800dfc4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	330d      	adds	r3, #13
 800dfca:	79ba      	ldrb	r2, [r7, #6]
 800dfcc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	330b      	adds	r3, #11
 800dfd2:	220f      	movs	r2, #15
 800dfd4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	330c      	adds	r3, #12
 800dfda:	2200      	movs	r2, #0
 800dfdc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	331a      	adds	r3, #26
 800dfe2:	2100      	movs	r1, #0
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f7fe ff56 	bl	800ce96 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800dfea:	79fb      	ldrb	r3, [r7, #7]
 800dfec:	1e5a      	subs	r2, r3, #1
 800dfee:	4613      	mov	r3, r2
 800dff0:	005b      	lsls	r3, r3, #1
 800dff2:	4413      	add	r3, r2
 800dff4:	009b      	lsls	r3, r3, #2
 800dff6:	4413      	add	r3, r2
 800dff8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800dffa:	2300      	movs	r3, #0
 800dffc:	82fb      	strh	r3, [r7, #22]
 800dffe:	2300      	movs	r3, #0
 800e000:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e002:	8afb      	ldrh	r3, [r7, #22]
 800e004:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e008:	4293      	cmp	r3, r2
 800e00a:	d007      	beq.n	800e01c <put_lfn+0x6c>
 800e00c:	69fb      	ldr	r3, [r7, #28]
 800e00e:	1c5a      	adds	r2, r3, #1
 800e010:	61fa      	str	r2, [r7, #28]
 800e012:	005b      	lsls	r3, r3, #1
 800e014:	68fa      	ldr	r2, [r7, #12]
 800e016:	4413      	add	r3, r2
 800e018:	881b      	ldrh	r3, [r3, #0]
 800e01a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e01c:	4a17      	ldr	r2, [pc, #92]	; (800e07c <put_lfn+0xcc>)
 800e01e:	69bb      	ldr	r3, [r7, #24]
 800e020:	4413      	add	r3, r2
 800e022:	781b      	ldrb	r3, [r3, #0]
 800e024:	461a      	mov	r2, r3
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	4413      	add	r3, r2
 800e02a:	8afa      	ldrh	r2, [r7, #22]
 800e02c:	4611      	mov	r1, r2
 800e02e:	4618      	mov	r0, r3
 800e030:	f7fe ff31 	bl	800ce96 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e034:	8afb      	ldrh	r3, [r7, #22]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d102      	bne.n	800e040 <put_lfn+0x90>
 800e03a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e03e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e040:	69bb      	ldr	r3, [r7, #24]
 800e042:	3301      	adds	r3, #1
 800e044:	61bb      	str	r3, [r7, #24]
 800e046:	69bb      	ldr	r3, [r7, #24]
 800e048:	2b0c      	cmp	r3, #12
 800e04a:	d9da      	bls.n	800e002 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e04c:	8afb      	ldrh	r3, [r7, #22]
 800e04e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e052:	4293      	cmp	r3, r2
 800e054:	d006      	beq.n	800e064 <put_lfn+0xb4>
 800e056:	69fb      	ldr	r3, [r7, #28]
 800e058:	005b      	lsls	r3, r3, #1
 800e05a:	68fa      	ldr	r2, [r7, #12]
 800e05c:	4413      	add	r3, r2
 800e05e:	881b      	ldrh	r3, [r3, #0]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d103      	bne.n	800e06c <put_lfn+0xbc>
 800e064:	79fb      	ldrb	r3, [r7, #7]
 800e066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e06a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	79fa      	ldrb	r2, [r7, #7]
 800e070:	701a      	strb	r2, [r3, #0]
}
 800e072:	bf00      	nop
 800e074:	3720      	adds	r7, #32
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}
 800e07a:	bf00      	nop
 800e07c:	08010d58 	.word	0x08010d58

0800e080 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b08c      	sub	sp, #48	; 0x30
 800e084:	af00      	add	r7, sp, #0
 800e086:	60f8      	str	r0, [r7, #12]
 800e088:	60b9      	str	r1, [r7, #8]
 800e08a:	607a      	str	r2, [r7, #4]
 800e08c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e08e:	220b      	movs	r2, #11
 800e090:	68b9      	ldr	r1, [r7, #8]
 800e092:	68f8      	ldr	r0, [r7, #12]
 800e094:	f7fe ff46 	bl	800cf24 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	2b05      	cmp	r3, #5
 800e09c:	d929      	bls.n	800e0f2 <gen_numname+0x72>
		sr = seq;
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e0a2:	e020      	b.n	800e0e6 <gen_numname+0x66>
			wc = *lfn++;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	1c9a      	adds	r2, r3, #2
 800e0a8:	607a      	str	r2, [r7, #4]
 800e0aa:	881b      	ldrh	r3, [r3, #0]
 800e0ac:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e0b2:	e015      	b.n	800e0e0 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800e0b4:	69fb      	ldr	r3, [r7, #28]
 800e0b6:	005a      	lsls	r2, r3, #1
 800e0b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e0ba:	f003 0301 	and.w	r3, r3, #1
 800e0be:	4413      	add	r3, r2
 800e0c0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e0c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e0c4:	085b      	lsrs	r3, r3, #1
 800e0c6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e0c8:	69fb      	ldr	r3, [r7, #28]
 800e0ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d003      	beq.n	800e0da <gen_numname+0x5a>
 800e0d2:	69fa      	ldr	r2, [r7, #28]
 800e0d4:	4b30      	ldr	r3, [pc, #192]	; (800e198 <gen_numname+0x118>)
 800e0d6:	4053      	eors	r3, r2
 800e0d8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0dc:	3301      	adds	r3, #1
 800e0de:	62bb      	str	r3, [r7, #40]	; 0x28
 800e0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e2:	2b0f      	cmp	r3, #15
 800e0e4:	d9e6      	bls.n	800e0b4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	881b      	ldrh	r3, [r3, #0]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d1da      	bne.n	800e0a4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e0ee:	69fb      	ldr	r3, [r7, #28]
 800e0f0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e0f2:	2307      	movs	r3, #7
 800e0f4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	b2db      	uxtb	r3, r3
 800e0fa:	f003 030f 	and.w	r3, r3, #15
 800e0fe:	b2db      	uxtb	r3, r3
 800e100:	3330      	adds	r3, #48	; 0x30
 800e102:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800e106:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e10a:	2b39      	cmp	r3, #57	; 0x39
 800e10c:	d904      	bls.n	800e118 <gen_numname+0x98>
 800e10e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e112:	3307      	adds	r3, #7
 800e114:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800e118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e11a:	1e5a      	subs	r2, r3, #1
 800e11c:	62ba      	str	r2, [r7, #40]	; 0x28
 800e11e:	3330      	adds	r3, #48	; 0x30
 800e120:	443b      	add	r3, r7
 800e122:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e126:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	091b      	lsrs	r3, r3, #4
 800e12e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d1df      	bne.n	800e0f6 <gen_numname+0x76>
	ns[i] = '~';
 800e136:	f107 0214 	add.w	r2, r7, #20
 800e13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e13c:	4413      	add	r3, r2
 800e13e:	227e      	movs	r2, #126	; 0x7e
 800e140:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e142:	2300      	movs	r3, #0
 800e144:	627b      	str	r3, [r7, #36]	; 0x24
 800e146:	e002      	b.n	800e14e <gen_numname+0xce>
 800e148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e14a:	3301      	adds	r3, #1
 800e14c:	627b      	str	r3, [r7, #36]	; 0x24
 800e14e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e152:	429a      	cmp	r2, r3
 800e154:	d205      	bcs.n	800e162 <gen_numname+0xe2>
 800e156:	68fa      	ldr	r2, [r7, #12]
 800e158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e15a:	4413      	add	r3, r2
 800e15c:	781b      	ldrb	r3, [r3, #0]
 800e15e:	2b20      	cmp	r3, #32
 800e160:	d1f2      	bne.n	800e148 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e164:	2b07      	cmp	r3, #7
 800e166:	d807      	bhi.n	800e178 <gen_numname+0xf8>
 800e168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e16a:	1c5a      	adds	r2, r3, #1
 800e16c:	62ba      	str	r2, [r7, #40]	; 0x28
 800e16e:	3330      	adds	r3, #48	; 0x30
 800e170:	443b      	add	r3, r7
 800e172:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e176:	e000      	b.n	800e17a <gen_numname+0xfa>
 800e178:	2120      	movs	r1, #32
 800e17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17c:	1c5a      	adds	r2, r3, #1
 800e17e:	627a      	str	r2, [r7, #36]	; 0x24
 800e180:	68fa      	ldr	r2, [r7, #12]
 800e182:	4413      	add	r3, r2
 800e184:	460a      	mov	r2, r1
 800e186:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e18a:	2b07      	cmp	r3, #7
 800e18c:	d9e9      	bls.n	800e162 <gen_numname+0xe2>
}
 800e18e:	bf00      	nop
 800e190:	bf00      	nop
 800e192:	3730      	adds	r7, #48	; 0x30
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}
 800e198:	00011021 	.word	0x00011021

0800e19c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e19c:	b480      	push	{r7}
 800e19e:	b085      	sub	sp, #20
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e1a8:	230b      	movs	r3, #11
 800e1aa:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e1ac:	7bfb      	ldrb	r3, [r7, #15]
 800e1ae:	b2da      	uxtb	r2, r3
 800e1b0:	0852      	lsrs	r2, r2, #1
 800e1b2:	01db      	lsls	r3, r3, #7
 800e1b4:	4313      	orrs	r3, r2
 800e1b6:	b2da      	uxtb	r2, r3
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	1c59      	adds	r1, r3, #1
 800e1bc:	6079      	str	r1, [r7, #4]
 800e1be:	781b      	ldrb	r3, [r3, #0]
 800e1c0:	4413      	add	r3, r2
 800e1c2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	3b01      	subs	r3, #1
 800e1c8:	60bb      	str	r3, [r7, #8]
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d1ed      	bne.n	800e1ac <sum_sfn+0x10>
	return sum;
 800e1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3714      	adds	r7, #20
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1dc:	4770      	bx	lr

0800e1de <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e1de:	b580      	push	{r7, lr}
 800e1e0:	b086      	sub	sp, #24
 800e1e2:	af00      	add	r7, sp, #0
 800e1e4:	6078      	str	r0, [r7, #4]
 800e1e6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e1e8:	2304      	movs	r3, #4
 800e1ea:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800e1f2:	23ff      	movs	r3, #255	; 0xff
 800e1f4:	757b      	strb	r3, [r7, #21]
 800e1f6:	23ff      	movs	r3, #255	; 0xff
 800e1f8:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800e1fa:	e081      	b.n	800e300 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	69db      	ldr	r3, [r3, #28]
 800e200:	4619      	mov	r1, r3
 800e202:	6938      	ldr	r0, [r7, #16]
 800e204:	f7ff f8bc 	bl	800d380 <move_window>
 800e208:	4603      	mov	r3, r0
 800e20a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e20c:	7dfb      	ldrb	r3, [r7, #23]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d17c      	bne.n	800e30c <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6a1b      	ldr	r3, [r3, #32]
 800e216:	781b      	ldrb	r3, [r3, #0]
 800e218:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800e21a:	7dbb      	ldrb	r3, [r7, #22]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d102      	bne.n	800e226 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e220:	2304      	movs	r3, #4
 800e222:	75fb      	strb	r3, [r7, #23]
 800e224:	e077      	b.n	800e316 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6a1b      	ldr	r3, [r3, #32]
 800e22a:	330b      	adds	r3, #11
 800e22c:	781b      	ldrb	r3, [r3, #0]
 800e22e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e232:	73fb      	strb	r3, [r7, #15]
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	7bfa      	ldrb	r2, [r7, #15]
 800e238:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800e23a:	7dbb      	ldrb	r3, [r7, #22]
 800e23c:	2be5      	cmp	r3, #229	; 0xe5
 800e23e:	d00e      	beq.n	800e25e <dir_read+0x80>
 800e240:	7dbb      	ldrb	r3, [r7, #22]
 800e242:	2b2e      	cmp	r3, #46	; 0x2e
 800e244:	d00b      	beq.n	800e25e <dir_read+0x80>
 800e246:	7bfb      	ldrb	r3, [r7, #15]
 800e248:	f023 0320 	bic.w	r3, r3, #32
 800e24c:	2b08      	cmp	r3, #8
 800e24e:	bf0c      	ite	eq
 800e250:	2301      	moveq	r3, #1
 800e252:	2300      	movne	r3, #0
 800e254:	b2db      	uxtb	r3, r3
 800e256:	461a      	mov	r2, r3
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	4293      	cmp	r3, r2
 800e25c:	d002      	beq.n	800e264 <dir_read+0x86>
				ord = 0xFF;
 800e25e:	23ff      	movs	r3, #255	; 0xff
 800e260:	757b      	strb	r3, [r7, #21]
 800e262:	e044      	b.n	800e2ee <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800e264:	7bfb      	ldrb	r3, [r7, #15]
 800e266:	2b0f      	cmp	r3, #15
 800e268:	d12f      	bne.n	800e2ca <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800e26a:	7dbb      	ldrb	r3, [r7, #22]
 800e26c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e270:	2b00      	cmp	r3, #0
 800e272:	d00d      	beq.n	800e290 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6a1b      	ldr	r3, [r3, #32]
 800e278:	7b5b      	ldrb	r3, [r3, #13]
 800e27a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800e27c:	7dbb      	ldrb	r3, [r7, #22]
 800e27e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e282:	75bb      	strb	r3, [r7, #22]
 800e284:	7dbb      	ldrb	r3, [r7, #22]
 800e286:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	695a      	ldr	r2, [r3, #20]
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e290:	7dba      	ldrb	r2, [r7, #22]
 800e292:	7d7b      	ldrb	r3, [r7, #21]
 800e294:	429a      	cmp	r2, r3
 800e296:	d115      	bne.n	800e2c4 <dir_read+0xe6>
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6a1b      	ldr	r3, [r3, #32]
 800e29c:	330d      	adds	r3, #13
 800e29e:	781b      	ldrb	r3, [r3, #0]
 800e2a0:	7d3a      	ldrb	r2, [r7, #20]
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d10e      	bne.n	800e2c4 <dir_read+0xe6>
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	68da      	ldr	r2, [r3, #12]
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6a1b      	ldr	r3, [r3, #32]
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	4610      	mov	r0, r2
 800e2b2:	f7ff fe19 	bl	800dee8 <pick_lfn>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d003      	beq.n	800e2c4 <dir_read+0xe6>
 800e2bc:	7d7b      	ldrb	r3, [r7, #21]
 800e2be:	3b01      	subs	r3, #1
 800e2c0:	b2db      	uxtb	r3, r3
 800e2c2:	e000      	b.n	800e2c6 <dir_read+0xe8>
 800e2c4:	23ff      	movs	r3, #255	; 0xff
 800e2c6:	757b      	strb	r3, [r7, #21]
 800e2c8:	e011      	b.n	800e2ee <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800e2ca:	7d7b      	ldrb	r3, [r7, #21]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d109      	bne.n	800e2e4 <dir_read+0x106>
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6a1b      	ldr	r3, [r3, #32]
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f7ff ff61 	bl	800e19c <sum_sfn>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	461a      	mov	r2, r3
 800e2de:	7d3b      	ldrb	r3, [r7, #20]
 800e2e0:	4293      	cmp	r3, r2
 800e2e2:	d015      	beq.n	800e310 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f04f 32ff 	mov.w	r2, #4294967295
 800e2ea:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800e2ec:	e010      	b.n	800e310 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e2ee:	2100      	movs	r1, #0
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f7ff fc3e 	bl	800db72 <dir_next>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e2fa:	7dfb      	ldrb	r3, [r7, #23]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d109      	bne.n	800e314 <dir_read+0x136>
	while (dp->sect) {
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	69db      	ldr	r3, [r3, #28]
 800e304:	2b00      	cmp	r3, #0
 800e306:	f47f af79 	bne.w	800e1fc <dir_read+0x1e>
 800e30a:	e004      	b.n	800e316 <dir_read+0x138>
		if (res != FR_OK) break;
 800e30c:	bf00      	nop
 800e30e:	e002      	b.n	800e316 <dir_read+0x138>
					break;
 800e310:	bf00      	nop
 800e312:	e000      	b.n	800e316 <dir_read+0x138>
		if (res != FR_OK) break;
 800e314:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e316:	7dfb      	ldrb	r3, [r7, #23]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d002      	beq.n	800e322 <dir_read+0x144>
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2200      	movs	r2, #0
 800e320:	61da      	str	r2, [r3, #28]
	return res;
 800e322:	7dfb      	ldrb	r3, [r7, #23]
}
 800e324:	4618      	mov	r0, r3
 800e326:	3718      	adds	r7, #24
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}

0800e32c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b086      	sub	sp, #24
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e33a:	2100      	movs	r1, #0
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f7ff fb9d 	bl	800da7c <dir_sdi>
 800e342:	4603      	mov	r3, r0
 800e344:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e346:	7dfb      	ldrb	r3, [r7, #23]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d001      	beq.n	800e350 <dir_find+0x24>
 800e34c:	7dfb      	ldrb	r3, [r7, #23]
 800e34e:	e0a9      	b.n	800e4a4 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e350:	23ff      	movs	r3, #255	; 0xff
 800e352:	753b      	strb	r3, [r7, #20]
 800e354:	7d3b      	ldrb	r3, [r7, #20]
 800e356:	757b      	strb	r3, [r7, #21]
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f04f 32ff 	mov.w	r2, #4294967295
 800e35e:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	69db      	ldr	r3, [r3, #28]
 800e364:	4619      	mov	r1, r3
 800e366:	6938      	ldr	r0, [r7, #16]
 800e368:	f7ff f80a 	bl	800d380 <move_window>
 800e36c:	4603      	mov	r3, r0
 800e36e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e370:	7dfb      	ldrb	r3, [r7, #23]
 800e372:	2b00      	cmp	r3, #0
 800e374:	f040 8090 	bne.w	800e498 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	6a1b      	ldr	r3, [r3, #32]
 800e37c:	781b      	ldrb	r3, [r3, #0]
 800e37e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e380:	7dbb      	ldrb	r3, [r7, #22]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d102      	bne.n	800e38c <dir_find+0x60>
 800e386:	2304      	movs	r3, #4
 800e388:	75fb      	strb	r3, [r7, #23]
 800e38a:	e08a      	b.n	800e4a2 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6a1b      	ldr	r3, [r3, #32]
 800e390:	330b      	adds	r3, #11
 800e392:	781b      	ldrb	r3, [r3, #0]
 800e394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e398:	73fb      	strb	r3, [r7, #15]
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	7bfa      	ldrb	r2, [r7, #15]
 800e39e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e3a0:	7dbb      	ldrb	r3, [r7, #22]
 800e3a2:	2be5      	cmp	r3, #229	; 0xe5
 800e3a4:	d007      	beq.n	800e3b6 <dir_find+0x8a>
 800e3a6:	7bfb      	ldrb	r3, [r7, #15]
 800e3a8:	f003 0308 	and.w	r3, r3, #8
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d009      	beq.n	800e3c4 <dir_find+0x98>
 800e3b0:	7bfb      	ldrb	r3, [r7, #15]
 800e3b2:	2b0f      	cmp	r3, #15
 800e3b4:	d006      	beq.n	800e3c4 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e3b6:	23ff      	movs	r3, #255	; 0xff
 800e3b8:	757b      	strb	r3, [r7, #21]
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e3c0:	631a      	str	r2, [r3, #48]	; 0x30
 800e3c2:	e05e      	b.n	800e482 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e3c4:	7bfb      	ldrb	r3, [r7, #15]
 800e3c6:	2b0f      	cmp	r3, #15
 800e3c8:	d136      	bne.n	800e438 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e3d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d154      	bne.n	800e482 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e3d8:	7dbb      	ldrb	r3, [r7, #22]
 800e3da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d00d      	beq.n	800e3fe <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6a1b      	ldr	r3, [r3, #32]
 800e3e6:	7b5b      	ldrb	r3, [r3, #13]
 800e3e8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e3ea:	7dbb      	ldrb	r3, [r7, #22]
 800e3ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e3f0:	75bb      	strb	r3, [r7, #22]
 800e3f2:	7dbb      	ldrb	r3, [r7, #22]
 800e3f4:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	695a      	ldr	r2, [r3, #20]
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e3fe:	7dba      	ldrb	r2, [r7, #22]
 800e400:	7d7b      	ldrb	r3, [r7, #21]
 800e402:	429a      	cmp	r2, r3
 800e404:	d115      	bne.n	800e432 <dir_find+0x106>
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6a1b      	ldr	r3, [r3, #32]
 800e40a:	330d      	adds	r3, #13
 800e40c:	781b      	ldrb	r3, [r3, #0]
 800e40e:	7d3a      	ldrb	r2, [r7, #20]
 800e410:	429a      	cmp	r2, r3
 800e412:	d10e      	bne.n	800e432 <dir_find+0x106>
 800e414:	693b      	ldr	r3, [r7, #16]
 800e416:	68da      	ldr	r2, [r3, #12]
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	6a1b      	ldr	r3, [r3, #32]
 800e41c:	4619      	mov	r1, r3
 800e41e:	4610      	mov	r0, r2
 800e420:	f7ff fcf2 	bl	800de08 <cmp_lfn>
 800e424:	4603      	mov	r3, r0
 800e426:	2b00      	cmp	r3, #0
 800e428:	d003      	beq.n	800e432 <dir_find+0x106>
 800e42a:	7d7b      	ldrb	r3, [r7, #21]
 800e42c:	3b01      	subs	r3, #1
 800e42e:	b2db      	uxtb	r3, r3
 800e430:	e000      	b.n	800e434 <dir_find+0x108>
 800e432:	23ff      	movs	r3, #255	; 0xff
 800e434:	757b      	strb	r3, [r7, #21]
 800e436:	e024      	b.n	800e482 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e438:	7d7b      	ldrb	r3, [r7, #21]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d109      	bne.n	800e452 <dir_find+0x126>
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	6a1b      	ldr	r3, [r3, #32]
 800e442:	4618      	mov	r0, r3
 800e444:	f7ff feaa 	bl	800e19c <sum_sfn>
 800e448:	4603      	mov	r3, r0
 800e44a:	461a      	mov	r2, r3
 800e44c:	7d3b      	ldrb	r3, [r7, #20]
 800e44e:	4293      	cmp	r3, r2
 800e450:	d024      	beq.n	800e49c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e458:	f003 0301 	and.w	r3, r3, #1
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d10a      	bne.n	800e476 <dir_find+0x14a>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	6a18      	ldr	r0, [r3, #32]
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	3324      	adds	r3, #36	; 0x24
 800e468:	220b      	movs	r2, #11
 800e46a:	4619      	mov	r1, r3
 800e46c:	f7fe fd96 	bl	800cf9c <mem_cmp>
 800e470:	4603      	mov	r3, r0
 800e472:	2b00      	cmp	r3, #0
 800e474:	d014      	beq.n	800e4a0 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e476:	23ff      	movs	r3, #255	; 0xff
 800e478:	757b      	strb	r3, [r7, #21]
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f04f 32ff 	mov.w	r2, #4294967295
 800e480:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e482:	2100      	movs	r1, #0
 800e484:	6878      	ldr	r0, [r7, #4]
 800e486:	f7ff fb74 	bl	800db72 <dir_next>
 800e48a:	4603      	mov	r3, r0
 800e48c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e48e:	7dfb      	ldrb	r3, [r7, #23]
 800e490:	2b00      	cmp	r3, #0
 800e492:	f43f af65 	beq.w	800e360 <dir_find+0x34>
 800e496:	e004      	b.n	800e4a2 <dir_find+0x176>
		if (res != FR_OK) break;
 800e498:	bf00      	nop
 800e49a:	e002      	b.n	800e4a2 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e49c:	bf00      	nop
 800e49e:	e000      	b.n	800e4a2 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e4a0:	bf00      	nop

	return res;
 800e4a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	3718      	adds	r7, #24
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}

0800e4ac <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b08c      	sub	sp, #48	; 0x30
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e4c0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d001      	beq.n	800e4cc <dir_register+0x20>
 800e4c8:	2306      	movs	r3, #6
 800e4ca:	e0e0      	b.n	800e68e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	627b      	str	r3, [r7, #36]	; 0x24
 800e4d0:	e002      	b.n	800e4d8 <dir_register+0x2c>
 800e4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d4:	3301      	adds	r3, #1
 800e4d6:	627b      	str	r3, [r7, #36]	; 0x24
 800e4d8:	69fb      	ldr	r3, [r7, #28]
 800e4da:	68da      	ldr	r2, [r3, #12]
 800e4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4de:	005b      	lsls	r3, r3, #1
 800e4e0:	4413      	add	r3, r2
 800e4e2:	881b      	ldrh	r3, [r3, #0]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d1f4      	bne.n	800e4d2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800e4ee:	f107 030c 	add.w	r3, r7, #12
 800e4f2:	220c      	movs	r2, #12
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f7fe fd15 	bl	800cf24 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e4fa:	7dfb      	ldrb	r3, [r7, #23]
 800e4fc:	f003 0301 	and.w	r3, r3, #1
 800e500:	2b00      	cmp	r3, #0
 800e502:	d032      	beq.n	800e56a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2240      	movs	r2, #64	; 0x40
 800e508:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800e50c:	2301      	movs	r3, #1
 800e50e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e510:	e016      	b.n	800e540 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800e518:	69fb      	ldr	r3, [r7, #28]
 800e51a:	68da      	ldr	r2, [r3, #12]
 800e51c:	f107 010c 	add.w	r1, r7, #12
 800e520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e522:	f7ff fdad 	bl	800e080 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	f7ff ff00 	bl	800e32c <dir_find>
 800e52c:	4603      	mov	r3, r0
 800e52e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800e532:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e536:	2b00      	cmp	r3, #0
 800e538:	d106      	bne.n	800e548 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e53c:	3301      	adds	r3, #1
 800e53e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e542:	2b63      	cmp	r3, #99	; 0x63
 800e544:	d9e5      	bls.n	800e512 <dir_register+0x66>
 800e546:	e000      	b.n	800e54a <dir_register+0x9e>
			if (res != FR_OK) break;
 800e548:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e54c:	2b64      	cmp	r3, #100	; 0x64
 800e54e:	d101      	bne.n	800e554 <dir_register+0xa8>
 800e550:	2307      	movs	r3, #7
 800e552:	e09c      	b.n	800e68e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e554:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e558:	2b04      	cmp	r3, #4
 800e55a:	d002      	beq.n	800e562 <dir_register+0xb6>
 800e55c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e560:	e095      	b.n	800e68e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e562:	7dfa      	ldrb	r2, [r7, #23]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e56a:	7dfb      	ldrb	r3, [r7, #23]
 800e56c:	f003 0302 	and.w	r3, r3, #2
 800e570:	2b00      	cmp	r3, #0
 800e572:	d007      	beq.n	800e584 <dir_register+0xd8>
 800e574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e576:	330c      	adds	r3, #12
 800e578:	4a47      	ldr	r2, [pc, #284]	; (800e698 <dir_register+0x1ec>)
 800e57a:	fba2 2303 	umull	r2, r3, r2, r3
 800e57e:	089b      	lsrs	r3, r3, #2
 800e580:	3301      	adds	r3, #1
 800e582:	e000      	b.n	800e586 <dir_register+0xda>
 800e584:	2301      	movs	r3, #1
 800e586:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e588:	6a39      	ldr	r1, [r7, #32]
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f7ff fbb6 	bl	800dcfc <dir_alloc>
 800e590:	4603      	mov	r3, r0
 800e592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d148      	bne.n	800e630 <dir_register+0x184>
 800e59e:	6a3b      	ldr	r3, [r7, #32]
 800e5a0:	3b01      	subs	r3, #1
 800e5a2:	623b      	str	r3, [r7, #32]
 800e5a4:	6a3b      	ldr	r3, [r7, #32]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d042      	beq.n	800e630 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	695a      	ldr	r2, [r3, #20]
 800e5ae:	6a3b      	ldr	r3, [r7, #32]
 800e5b0:	015b      	lsls	r3, r3, #5
 800e5b2:	1ad3      	subs	r3, r2, r3
 800e5b4:	4619      	mov	r1, r3
 800e5b6:	6878      	ldr	r0, [r7, #4]
 800e5b8:	f7ff fa60 	bl	800da7c <dir_sdi>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e5c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d132      	bne.n	800e630 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	3324      	adds	r3, #36	; 0x24
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f7ff fde4 	bl	800e19c <sum_sfn>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	69db      	ldr	r3, [r3, #28]
 800e5dc:	4619      	mov	r1, r3
 800e5de:	69f8      	ldr	r0, [r7, #28]
 800e5e0:	f7fe fece 	bl	800d380 <move_window>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800e5ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d11d      	bne.n	800e62e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e5f2:	69fb      	ldr	r3, [r7, #28]
 800e5f4:	68d8      	ldr	r0, [r3, #12]
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	6a19      	ldr	r1, [r3, #32]
 800e5fa:	6a3b      	ldr	r3, [r7, #32]
 800e5fc:	b2da      	uxtb	r2, r3
 800e5fe:	7efb      	ldrb	r3, [r7, #27]
 800e600:	f7ff fcd6 	bl	800dfb0 <put_lfn>
				fs->wflag = 1;
 800e604:	69fb      	ldr	r3, [r7, #28]
 800e606:	2201      	movs	r2, #1
 800e608:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e60a:	2100      	movs	r1, #0
 800e60c:	6878      	ldr	r0, [r7, #4]
 800e60e:	f7ff fab0 	bl	800db72 <dir_next>
 800e612:	4603      	mov	r3, r0
 800e614:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800e618:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d107      	bne.n	800e630 <dir_register+0x184>
 800e620:	6a3b      	ldr	r3, [r7, #32]
 800e622:	3b01      	subs	r3, #1
 800e624:	623b      	str	r3, [r7, #32]
 800e626:	6a3b      	ldr	r3, [r7, #32]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d1d5      	bne.n	800e5d8 <dir_register+0x12c>
 800e62c:	e000      	b.n	800e630 <dir_register+0x184>
				if (res != FR_OK) break;
 800e62e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e630:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e634:	2b00      	cmp	r3, #0
 800e636:	d128      	bne.n	800e68a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	69db      	ldr	r3, [r3, #28]
 800e63c:	4619      	mov	r1, r3
 800e63e:	69f8      	ldr	r0, [r7, #28]
 800e640:	f7fe fe9e 	bl	800d380 <move_window>
 800e644:	4603      	mov	r3, r0
 800e646:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e64a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d11b      	bne.n	800e68a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	6a1b      	ldr	r3, [r3, #32]
 800e656:	2220      	movs	r2, #32
 800e658:	2100      	movs	r1, #0
 800e65a:	4618      	mov	r0, r3
 800e65c:	f7fe fc83 	bl	800cf66 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6a18      	ldr	r0, [r3, #32]
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	3324      	adds	r3, #36	; 0x24
 800e668:	220b      	movs	r2, #11
 800e66a:	4619      	mov	r1, r3
 800e66c:	f7fe fc5a 	bl	800cf24 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6a1b      	ldr	r3, [r3, #32]
 800e67a:	330c      	adds	r3, #12
 800e67c:	f002 0218 	and.w	r2, r2, #24
 800e680:	b2d2      	uxtb	r2, r2
 800e682:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e684:	69fb      	ldr	r3, [r7, #28]
 800e686:	2201      	movs	r2, #1
 800e688:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e68a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e68e:	4618      	mov	r0, r3
 800e690:	3730      	adds	r7, #48	; 0x30
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}
 800e696:	bf00      	nop
 800e698:	4ec4ec4f 	.word	0x4ec4ec4f

0800e69c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b088      	sub	sp, #32
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
 800e6a4:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	69db      	ldr	r3, [r3, #28]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	f000 80c9 	beq.w	800e84e <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6c4:	d032      	beq.n	800e72c <get_fileinfo+0x90>
			i = j = 0;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	61bb      	str	r3, [r7, #24]
 800e6ca:	69bb      	ldr	r3, [r7, #24]
 800e6cc:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e6ce:	e01b      	b.n	800e708 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800e6d0:	89fb      	ldrh	r3, [r7, #14]
 800e6d2:	2100      	movs	r1, #0
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f001 fd2f 	bl	8010138 <ff_convert>
 800e6da:	4603      	mov	r3, r0
 800e6dc:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800e6de:	89fb      	ldrh	r3, [r7, #14]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d102      	bne.n	800e6ea <get_fileinfo+0x4e>
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	61fb      	str	r3, [r7, #28]
 800e6e8:	e01a      	b.n	800e720 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800e6ea:	69fb      	ldr	r3, [r7, #28]
 800e6ec:	2bfe      	cmp	r3, #254	; 0xfe
 800e6ee:	d902      	bls.n	800e6f6 <get_fileinfo+0x5a>
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	61fb      	str	r3, [r7, #28]
 800e6f4:	e014      	b.n	800e720 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800e6f6:	69fb      	ldr	r3, [r7, #28]
 800e6f8:	1c5a      	adds	r2, r3, #1
 800e6fa:	61fa      	str	r2, [r7, #28]
 800e6fc:	89fa      	ldrh	r2, [r7, #14]
 800e6fe:	b2d1      	uxtb	r1, r2
 800e700:	683a      	ldr	r2, [r7, #0]
 800e702:	4413      	add	r3, r2
 800e704:	460a      	mov	r2, r1
 800e706:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e708:	693b      	ldr	r3, [r7, #16]
 800e70a:	68da      	ldr	r2, [r3, #12]
 800e70c:	69bb      	ldr	r3, [r7, #24]
 800e70e:	1c59      	adds	r1, r3, #1
 800e710:	61b9      	str	r1, [r7, #24]
 800e712:	005b      	lsls	r3, r3, #1
 800e714:	4413      	add	r3, r2
 800e716:	881b      	ldrh	r3, [r3, #0]
 800e718:	81fb      	strh	r3, [r7, #14]
 800e71a:	89fb      	ldrh	r3, [r7, #14]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d1d7      	bne.n	800e6d0 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800e720:	683a      	ldr	r2, [r7, #0]
 800e722:	69fb      	ldr	r3, [r7, #28]
 800e724:	4413      	add	r3, r2
 800e726:	3316      	adds	r3, #22
 800e728:	2200      	movs	r2, #0
 800e72a:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800e72c:	2300      	movs	r3, #0
 800e72e:	61bb      	str	r3, [r7, #24]
 800e730:	69bb      	ldr	r3, [r7, #24]
 800e732:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800e734:	683a      	ldr	r2, [r7, #0]
 800e736:	69fb      	ldr	r3, [r7, #28]
 800e738:	4413      	add	r3, r2
 800e73a:	3316      	adds	r3, #22
 800e73c:	781b      	ldrb	r3, [r3, #0]
 800e73e:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800e740:	e04c      	b.n	800e7dc <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6a1a      	ldr	r2, [r3, #32]
 800e746:	69fb      	ldr	r3, [r7, #28]
 800e748:	1c59      	adds	r1, r3, #1
 800e74a:	61f9      	str	r1, [r7, #28]
 800e74c:	4413      	add	r3, r2
 800e74e:	781b      	ldrb	r3, [r3, #0]
 800e750:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e752:	7dfb      	ldrb	r3, [r7, #23]
 800e754:	2b20      	cmp	r3, #32
 800e756:	d100      	bne.n	800e75a <get_fileinfo+0xbe>
 800e758:	e040      	b.n	800e7dc <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e75a:	7dfb      	ldrb	r3, [r7, #23]
 800e75c:	2b05      	cmp	r3, #5
 800e75e:	d101      	bne.n	800e764 <get_fileinfo+0xc8>
 800e760:	23e5      	movs	r3, #229	; 0xe5
 800e762:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800e764:	69fb      	ldr	r3, [r7, #28]
 800e766:	2b09      	cmp	r3, #9
 800e768:	d10f      	bne.n	800e78a <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800e76a:	89bb      	ldrh	r3, [r7, #12]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d105      	bne.n	800e77c <get_fileinfo+0xe0>
 800e770:	683a      	ldr	r2, [r7, #0]
 800e772:	69bb      	ldr	r3, [r7, #24]
 800e774:	4413      	add	r3, r2
 800e776:	3316      	adds	r3, #22
 800e778:	222e      	movs	r2, #46	; 0x2e
 800e77a:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800e77c:	69bb      	ldr	r3, [r7, #24]
 800e77e:	1c5a      	adds	r2, r3, #1
 800e780:	61ba      	str	r2, [r7, #24]
 800e782:	683a      	ldr	r2, [r7, #0]
 800e784:	4413      	add	r3, r2
 800e786:	222e      	movs	r2, #46	; 0x2e
 800e788:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800e78a:	683a      	ldr	r2, [r7, #0]
 800e78c:	69bb      	ldr	r3, [r7, #24]
 800e78e:	4413      	add	r3, r2
 800e790:	3309      	adds	r3, #9
 800e792:	7dfa      	ldrb	r2, [r7, #23]
 800e794:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800e796:	89bb      	ldrh	r3, [r7, #12]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d11c      	bne.n	800e7d6 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800e79c:	7dfb      	ldrb	r3, [r7, #23]
 800e79e:	2b40      	cmp	r3, #64	; 0x40
 800e7a0:	d913      	bls.n	800e7ca <get_fileinfo+0x12e>
 800e7a2:	7dfb      	ldrb	r3, [r7, #23]
 800e7a4:	2b5a      	cmp	r3, #90	; 0x5a
 800e7a6:	d810      	bhi.n	800e7ca <get_fileinfo+0x12e>
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	6a1b      	ldr	r3, [r3, #32]
 800e7ac:	330c      	adds	r3, #12
 800e7ae:	781b      	ldrb	r3, [r3, #0]
 800e7b0:	461a      	mov	r2, r3
 800e7b2:	69fb      	ldr	r3, [r7, #28]
 800e7b4:	2b08      	cmp	r3, #8
 800e7b6:	d901      	bls.n	800e7bc <get_fileinfo+0x120>
 800e7b8:	2310      	movs	r3, #16
 800e7ba:	e000      	b.n	800e7be <get_fileinfo+0x122>
 800e7bc:	2308      	movs	r3, #8
 800e7be:	4013      	ands	r3, r2
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d002      	beq.n	800e7ca <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800e7c4:	7dfb      	ldrb	r3, [r7, #23]
 800e7c6:	3320      	adds	r3, #32
 800e7c8:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800e7ca:	683a      	ldr	r2, [r7, #0]
 800e7cc:	69bb      	ldr	r3, [r7, #24]
 800e7ce:	4413      	add	r3, r2
 800e7d0:	3316      	adds	r3, #22
 800e7d2:	7dfa      	ldrb	r2, [r7, #23]
 800e7d4:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800e7d6:	69bb      	ldr	r3, [r7, #24]
 800e7d8:	3301      	adds	r3, #1
 800e7da:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800e7dc:	69fb      	ldr	r3, [r7, #28]
 800e7de:	2b0a      	cmp	r3, #10
 800e7e0:	d9af      	bls.n	800e742 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800e7e2:	89bb      	ldrh	r3, [r7, #12]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d10d      	bne.n	800e804 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800e7e8:	683a      	ldr	r2, [r7, #0]
 800e7ea:	69bb      	ldr	r3, [r7, #24]
 800e7ec:	4413      	add	r3, r2
 800e7ee:	3316      	adds	r3, #22
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6a1b      	ldr	r3, [r3, #32]
 800e7f8:	330c      	adds	r3, #12
 800e7fa:	781b      	ldrb	r3, [r3, #0]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d101      	bne.n	800e804 <get_fileinfo+0x168>
 800e800:	2300      	movs	r3, #0
 800e802:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800e804:	683a      	ldr	r2, [r7, #0]
 800e806:	69bb      	ldr	r3, [r7, #24]
 800e808:	4413      	add	r3, r2
 800e80a:	3309      	adds	r3, #9
 800e80c:	2200      	movs	r2, #0
 800e80e:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6a1b      	ldr	r3, [r3, #32]
 800e814:	7ada      	ldrb	r2, [r3, #11]
 800e816:	683b      	ldr	r3, [r7, #0]
 800e818:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	6a1b      	ldr	r3, [r3, #32]
 800e81e:	331c      	adds	r3, #28
 800e820:	4618      	mov	r0, r3
 800e822:	f7fe fb15 	bl	800ce50 <ld_dword>
 800e826:	4602      	mov	r2, r0
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	6a1b      	ldr	r3, [r3, #32]
 800e830:	3316      	adds	r3, #22
 800e832:	4618      	mov	r0, r3
 800e834:	f7fe fb0c 	bl	800ce50 <ld_dword>
 800e838:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	b29a      	uxth	r2, r3
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	80da      	strh	r2, [r3, #6]
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	0c1b      	lsrs	r3, r3, #16
 800e846:	b29a      	uxth	r2, r3
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	809a      	strh	r2, [r3, #4]
 800e84c:	e000      	b.n	800e850 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e84e:	bf00      	nop
}
 800e850:	3720      	adds	r7, #32
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}
	...

0800e858 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b08a      	sub	sp, #40	; 0x28
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
 800e860:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	613b      	str	r3, [r7, #16]
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	68db      	ldr	r3, [r3, #12]
 800e86e:	60fb      	str	r3, [r7, #12]
 800e870:	2300      	movs	r3, #0
 800e872:	617b      	str	r3, [r7, #20]
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e878:	69bb      	ldr	r3, [r7, #24]
 800e87a:	1c5a      	adds	r2, r3, #1
 800e87c:	61ba      	str	r2, [r7, #24]
 800e87e:	693a      	ldr	r2, [r7, #16]
 800e880:	4413      	add	r3, r2
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e886:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e888:	2b1f      	cmp	r3, #31
 800e88a:	d940      	bls.n	800e90e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e88c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e88e:	2b2f      	cmp	r3, #47	; 0x2f
 800e890:	d006      	beq.n	800e8a0 <create_name+0x48>
 800e892:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e894:	2b5c      	cmp	r3, #92	; 0x5c
 800e896:	d110      	bne.n	800e8ba <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e898:	e002      	b.n	800e8a0 <create_name+0x48>
 800e89a:	69bb      	ldr	r3, [r7, #24]
 800e89c:	3301      	adds	r3, #1
 800e89e:	61bb      	str	r3, [r7, #24]
 800e8a0:	693a      	ldr	r2, [r7, #16]
 800e8a2:	69bb      	ldr	r3, [r7, #24]
 800e8a4:	4413      	add	r3, r2
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	2b2f      	cmp	r3, #47	; 0x2f
 800e8aa:	d0f6      	beq.n	800e89a <create_name+0x42>
 800e8ac:	693a      	ldr	r2, [r7, #16]
 800e8ae:	69bb      	ldr	r3, [r7, #24]
 800e8b0:	4413      	add	r3, r2
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	2b5c      	cmp	r3, #92	; 0x5c
 800e8b6:	d0f0      	beq.n	800e89a <create_name+0x42>
			break;
 800e8b8:	e02a      	b.n	800e910 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	2bfe      	cmp	r3, #254	; 0xfe
 800e8be:	d901      	bls.n	800e8c4 <create_name+0x6c>
 800e8c0:	2306      	movs	r3, #6
 800e8c2:	e17d      	b.n	800ebc0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e8c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8c6:	b2db      	uxtb	r3, r3
 800e8c8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e8ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8cc:	2101      	movs	r1, #1
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f001 fc32 	bl	8010138 <ff_convert>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e8d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d101      	bne.n	800e8e2 <create_name+0x8a>
 800e8de:	2306      	movs	r3, #6
 800e8e0:	e16e      	b.n	800ebc0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e8e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8e4:	2b7f      	cmp	r3, #127	; 0x7f
 800e8e6:	d809      	bhi.n	800e8fc <create_name+0xa4>
 800e8e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8ea:	4619      	mov	r1, r3
 800e8ec:	488d      	ldr	r0, [pc, #564]	; (800eb24 <create_name+0x2cc>)
 800e8ee:	f7fe fb7c 	bl	800cfea <chk_chr>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d001      	beq.n	800e8fc <create_name+0xa4>
 800e8f8:	2306      	movs	r3, #6
 800e8fa:	e161      	b.n	800ebc0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e8fc:	697b      	ldr	r3, [r7, #20]
 800e8fe:	1c5a      	adds	r2, r3, #1
 800e900:	617a      	str	r2, [r7, #20]
 800e902:	005b      	lsls	r3, r3, #1
 800e904:	68fa      	ldr	r2, [r7, #12]
 800e906:	4413      	add	r3, r2
 800e908:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e90a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e90c:	e7b4      	b.n	800e878 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e90e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e910:	693a      	ldr	r2, [r7, #16]
 800e912:	69bb      	ldr	r3, [r7, #24]
 800e914:	441a      	add	r2, r3
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e91a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e91c:	2b1f      	cmp	r3, #31
 800e91e:	d801      	bhi.n	800e924 <create_name+0xcc>
 800e920:	2304      	movs	r3, #4
 800e922:	e000      	b.n	800e926 <create_name+0xce>
 800e924:	2300      	movs	r3, #0
 800e926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e92a:	e011      	b.n	800e950 <create_name+0xf8>
		w = lfn[di - 1];
 800e92c:	697a      	ldr	r2, [r7, #20]
 800e92e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e932:	4413      	add	r3, r2
 800e934:	005b      	lsls	r3, r3, #1
 800e936:	68fa      	ldr	r2, [r7, #12]
 800e938:	4413      	add	r3, r2
 800e93a:	881b      	ldrh	r3, [r3, #0]
 800e93c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800e93e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e940:	2b20      	cmp	r3, #32
 800e942:	d002      	beq.n	800e94a <create_name+0xf2>
 800e944:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e946:	2b2e      	cmp	r3, #46	; 0x2e
 800e948:	d106      	bne.n	800e958 <create_name+0x100>
		di--;
 800e94a:	697b      	ldr	r3, [r7, #20]
 800e94c:	3b01      	subs	r3, #1
 800e94e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d1ea      	bne.n	800e92c <create_name+0xd4>
 800e956:	e000      	b.n	800e95a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e958:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	005b      	lsls	r3, r3, #1
 800e95e:	68fa      	ldr	r2, [r7, #12]
 800e960:	4413      	add	r3, r2
 800e962:	2200      	movs	r2, #0
 800e964:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d101      	bne.n	800e970 <create_name+0x118>
 800e96c:	2306      	movs	r3, #6
 800e96e:	e127      	b.n	800ebc0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	3324      	adds	r3, #36	; 0x24
 800e974:	220b      	movs	r2, #11
 800e976:	2120      	movs	r1, #32
 800e978:	4618      	mov	r0, r3
 800e97a:	f7fe faf4 	bl	800cf66 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e97e:	2300      	movs	r3, #0
 800e980:	61bb      	str	r3, [r7, #24]
 800e982:	e002      	b.n	800e98a <create_name+0x132>
 800e984:	69bb      	ldr	r3, [r7, #24]
 800e986:	3301      	adds	r3, #1
 800e988:	61bb      	str	r3, [r7, #24]
 800e98a:	69bb      	ldr	r3, [r7, #24]
 800e98c:	005b      	lsls	r3, r3, #1
 800e98e:	68fa      	ldr	r2, [r7, #12]
 800e990:	4413      	add	r3, r2
 800e992:	881b      	ldrh	r3, [r3, #0]
 800e994:	2b20      	cmp	r3, #32
 800e996:	d0f5      	beq.n	800e984 <create_name+0x12c>
 800e998:	69bb      	ldr	r3, [r7, #24]
 800e99a:	005b      	lsls	r3, r3, #1
 800e99c:	68fa      	ldr	r2, [r7, #12]
 800e99e:	4413      	add	r3, r2
 800e9a0:	881b      	ldrh	r3, [r3, #0]
 800e9a2:	2b2e      	cmp	r3, #46	; 0x2e
 800e9a4:	d0ee      	beq.n	800e984 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e9a6:	69bb      	ldr	r3, [r7, #24]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d009      	beq.n	800e9c0 <create_name+0x168>
 800e9ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9b0:	f043 0303 	orr.w	r3, r3, #3
 800e9b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e9b8:	e002      	b.n	800e9c0 <create_name+0x168>
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	3b01      	subs	r3, #1
 800e9be:	617b      	str	r3, [r7, #20]
 800e9c0:	697b      	ldr	r3, [r7, #20]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d009      	beq.n	800e9da <create_name+0x182>
 800e9c6:	697a      	ldr	r2, [r7, #20]
 800e9c8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e9cc:	4413      	add	r3, r2
 800e9ce:	005b      	lsls	r3, r3, #1
 800e9d0:	68fa      	ldr	r2, [r7, #12]
 800e9d2:	4413      	add	r3, r2
 800e9d4:	881b      	ldrh	r3, [r3, #0]
 800e9d6:	2b2e      	cmp	r3, #46	; 0x2e
 800e9d8:	d1ef      	bne.n	800e9ba <create_name+0x162>

	i = b = 0; ni = 8;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	623b      	str	r3, [r7, #32]
 800e9e4:	2308      	movs	r3, #8
 800e9e6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e9e8:	69bb      	ldr	r3, [r7, #24]
 800e9ea:	1c5a      	adds	r2, r3, #1
 800e9ec:	61ba      	str	r2, [r7, #24]
 800e9ee:	005b      	lsls	r3, r3, #1
 800e9f0:	68fa      	ldr	r2, [r7, #12]
 800e9f2:	4413      	add	r3, r2
 800e9f4:	881b      	ldrh	r3, [r3, #0]
 800e9f6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e9f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	f000 8090 	beq.w	800eb20 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ea00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea02:	2b20      	cmp	r3, #32
 800ea04:	d006      	beq.n	800ea14 <create_name+0x1bc>
 800ea06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea08:	2b2e      	cmp	r3, #46	; 0x2e
 800ea0a:	d10a      	bne.n	800ea22 <create_name+0x1ca>
 800ea0c:	69ba      	ldr	r2, [r7, #24]
 800ea0e:	697b      	ldr	r3, [r7, #20]
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d006      	beq.n	800ea22 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ea14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea18:	f043 0303 	orr.w	r3, r3, #3
 800ea1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ea20:	e07d      	b.n	800eb1e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ea22:	6a3a      	ldr	r2, [r7, #32]
 800ea24:	69fb      	ldr	r3, [r7, #28]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d203      	bcs.n	800ea32 <create_name+0x1da>
 800ea2a:	69ba      	ldr	r2, [r7, #24]
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	429a      	cmp	r2, r3
 800ea30:	d123      	bne.n	800ea7a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800ea32:	69fb      	ldr	r3, [r7, #28]
 800ea34:	2b0b      	cmp	r3, #11
 800ea36:	d106      	bne.n	800ea46 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ea38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea3c:	f043 0303 	orr.w	r3, r3, #3
 800ea40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ea44:	e075      	b.n	800eb32 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ea46:	69ba      	ldr	r2, [r7, #24]
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	d005      	beq.n	800ea5a <create_name+0x202>
 800ea4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea52:	f043 0303 	orr.w	r3, r3, #3
 800ea56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800ea5a:	69ba      	ldr	r2, [r7, #24]
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	d866      	bhi.n	800eb30 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ea62:	697b      	ldr	r3, [r7, #20]
 800ea64:	61bb      	str	r3, [r7, #24]
 800ea66:	2308      	movs	r3, #8
 800ea68:	623b      	str	r3, [r7, #32]
 800ea6a:	230b      	movs	r3, #11
 800ea6c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ea6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea72:	009b      	lsls	r3, r3, #2
 800ea74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ea78:	e051      	b.n	800eb1e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ea7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea7c:	2b7f      	cmp	r3, #127	; 0x7f
 800ea7e:	d914      	bls.n	800eaaa <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ea80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea82:	2100      	movs	r1, #0
 800ea84:	4618      	mov	r0, r3
 800ea86:	f001 fb57 	bl	8010138 <ff_convert>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ea8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d004      	beq.n	800ea9e <create_name+0x246>
 800ea94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea96:	3b80      	subs	r3, #128	; 0x80
 800ea98:	4a23      	ldr	r2, [pc, #140]	; (800eb28 <create_name+0x2d0>)
 800ea9a:	5cd3      	ldrb	r3, [r2, r3]
 800ea9c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ea9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eaa2:	f043 0302 	orr.w	r3, r3, #2
 800eaa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800eaaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d007      	beq.n	800eac0 <create_name+0x268>
 800eab0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eab2:	4619      	mov	r1, r3
 800eab4:	481d      	ldr	r0, [pc, #116]	; (800eb2c <create_name+0x2d4>)
 800eab6:	f7fe fa98 	bl	800cfea <chk_chr>
 800eaba:	4603      	mov	r3, r0
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d008      	beq.n	800ead2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800eac0:	235f      	movs	r3, #95	; 0x5f
 800eac2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800eac4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eac8:	f043 0303 	orr.w	r3, r3, #3
 800eacc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ead0:	e01b      	b.n	800eb0a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ead2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ead4:	2b40      	cmp	r3, #64	; 0x40
 800ead6:	d909      	bls.n	800eaec <create_name+0x294>
 800ead8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eada:	2b5a      	cmp	r3, #90	; 0x5a
 800eadc:	d806      	bhi.n	800eaec <create_name+0x294>
					b |= 2;
 800eade:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eae2:	f043 0302 	orr.w	r3, r3, #2
 800eae6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800eaea:	e00e      	b.n	800eb0a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800eaec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eaee:	2b60      	cmp	r3, #96	; 0x60
 800eaf0:	d90b      	bls.n	800eb0a <create_name+0x2b2>
 800eaf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eaf4:	2b7a      	cmp	r3, #122	; 0x7a
 800eaf6:	d808      	bhi.n	800eb0a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800eaf8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eafc:	f043 0301 	orr.w	r3, r3, #1
 800eb00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800eb04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb06:	3b20      	subs	r3, #32
 800eb08:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800eb0a:	6a3b      	ldr	r3, [r7, #32]
 800eb0c:	1c5a      	adds	r2, r3, #1
 800eb0e:	623a      	str	r2, [r7, #32]
 800eb10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eb12:	b2d1      	uxtb	r1, r2
 800eb14:	687a      	ldr	r2, [r7, #4]
 800eb16:	4413      	add	r3, r2
 800eb18:	460a      	mov	r2, r1
 800eb1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800eb1e:	e763      	b.n	800e9e8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800eb20:	bf00      	nop
 800eb22:	e006      	b.n	800eb32 <create_name+0x2da>
 800eb24:	08010c64 	.word	0x08010c64
 800eb28:	08010cd8 	.word	0x08010cd8
 800eb2c:	08010c70 	.word	0x08010c70
			if (si > di) break;			/* No extension */
 800eb30:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eb38:	2be5      	cmp	r3, #229	; 0xe5
 800eb3a:	d103      	bne.n	800eb44 <create_name+0x2ec>
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2205      	movs	r2, #5
 800eb40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800eb44:	69fb      	ldr	r3, [r7, #28]
 800eb46:	2b08      	cmp	r3, #8
 800eb48:	d104      	bne.n	800eb54 <create_name+0x2fc>
 800eb4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eb4e:	009b      	lsls	r3, r3, #2
 800eb50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800eb54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eb58:	f003 030c 	and.w	r3, r3, #12
 800eb5c:	2b0c      	cmp	r3, #12
 800eb5e:	d005      	beq.n	800eb6c <create_name+0x314>
 800eb60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eb64:	f003 0303 	and.w	r3, r3, #3
 800eb68:	2b03      	cmp	r3, #3
 800eb6a:	d105      	bne.n	800eb78 <create_name+0x320>
 800eb6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb70:	f043 0302 	orr.w	r3, r3, #2
 800eb74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800eb78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb7c:	f003 0302 	and.w	r3, r3, #2
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d117      	bne.n	800ebb4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800eb84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eb88:	f003 0303 	and.w	r3, r3, #3
 800eb8c:	2b01      	cmp	r3, #1
 800eb8e:	d105      	bne.n	800eb9c <create_name+0x344>
 800eb90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb94:	f043 0310 	orr.w	r3, r3, #16
 800eb98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800eb9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eba0:	f003 030c 	and.w	r3, r3, #12
 800eba4:	2b04      	cmp	r3, #4
 800eba6:	d105      	bne.n	800ebb4 <create_name+0x35c>
 800eba8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ebac:	f043 0308 	orr.w	r3, r3, #8
 800ebb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ebba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800ebbe:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	3728      	adds	r7, #40	; 0x28
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}

0800ebc8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b086      	sub	sp, #24
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
 800ebd0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ebd6:	693b      	ldr	r3, [r7, #16]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ebdc:	e002      	b.n	800ebe4 <follow_path+0x1c>
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	3301      	adds	r3, #1
 800ebe2:	603b      	str	r3, [r7, #0]
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	781b      	ldrb	r3, [r3, #0]
 800ebe8:	2b2f      	cmp	r3, #47	; 0x2f
 800ebea:	d0f8      	beq.n	800ebde <follow_path+0x16>
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	781b      	ldrb	r3, [r3, #0]
 800ebf0:	2b5c      	cmp	r3, #92	; 0x5c
 800ebf2:	d0f4      	beq.n	800ebde <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	781b      	ldrb	r3, [r3, #0]
 800ebfe:	2b1f      	cmp	r3, #31
 800ec00:	d80a      	bhi.n	800ec18 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2280      	movs	r2, #128	; 0x80
 800ec06:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ec0a:	2100      	movs	r1, #0
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f7fe ff35 	bl	800da7c <dir_sdi>
 800ec12:	4603      	mov	r3, r0
 800ec14:	75fb      	strb	r3, [r7, #23]
 800ec16:	e043      	b.n	800eca0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ec18:	463b      	mov	r3, r7
 800ec1a:	4619      	mov	r1, r3
 800ec1c:	6878      	ldr	r0, [r7, #4]
 800ec1e:	f7ff fe1b 	bl	800e858 <create_name>
 800ec22:	4603      	mov	r3, r0
 800ec24:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ec26:	7dfb      	ldrb	r3, [r7, #23]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d134      	bne.n	800ec96 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f7ff fb7d 	bl	800e32c <dir_find>
 800ec32:	4603      	mov	r3, r0
 800ec34:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ec3c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ec3e:	7dfb      	ldrb	r3, [r7, #23]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d00a      	beq.n	800ec5a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ec44:	7dfb      	ldrb	r3, [r7, #23]
 800ec46:	2b04      	cmp	r3, #4
 800ec48:	d127      	bne.n	800ec9a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ec4a:	7afb      	ldrb	r3, [r7, #11]
 800ec4c:	f003 0304 	and.w	r3, r3, #4
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d122      	bne.n	800ec9a <follow_path+0xd2>
 800ec54:	2305      	movs	r3, #5
 800ec56:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ec58:	e01f      	b.n	800ec9a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ec5a:	7afb      	ldrb	r3, [r7, #11]
 800ec5c:	f003 0304 	and.w	r3, r3, #4
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d11c      	bne.n	800ec9e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ec64:	693b      	ldr	r3, [r7, #16]
 800ec66:	799b      	ldrb	r3, [r3, #6]
 800ec68:	f003 0310 	and.w	r3, r3, #16
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d102      	bne.n	800ec76 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ec70:	2305      	movs	r3, #5
 800ec72:	75fb      	strb	r3, [r7, #23]
 800ec74:	e014      	b.n	800eca0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	695b      	ldr	r3, [r3, #20]
 800ec80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec84:	4413      	add	r3, r2
 800ec86:	4619      	mov	r1, r3
 800ec88:	68f8      	ldr	r0, [r7, #12]
 800ec8a:	f7ff f87e 	bl	800dd8a <ld_clust>
 800ec8e:	4602      	mov	r2, r0
 800ec90:	693b      	ldr	r3, [r7, #16]
 800ec92:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ec94:	e7c0      	b.n	800ec18 <follow_path+0x50>
			if (res != FR_OK) break;
 800ec96:	bf00      	nop
 800ec98:	e002      	b.n	800eca0 <follow_path+0xd8>
				break;
 800ec9a:	bf00      	nop
 800ec9c:	e000      	b.n	800eca0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ec9e:	bf00      	nop
			}
		}
	}

	return res;
 800eca0:	7dfb      	ldrb	r3, [r7, #23]
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	3718      	adds	r7, #24
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd80      	pop	{r7, pc}

0800ecaa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ecaa:	b480      	push	{r7}
 800ecac:	b087      	sub	sp, #28
 800ecae:	af00      	add	r7, sp, #0
 800ecb0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ecb2:	f04f 33ff 	mov.w	r3, #4294967295
 800ecb6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d031      	beq.n	800ed24 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	617b      	str	r3, [r7, #20]
 800ecc6:	e002      	b.n	800ecce <get_ldnumber+0x24>
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	3301      	adds	r3, #1
 800eccc:	617b      	str	r3, [r7, #20]
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	781b      	ldrb	r3, [r3, #0]
 800ecd2:	2b1f      	cmp	r3, #31
 800ecd4:	d903      	bls.n	800ecde <get_ldnumber+0x34>
 800ecd6:	697b      	ldr	r3, [r7, #20]
 800ecd8:	781b      	ldrb	r3, [r3, #0]
 800ecda:	2b3a      	cmp	r3, #58	; 0x3a
 800ecdc:	d1f4      	bne.n	800ecc8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	781b      	ldrb	r3, [r3, #0]
 800ece2:	2b3a      	cmp	r3, #58	; 0x3a
 800ece4:	d11c      	bne.n	800ed20 <get_ldnumber+0x76>
			tp = *path;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	1c5a      	adds	r2, r3, #1
 800ecf0:	60fa      	str	r2, [r7, #12]
 800ecf2:	781b      	ldrb	r3, [r3, #0]
 800ecf4:	3b30      	subs	r3, #48	; 0x30
 800ecf6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	2b09      	cmp	r3, #9
 800ecfc:	d80e      	bhi.n	800ed1c <get_ldnumber+0x72>
 800ecfe:	68fa      	ldr	r2, [r7, #12]
 800ed00:	697b      	ldr	r3, [r7, #20]
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d10a      	bne.n	800ed1c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d107      	bne.n	800ed1c <get_ldnumber+0x72>
					vol = (int)i;
 800ed0c:	68bb      	ldr	r3, [r7, #8]
 800ed0e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ed10:	697b      	ldr	r3, [r7, #20]
 800ed12:	3301      	adds	r3, #1
 800ed14:	617b      	str	r3, [r7, #20]
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	697a      	ldr	r2, [r7, #20]
 800ed1a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ed1c:	693b      	ldr	r3, [r7, #16]
 800ed1e:	e002      	b.n	800ed26 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ed20:	2300      	movs	r3, #0
 800ed22:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ed24:	693b      	ldr	r3, [r7, #16]
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	371c      	adds	r7, #28
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed30:	4770      	bx	lr
	...

0800ed34 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b082      	sub	sp, #8
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
 800ed3c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2200      	movs	r2, #0
 800ed42:	70da      	strb	r2, [r3, #3]
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f04f 32ff 	mov.w	r2, #4294967295
 800ed4a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ed4c:	6839      	ldr	r1, [r7, #0]
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f7fe fb16 	bl	800d380 <move_window>
 800ed54:	4603      	mov	r3, r0
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d001      	beq.n	800ed5e <check_fs+0x2a>
 800ed5a:	2304      	movs	r3, #4
 800ed5c:	e038      	b.n	800edd0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	3334      	adds	r3, #52	; 0x34
 800ed62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ed66:	4618      	mov	r0, r3
 800ed68:	f7fe f85a 	bl	800ce20 <ld_word>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	461a      	mov	r2, r3
 800ed70:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d001      	beq.n	800ed7c <check_fs+0x48>
 800ed78:	2303      	movs	r3, #3
 800ed7a:	e029      	b.n	800edd0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ed82:	2be9      	cmp	r3, #233	; 0xe9
 800ed84:	d009      	beq.n	800ed9a <check_fs+0x66>
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ed8c:	2beb      	cmp	r3, #235	; 0xeb
 800ed8e:	d11e      	bne.n	800edce <check_fs+0x9a>
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ed96:	2b90      	cmp	r3, #144	; 0x90
 800ed98:	d119      	bne.n	800edce <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	3334      	adds	r3, #52	; 0x34
 800ed9e:	3336      	adds	r3, #54	; 0x36
 800eda0:	4618      	mov	r0, r3
 800eda2:	f7fe f855 	bl	800ce50 <ld_dword>
 800eda6:	4603      	mov	r3, r0
 800eda8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800edac:	4a0a      	ldr	r2, [pc, #40]	; (800edd8 <check_fs+0xa4>)
 800edae:	4293      	cmp	r3, r2
 800edb0:	d101      	bne.n	800edb6 <check_fs+0x82>
 800edb2:	2300      	movs	r3, #0
 800edb4:	e00c      	b.n	800edd0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	3334      	adds	r3, #52	; 0x34
 800edba:	3352      	adds	r3, #82	; 0x52
 800edbc:	4618      	mov	r0, r3
 800edbe:	f7fe f847 	bl	800ce50 <ld_dword>
 800edc2:	4603      	mov	r3, r0
 800edc4:	4a05      	ldr	r2, [pc, #20]	; (800eddc <check_fs+0xa8>)
 800edc6:	4293      	cmp	r3, r2
 800edc8:	d101      	bne.n	800edce <check_fs+0x9a>
 800edca:	2300      	movs	r3, #0
 800edcc:	e000      	b.n	800edd0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800edce:	2302      	movs	r3, #2
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	3708      	adds	r7, #8
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}
 800edd8:	00544146 	.word	0x00544146
 800eddc:	33544146 	.word	0x33544146

0800ede0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b096      	sub	sp, #88	; 0x58
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	60f8      	str	r0, [r7, #12]
 800ede8:	60b9      	str	r1, [r7, #8]
 800edea:	4613      	mov	r3, r2
 800edec:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	2200      	movs	r2, #0
 800edf2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800edf4:	68f8      	ldr	r0, [r7, #12]
 800edf6:	f7ff ff58 	bl	800ecaa <get_ldnumber>
 800edfa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800edfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	da01      	bge.n	800ee06 <find_volume+0x26>
 800ee02:	230b      	movs	r3, #11
 800ee04:	e230      	b.n	800f268 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ee06:	4aa1      	ldr	r2, [pc, #644]	; (800f08c <find_volume+0x2ac>)
 800ee08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee0e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ee10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d101      	bne.n	800ee1a <find_volume+0x3a>
 800ee16:	230c      	movs	r3, #12
 800ee18:	e226      	b.n	800f268 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ee1a:	68bb      	ldr	r3, [r7, #8]
 800ee1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee1e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ee20:	79fb      	ldrb	r3, [r7, #7]
 800ee22:	f023 0301 	bic.w	r3, r3, #1
 800ee26:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ee28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d01a      	beq.n	800ee66 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ee30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee32:	785b      	ldrb	r3, [r3, #1]
 800ee34:	4618      	mov	r0, r3
 800ee36:	f7fd ff55 	bl	800cce4 <disk_status>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ee40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee44:	f003 0301 	and.w	r3, r3, #1
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d10c      	bne.n	800ee66 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ee4c:	79fb      	ldrb	r3, [r7, #7]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d007      	beq.n	800ee62 <find_volume+0x82>
 800ee52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee56:	f003 0304 	and.w	r3, r3, #4
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d001      	beq.n	800ee62 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ee5e:	230a      	movs	r3, #10
 800ee60:	e202      	b.n	800f268 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800ee62:	2300      	movs	r3, #0
 800ee64:	e200      	b.n	800f268 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ee66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee68:	2200      	movs	r2, #0
 800ee6a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ee6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee6e:	b2da      	uxtb	r2, r3
 800ee70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee72:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ee74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee76:	785b      	ldrb	r3, [r3, #1]
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f7fd ff4d 	bl	800cd18 <disk_initialize>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ee84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee88:	f003 0301 	and.w	r3, r3, #1
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d001      	beq.n	800ee94 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ee90:	2303      	movs	r3, #3
 800ee92:	e1e9      	b.n	800f268 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ee94:	79fb      	ldrb	r3, [r7, #7]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d007      	beq.n	800eeaa <find_volume+0xca>
 800ee9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee9e:	f003 0304 	and.w	r3, r3, #4
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d001      	beq.n	800eeaa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800eea6:	230a      	movs	r3, #10
 800eea8:	e1de      	b.n	800f268 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800eeae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eeb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eeb2:	f7ff ff3f 	bl	800ed34 <check_fs>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800eebc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eec0:	2b02      	cmp	r3, #2
 800eec2:	d149      	bne.n	800ef58 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800eec4:	2300      	movs	r3, #0
 800eec6:	643b      	str	r3, [r7, #64]	; 0x40
 800eec8:	e01e      	b.n	800ef08 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800eeca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eecc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eed2:	011b      	lsls	r3, r3, #4
 800eed4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800eed8:	4413      	add	r3, r2
 800eeda:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800eedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eede:	3304      	adds	r3, #4
 800eee0:	781b      	ldrb	r3, [r3, #0]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d006      	beq.n	800eef4 <find_volume+0x114>
 800eee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eee8:	3308      	adds	r3, #8
 800eeea:	4618      	mov	r0, r3
 800eeec:	f7fd ffb0 	bl	800ce50 <ld_dword>
 800eef0:	4602      	mov	r2, r0
 800eef2:	e000      	b.n	800eef6 <find_volume+0x116>
 800eef4:	2200      	movs	r2, #0
 800eef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eef8:	009b      	lsls	r3, r3, #2
 800eefa:	3358      	adds	r3, #88	; 0x58
 800eefc:	443b      	add	r3, r7
 800eefe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ef02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef04:	3301      	adds	r3, #1
 800ef06:	643b      	str	r3, [r7, #64]	; 0x40
 800ef08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef0a:	2b03      	cmp	r3, #3
 800ef0c:	d9dd      	bls.n	800eeca <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ef0e:	2300      	movs	r3, #0
 800ef10:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ef12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d002      	beq.n	800ef1e <find_volume+0x13e>
 800ef18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef1a:	3b01      	subs	r3, #1
 800ef1c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ef1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef20:	009b      	lsls	r3, r3, #2
 800ef22:	3358      	adds	r3, #88	; 0x58
 800ef24:	443b      	add	r3, r7
 800ef26:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ef2a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ef2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d005      	beq.n	800ef3e <find_volume+0x15e>
 800ef32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ef34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ef36:	f7ff fefd 	bl	800ed34 <check_fs>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	e000      	b.n	800ef40 <find_volume+0x160>
 800ef3e:	2303      	movs	r3, #3
 800ef40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ef44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ef48:	2b01      	cmp	r3, #1
 800ef4a:	d905      	bls.n	800ef58 <find_volume+0x178>
 800ef4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef4e:	3301      	adds	r3, #1
 800ef50:	643b      	str	r3, [r7, #64]	; 0x40
 800ef52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef54:	2b03      	cmp	r3, #3
 800ef56:	d9e2      	bls.n	800ef1e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ef58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ef5c:	2b04      	cmp	r3, #4
 800ef5e:	d101      	bne.n	800ef64 <find_volume+0x184>
 800ef60:	2301      	movs	r3, #1
 800ef62:	e181      	b.n	800f268 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ef64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ef68:	2b01      	cmp	r3, #1
 800ef6a:	d901      	bls.n	800ef70 <find_volume+0x190>
 800ef6c:	230d      	movs	r3, #13
 800ef6e:	e17b      	b.n	800f268 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ef70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef72:	3334      	adds	r3, #52	; 0x34
 800ef74:	330b      	adds	r3, #11
 800ef76:	4618      	mov	r0, r3
 800ef78:	f7fd ff52 	bl	800ce20 <ld_word>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef82:	d001      	beq.n	800ef88 <find_volume+0x1a8>
 800ef84:	230d      	movs	r3, #13
 800ef86:	e16f      	b.n	800f268 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ef88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef8a:	3334      	adds	r3, #52	; 0x34
 800ef8c:	3316      	adds	r3, #22
 800ef8e:	4618      	mov	r0, r3
 800ef90:	f7fd ff46 	bl	800ce20 <ld_word>
 800ef94:	4603      	mov	r3, r0
 800ef96:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ef98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d106      	bne.n	800efac <find_volume+0x1cc>
 800ef9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efa0:	3334      	adds	r3, #52	; 0x34
 800efa2:	3324      	adds	r3, #36	; 0x24
 800efa4:	4618      	mov	r0, r3
 800efa6:	f7fd ff53 	bl	800ce50 <ld_dword>
 800efaa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800efac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800efb0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800efb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efb4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800efb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800efbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efbe:	789b      	ldrb	r3, [r3, #2]
 800efc0:	2b01      	cmp	r3, #1
 800efc2:	d005      	beq.n	800efd0 <find_volume+0x1f0>
 800efc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efc6:	789b      	ldrb	r3, [r3, #2]
 800efc8:	2b02      	cmp	r3, #2
 800efca:	d001      	beq.n	800efd0 <find_volume+0x1f0>
 800efcc:	230d      	movs	r3, #13
 800efce:	e14b      	b.n	800f268 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800efd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd2:	789b      	ldrb	r3, [r3, #2]
 800efd4:	461a      	mov	r2, r3
 800efd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efd8:	fb02 f303 	mul.w	r3, r2, r3
 800efdc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800efde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800efe4:	b29a      	uxth	r2, r3
 800efe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800efea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efec:	895b      	ldrh	r3, [r3, #10]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d008      	beq.n	800f004 <find_volume+0x224>
 800eff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eff4:	895b      	ldrh	r3, [r3, #10]
 800eff6:	461a      	mov	r2, r3
 800eff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800effa:	895b      	ldrh	r3, [r3, #10]
 800effc:	3b01      	subs	r3, #1
 800effe:	4013      	ands	r3, r2
 800f000:	2b00      	cmp	r3, #0
 800f002:	d001      	beq.n	800f008 <find_volume+0x228>
 800f004:	230d      	movs	r3, #13
 800f006:	e12f      	b.n	800f268 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f00a:	3334      	adds	r3, #52	; 0x34
 800f00c:	3311      	adds	r3, #17
 800f00e:	4618      	mov	r0, r3
 800f010:	f7fd ff06 	bl	800ce20 <ld_word>
 800f014:	4603      	mov	r3, r0
 800f016:	461a      	mov	r2, r3
 800f018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f01a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f01e:	891b      	ldrh	r3, [r3, #8]
 800f020:	f003 030f 	and.w	r3, r3, #15
 800f024:	b29b      	uxth	r3, r3
 800f026:	2b00      	cmp	r3, #0
 800f028:	d001      	beq.n	800f02e <find_volume+0x24e>
 800f02a:	230d      	movs	r3, #13
 800f02c:	e11c      	b.n	800f268 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f030:	3334      	adds	r3, #52	; 0x34
 800f032:	3313      	adds	r3, #19
 800f034:	4618      	mov	r0, r3
 800f036:	f7fd fef3 	bl	800ce20 <ld_word>
 800f03a:	4603      	mov	r3, r0
 800f03c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f03e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f040:	2b00      	cmp	r3, #0
 800f042:	d106      	bne.n	800f052 <find_volume+0x272>
 800f044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f046:	3334      	adds	r3, #52	; 0x34
 800f048:	3320      	adds	r3, #32
 800f04a:	4618      	mov	r0, r3
 800f04c:	f7fd ff00 	bl	800ce50 <ld_dword>
 800f050:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f054:	3334      	adds	r3, #52	; 0x34
 800f056:	330e      	adds	r3, #14
 800f058:	4618      	mov	r0, r3
 800f05a:	f7fd fee1 	bl	800ce20 <ld_word>
 800f05e:	4603      	mov	r3, r0
 800f060:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f062:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f064:	2b00      	cmp	r3, #0
 800f066:	d101      	bne.n	800f06c <find_volume+0x28c>
 800f068:	230d      	movs	r3, #13
 800f06a:	e0fd      	b.n	800f268 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f06c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f06e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f070:	4413      	add	r3, r2
 800f072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f074:	8912      	ldrh	r2, [r2, #8]
 800f076:	0912      	lsrs	r2, r2, #4
 800f078:	b292      	uxth	r2, r2
 800f07a:	4413      	add	r3, r2
 800f07c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f07e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f082:	429a      	cmp	r2, r3
 800f084:	d204      	bcs.n	800f090 <find_volume+0x2b0>
 800f086:	230d      	movs	r3, #13
 800f088:	e0ee      	b.n	800f268 <find_volume+0x488>
 800f08a:	bf00      	nop
 800f08c:	20002c60 	.word	0x20002c60
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f094:	1ad3      	subs	r3, r2, r3
 800f096:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f098:	8952      	ldrh	r2, [r2, #10]
 800f09a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f09e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d101      	bne.n	800f0aa <find_volume+0x2ca>
 800f0a6:	230d      	movs	r3, #13
 800f0a8:	e0de      	b.n	800f268 <find_volume+0x488>
		fmt = FS_FAT32;
 800f0aa:	2303      	movs	r3, #3
 800f0ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f0b6:	4293      	cmp	r3, r2
 800f0b8:	d802      	bhi.n	800f0c0 <find_volume+0x2e0>
 800f0ba:	2302      	movs	r3, #2
 800f0bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f0c6:	4293      	cmp	r3, r2
 800f0c8:	d802      	bhi.n	800f0d0 <find_volume+0x2f0>
 800f0ca:	2301      	movs	r3, #1
 800f0cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d2:	1c9a      	adds	r2, r3, #2
 800f0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800f0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f0dc:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f0de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f0e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0e2:	441a      	add	r2, r3
 800f0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0e6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800f0e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ec:	441a      	add	r2, r3
 800f0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f0:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800f0f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f0f6:	2b03      	cmp	r3, #3
 800f0f8:	d11e      	bne.n	800f138 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0fc:	3334      	adds	r3, #52	; 0x34
 800f0fe:	332a      	adds	r3, #42	; 0x2a
 800f100:	4618      	mov	r0, r3
 800f102:	f7fd fe8d 	bl	800ce20 <ld_word>
 800f106:	4603      	mov	r3, r0
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d001      	beq.n	800f110 <find_volume+0x330>
 800f10c:	230d      	movs	r3, #13
 800f10e:	e0ab      	b.n	800f268 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f112:	891b      	ldrh	r3, [r3, #8]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d001      	beq.n	800f11c <find_volume+0x33c>
 800f118:	230d      	movs	r3, #13
 800f11a:	e0a5      	b.n	800f268 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f11e:	3334      	adds	r3, #52	; 0x34
 800f120:	332c      	adds	r3, #44	; 0x2c
 800f122:	4618      	mov	r0, r3
 800f124:	f7fd fe94 	bl	800ce50 <ld_dword>
 800f128:	4602      	mov	r2, r0
 800f12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f12c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f130:	699b      	ldr	r3, [r3, #24]
 800f132:	009b      	lsls	r3, r3, #2
 800f134:	647b      	str	r3, [r7, #68]	; 0x44
 800f136:	e01f      	b.n	800f178 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f13a:	891b      	ldrh	r3, [r3, #8]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d101      	bne.n	800f144 <find_volume+0x364>
 800f140:	230d      	movs	r3, #13
 800f142:	e091      	b.n	800f268 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f14a:	441a      	add	r2, r3
 800f14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f14e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f150:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f154:	2b02      	cmp	r3, #2
 800f156:	d103      	bne.n	800f160 <find_volume+0x380>
 800f158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f15a:	699b      	ldr	r3, [r3, #24]
 800f15c:	005b      	lsls	r3, r3, #1
 800f15e:	e00a      	b.n	800f176 <find_volume+0x396>
 800f160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f162:	699a      	ldr	r2, [r3, #24]
 800f164:	4613      	mov	r3, r2
 800f166:	005b      	lsls	r3, r3, #1
 800f168:	4413      	add	r3, r2
 800f16a:	085a      	lsrs	r2, r3, #1
 800f16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f16e:	699b      	ldr	r3, [r3, #24]
 800f170:	f003 0301 	and.w	r3, r3, #1
 800f174:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f176:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f17a:	69da      	ldr	r2, [r3, #28]
 800f17c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f17e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800f182:	0a5b      	lsrs	r3, r3, #9
 800f184:	429a      	cmp	r2, r3
 800f186:	d201      	bcs.n	800f18c <find_volume+0x3ac>
 800f188:	230d      	movs	r3, #13
 800f18a:	e06d      	b.n	800f268 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f18e:	f04f 32ff 	mov.w	r2, #4294967295
 800f192:	615a      	str	r2, [r3, #20]
 800f194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f196:	695a      	ldr	r2, [r3, #20]
 800f198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f19a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800f19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f19e:	2280      	movs	r2, #128	; 0x80
 800f1a0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f1a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f1a6:	2b03      	cmp	r3, #3
 800f1a8:	d149      	bne.n	800f23e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ac:	3334      	adds	r3, #52	; 0x34
 800f1ae:	3330      	adds	r3, #48	; 0x30
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f7fd fe35 	bl	800ce20 <ld_word>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	2b01      	cmp	r3, #1
 800f1ba:	d140      	bne.n	800f23e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f1bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1be:	3301      	adds	r3, #1
 800f1c0:	4619      	mov	r1, r3
 800f1c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f1c4:	f7fe f8dc 	bl	800d380 <move_window>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d137      	bne.n	800f23e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800f1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1d6:	3334      	adds	r3, #52	; 0x34
 800f1d8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f7fd fe1f 	bl	800ce20 <ld_word>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	461a      	mov	r2, r3
 800f1e6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f1ea:	429a      	cmp	r2, r3
 800f1ec:	d127      	bne.n	800f23e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f0:	3334      	adds	r3, #52	; 0x34
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f7fd fe2c 	bl	800ce50 <ld_dword>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	4a1d      	ldr	r2, [pc, #116]	; (800f270 <find_volume+0x490>)
 800f1fc:	4293      	cmp	r3, r2
 800f1fe:	d11e      	bne.n	800f23e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f202:	3334      	adds	r3, #52	; 0x34
 800f204:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f208:	4618      	mov	r0, r3
 800f20a:	f7fd fe21 	bl	800ce50 <ld_dword>
 800f20e:	4603      	mov	r3, r0
 800f210:	4a18      	ldr	r2, [pc, #96]	; (800f274 <find_volume+0x494>)
 800f212:	4293      	cmp	r3, r2
 800f214:	d113      	bne.n	800f23e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f218:	3334      	adds	r3, #52	; 0x34
 800f21a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f21e:	4618      	mov	r0, r3
 800f220:	f7fd fe16 	bl	800ce50 <ld_dword>
 800f224:	4602      	mov	r2, r0
 800f226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f228:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f22c:	3334      	adds	r3, #52	; 0x34
 800f22e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f232:	4618      	mov	r0, r3
 800f234:	f7fd fe0c 	bl	800ce50 <ld_dword>
 800f238:	4602      	mov	r2, r0
 800f23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f23c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f240:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f244:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f246:	4b0c      	ldr	r3, [pc, #48]	; (800f278 <find_volume+0x498>)
 800f248:	881b      	ldrh	r3, [r3, #0]
 800f24a:	3301      	adds	r3, #1
 800f24c:	b29a      	uxth	r2, r3
 800f24e:	4b0a      	ldr	r3, [pc, #40]	; (800f278 <find_volume+0x498>)
 800f250:	801a      	strh	r2, [r3, #0]
 800f252:	4b09      	ldr	r3, [pc, #36]	; (800f278 <find_volume+0x498>)
 800f254:	881a      	ldrh	r2, [r3, #0]
 800f256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f258:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f25c:	4a07      	ldr	r2, [pc, #28]	; (800f27c <find_volume+0x49c>)
 800f25e:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f260:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f262:	f7fe f825 	bl	800d2b0 <clear_lock>
#endif
	return FR_OK;
 800f266:	2300      	movs	r3, #0
}
 800f268:	4618      	mov	r0, r3
 800f26a:	3758      	adds	r7, #88	; 0x58
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}
 800f270:	41615252 	.word	0x41615252
 800f274:	61417272 	.word	0x61417272
 800f278:	20002c64 	.word	0x20002c64
 800f27c:	20002c88 	.word	0x20002c88

0800f280 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b084      	sub	sp, #16
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
 800f288:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f28a:	2309      	movs	r3, #9
 800f28c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d01c      	beq.n	800f2ce <validate+0x4e>
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d018      	beq.n	800f2ce <validate+0x4e>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	781b      	ldrb	r3, [r3, #0]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d013      	beq.n	800f2ce <validate+0x4e>
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	889a      	ldrh	r2, [r3, #4]
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	88db      	ldrh	r3, [r3, #6]
 800f2b0:	429a      	cmp	r2, r3
 800f2b2:	d10c      	bne.n	800f2ce <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	785b      	ldrb	r3, [r3, #1]
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7fd fd12 	bl	800cce4 <disk_status>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	f003 0301 	and.w	r3, r3, #1
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d101      	bne.n	800f2ce <validate+0x4e>
			res = FR_OK;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f2ce:	7bfb      	ldrb	r3, [r7, #15]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d102      	bne.n	800f2da <validate+0x5a>
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	e000      	b.n	800f2dc <validate+0x5c>
 800f2da:	2300      	movs	r3, #0
 800f2dc:	683a      	ldr	r2, [r7, #0]
 800f2de:	6013      	str	r3, [r2, #0]
	return res;
 800f2e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3710      	adds	r7, #16
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}
	...

0800f2ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b088      	sub	sp, #32
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	60f8      	str	r0, [r7, #12]
 800f2f4:	60b9      	str	r1, [r7, #8]
 800f2f6:	4613      	mov	r3, r2
 800f2f8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f2fe:	f107 0310 	add.w	r3, r7, #16
 800f302:	4618      	mov	r0, r3
 800f304:	f7ff fcd1 	bl	800ecaa <get_ldnumber>
 800f308:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f30a:	69fb      	ldr	r3, [r7, #28]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	da01      	bge.n	800f314 <f_mount+0x28>
 800f310:	230b      	movs	r3, #11
 800f312:	e02b      	b.n	800f36c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f314:	4a17      	ldr	r2, [pc, #92]	; (800f374 <f_mount+0x88>)
 800f316:	69fb      	ldr	r3, [r7, #28]
 800f318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f31c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f31e:	69bb      	ldr	r3, [r7, #24]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d005      	beq.n	800f330 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f324:	69b8      	ldr	r0, [r7, #24]
 800f326:	f7fd ffc3 	bl	800d2b0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f32a:	69bb      	ldr	r3, [r7, #24]
 800f32c:	2200      	movs	r2, #0
 800f32e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d002      	beq.n	800f33c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	2200      	movs	r2, #0
 800f33a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f33c:	68fa      	ldr	r2, [r7, #12]
 800f33e:	490d      	ldr	r1, [pc, #52]	; (800f374 <f_mount+0x88>)
 800f340:	69fb      	ldr	r3, [r7, #28]
 800f342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d002      	beq.n	800f352 <f_mount+0x66>
 800f34c:	79fb      	ldrb	r3, [r7, #7]
 800f34e:	2b01      	cmp	r3, #1
 800f350:	d001      	beq.n	800f356 <f_mount+0x6a>
 800f352:	2300      	movs	r3, #0
 800f354:	e00a      	b.n	800f36c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f356:	f107 010c 	add.w	r1, r7, #12
 800f35a:	f107 0308 	add.w	r3, r7, #8
 800f35e:	2200      	movs	r2, #0
 800f360:	4618      	mov	r0, r3
 800f362:	f7ff fd3d 	bl	800ede0 <find_volume>
 800f366:	4603      	mov	r3, r0
 800f368:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f36a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	3720      	adds	r7, #32
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}
 800f374:	20002c60 	.word	0x20002c60

0800f378 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b09a      	sub	sp, #104	; 0x68
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	60f8      	str	r0, [r7, #12]
 800f380:	60b9      	str	r1, [r7, #8]
 800f382:	4613      	mov	r3, r2
 800f384:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d101      	bne.n	800f390 <f_open+0x18>
 800f38c:	2309      	movs	r3, #9
 800f38e:	e1ad      	b.n	800f6ec <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f390:	79fb      	ldrb	r3, [r7, #7]
 800f392:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f396:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f398:	79fa      	ldrb	r2, [r7, #7]
 800f39a:	f107 0114 	add.w	r1, r7, #20
 800f39e:	f107 0308 	add.w	r3, r7, #8
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f7ff fd1c 	bl	800ede0 <find_volume>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800f3ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	f040 8191 	bne.w	800f6da <f_open+0x362>
		dj.obj.fs = fs;
 800f3b8:	697b      	ldr	r3, [r7, #20]
 800f3ba:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f3bc:	68ba      	ldr	r2, [r7, #8]
 800f3be:	f107 0318 	add.w	r3, r7, #24
 800f3c2:	4611      	mov	r1, r2
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f7ff fbff 	bl	800ebc8 <follow_path>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f3d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d11a      	bne.n	800f40e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f3d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f3dc:	b25b      	sxtb	r3, r3
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	da03      	bge.n	800f3ea <f_open+0x72>
				res = FR_INVALID_NAME;
 800f3e2:	2306      	movs	r3, #6
 800f3e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f3e8:	e011      	b.n	800f40e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f3ea:	79fb      	ldrb	r3, [r7, #7]
 800f3ec:	f023 0301 	bic.w	r3, r3, #1
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	bf14      	ite	ne
 800f3f4:	2301      	movne	r3, #1
 800f3f6:	2300      	moveq	r3, #0
 800f3f8:	b2db      	uxtb	r3, r3
 800f3fa:	461a      	mov	r2, r3
 800f3fc:	f107 0318 	add.w	r3, r7, #24
 800f400:	4611      	mov	r1, r2
 800f402:	4618      	mov	r0, r3
 800f404:	f7fd fe0c 	bl	800d020 <chk_lock>
 800f408:	4603      	mov	r3, r0
 800f40a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f40e:	79fb      	ldrb	r3, [r7, #7]
 800f410:	f003 031c 	and.w	r3, r3, #28
 800f414:	2b00      	cmp	r3, #0
 800f416:	d07f      	beq.n	800f518 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f418:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d017      	beq.n	800f450 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f420:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f424:	2b04      	cmp	r3, #4
 800f426:	d10e      	bne.n	800f446 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f428:	f7fd fe56 	bl	800d0d8 <enq_lock>
 800f42c:	4603      	mov	r3, r0
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d006      	beq.n	800f440 <f_open+0xc8>
 800f432:	f107 0318 	add.w	r3, r7, #24
 800f436:	4618      	mov	r0, r3
 800f438:	f7ff f838 	bl	800e4ac <dir_register>
 800f43c:	4603      	mov	r3, r0
 800f43e:	e000      	b.n	800f442 <f_open+0xca>
 800f440:	2312      	movs	r3, #18
 800f442:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f446:	79fb      	ldrb	r3, [r7, #7]
 800f448:	f043 0308 	orr.w	r3, r3, #8
 800f44c:	71fb      	strb	r3, [r7, #7]
 800f44e:	e010      	b.n	800f472 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f450:	7fbb      	ldrb	r3, [r7, #30]
 800f452:	f003 0311 	and.w	r3, r3, #17
 800f456:	2b00      	cmp	r3, #0
 800f458:	d003      	beq.n	800f462 <f_open+0xea>
					res = FR_DENIED;
 800f45a:	2307      	movs	r3, #7
 800f45c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f460:	e007      	b.n	800f472 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f462:	79fb      	ldrb	r3, [r7, #7]
 800f464:	f003 0304 	and.w	r3, r3, #4
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d002      	beq.n	800f472 <f_open+0xfa>
 800f46c:	2308      	movs	r3, #8
 800f46e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f472:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f476:	2b00      	cmp	r3, #0
 800f478:	d168      	bne.n	800f54c <f_open+0x1d4>
 800f47a:	79fb      	ldrb	r3, [r7, #7]
 800f47c:	f003 0308 	and.w	r3, r3, #8
 800f480:	2b00      	cmp	r3, #0
 800f482:	d063      	beq.n	800f54c <f_open+0x1d4>
				dw = GET_FATTIME();
 800f484:	f7fa fa10 	bl	80098a8 <get_fattime>
 800f488:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f48c:	330e      	adds	r3, #14
 800f48e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f490:	4618      	mov	r0, r3
 800f492:	f7fd fd1b 	bl	800cecc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f498:	3316      	adds	r3, #22
 800f49a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f49c:	4618      	mov	r0, r3
 800f49e:	f7fd fd15 	bl	800cecc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4a4:	330b      	adds	r3, #11
 800f4a6:	2220      	movs	r2, #32
 800f4a8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f4ae:	4611      	mov	r1, r2
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	f7fe fc6a 	bl	800dd8a <ld_clust>
 800f4b6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f4b8:	697b      	ldr	r3, [r7, #20]
 800f4ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f4bc:	2200      	movs	r2, #0
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f7fe fc82 	bl	800ddc8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c6:	331c      	adds	r3, #28
 800f4c8:	2100      	movs	r1, #0
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f7fd fcfe 	bl	800cecc <st_dword>
					fs->wflag = 1;
 800f4d0:	697b      	ldr	r3, [r7, #20]
 800f4d2:	2201      	movs	r2, #1
 800f4d4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f4d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d037      	beq.n	800f54c <f_open+0x1d4>
						dw = fs->winsect;
 800f4dc:	697b      	ldr	r3, [r7, #20]
 800f4de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4e0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800f4e2:	f107 0318 	add.w	r3, r7, #24
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f7fe f995 	bl	800d81a <remove_chain>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800f4f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d126      	bne.n	800f54c <f_open+0x1d4>
							res = move_window(fs, dw);
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f502:	4618      	mov	r0, r3
 800f504:	f7fd ff3c 	bl	800d380 <move_window>
 800f508:	4603      	mov	r3, r0
 800f50a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f50e:	697b      	ldr	r3, [r7, #20]
 800f510:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f512:	3a01      	subs	r2, #1
 800f514:	611a      	str	r2, [r3, #16]
 800f516:	e019      	b.n	800f54c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f518:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d115      	bne.n	800f54c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f520:	7fbb      	ldrb	r3, [r7, #30]
 800f522:	f003 0310 	and.w	r3, r3, #16
 800f526:	2b00      	cmp	r3, #0
 800f528:	d003      	beq.n	800f532 <f_open+0x1ba>
					res = FR_NO_FILE;
 800f52a:	2304      	movs	r3, #4
 800f52c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f530:	e00c      	b.n	800f54c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f532:	79fb      	ldrb	r3, [r7, #7]
 800f534:	f003 0302 	and.w	r3, r3, #2
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d007      	beq.n	800f54c <f_open+0x1d4>
 800f53c:	7fbb      	ldrb	r3, [r7, #30]
 800f53e:	f003 0301 	and.w	r3, r3, #1
 800f542:	2b00      	cmp	r3, #0
 800f544:	d002      	beq.n	800f54c <f_open+0x1d4>
						res = FR_DENIED;
 800f546:	2307      	movs	r3, #7
 800f548:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800f54c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f550:	2b00      	cmp	r3, #0
 800f552:	d128      	bne.n	800f5a6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f554:	79fb      	ldrb	r3, [r7, #7]
 800f556:	f003 0308 	and.w	r3, r3, #8
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d003      	beq.n	800f566 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f55e:	79fb      	ldrb	r3, [r7, #7]
 800f560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f564:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f566:	697b      	ldr	r3, [r7, #20]
 800f568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f56e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f574:	79fb      	ldrb	r3, [r7, #7]
 800f576:	f023 0301 	bic.w	r3, r3, #1
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	bf14      	ite	ne
 800f57e:	2301      	movne	r3, #1
 800f580:	2300      	moveq	r3, #0
 800f582:	b2db      	uxtb	r3, r3
 800f584:	461a      	mov	r2, r3
 800f586:	f107 0318 	add.w	r3, r7, #24
 800f58a:	4611      	mov	r1, r2
 800f58c:	4618      	mov	r0, r3
 800f58e:	f7fd fdc5 	bl	800d11c <inc_lock>
 800f592:	4602      	mov	r2, r0
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	691b      	ldr	r3, [r3, #16]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d102      	bne.n	800f5a6 <f_open+0x22e>
 800f5a0:	2302      	movs	r3, #2
 800f5a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f5a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	f040 8095 	bne.w	800f6da <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f5b0:	697b      	ldr	r3, [r7, #20]
 800f5b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f5b4:	4611      	mov	r1, r2
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f7fe fbe7 	bl	800dd8a <ld_clust>
 800f5bc:	4602      	mov	r2, r0
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5c4:	331c      	adds	r3, #28
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f7fd fc42 	bl	800ce50 <ld_dword>
 800f5cc:	4602      	mov	r2, r0
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f5d8:	697a      	ldr	r2, [r7, #20]
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	88da      	ldrh	r2, [r3, #6]
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	79fa      	ldrb	r2, [r7, #7]
 800f5ea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	3330      	adds	r3, #48	; 0x30
 800f602:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f606:	2100      	movs	r1, #0
 800f608:	4618      	mov	r0, r3
 800f60a:	f7fd fcac 	bl	800cf66 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f60e:	79fb      	ldrb	r3, [r7, #7]
 800f610:	f003 0320 	and.w	r3, r3, #32
 800f614:	2b00      	cmp	r3, #0
 800f616:	d060      	beq.n	800f6da <f_open+0x362>
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	68db      	ldr	r3, [r3, #12]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d05c      	beq.n	800f6da <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	68da      	ldr	r2, [r3, #12]
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f628:	697b      	ldr	r3, [r7, #20]
 800f62a:	895b      	ldrh	r3, [r3, #10]
 800f62c:	025b      	lsls	r3, r3, #9
 800f62e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	689b      	ldr	r3, [r3, #8]
 800f634:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	68db      	ldr	r3, [r3, #12]
 800f63a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f63c:	e016      	b.n	800f66c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f642:	4618      	mov	r0, r3
 800f644:	f7fd ff57 	bl	800d4f6 <get_fat>
 800f648:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f64a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f64c:	2b01      	cmp	r3, #1
 800f64e:	d802      	bhi.n	800f656 <f_open+0x2de>
 800f650:	2302      	movs	r3, #2
 800f652:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f65c:	d102      	bne.n	800f664 <f_open+0x2ec>
 800f65e:	2301      	movs	r3, #1
 800f660:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f664:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f668:	1ad3      	subs	r3, r2, r3
 800f66a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f66c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f670:	2b00      	cmp	r3, #0
 800f672:	d103      	bne.n	800f67c <f_open+0x304>
 800f674:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f678:	429a      	cmp	r2, r3
 800f67a:	d8e0      	bhi.n	800f63e <f_open+0x2c6>
				}
				fp->clust = clst;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f680:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f682:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f686:	2b00      	cmp	r3, #0
 800f688:	d127      	bne.n	800f6da <f_open+0x362>
 800f68a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f68c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f690:	2b00      	cmp	r3, #0
 800f692:	d022      	beq.n	800f6da <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f694:	697b      	ldr	r3, [r7, #20]
 800f696:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f698:	4618      	mov	r0, r3
 800f69a:	f7fd ff0d 	bl	800d4b8 <clust2sect>
 800f69e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f6a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d103      	bne.n	800f6ae <f_open+0x336>
						res = FR_INT_ERR;
 800f6a6:	2302      	movs	r3, #2
 800f6a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f6ac:	e015      	b.n	800f6da <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f6ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6b0:	0a5a      	lsrs	r2, r3, #9
 800f6b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6b4:	441a      	add	r2, r3
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f6ba:	697b      	ldr	r3, [r7, #20]
 800f6bc:	7858      	ldrb	r0, [r3, #1]
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	6a1a      	ldr	r2, [r3, #32]
 800f6c8:	2301      	movs	r3, #1
 800f6ca:	f7fd fb4b 	bl	800cd64 <disk_read>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d002      	beq.n	800f6da <f_open+0x362>
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f6da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d002      	beq.n	800f6e8 <f_open+0x370>
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f6e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	3768      	adds	r7, #104	; 0x68
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bd80      	pop	{r7, pc}

0800f6f4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b08e      	sub	sp, #56	; 0x38
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	60f8      	str	r0, [r7, #12]
 800f6fc:	60b9      	str	r1, [r7, #8]
 800f6fe:	607a      	str	r2, [r7, #4]
 800f700:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800f702:	68bb      	ldr	r3, [r7, #8]
 800f704:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	2200      	movs	r2, #0
 800f70a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	f107 0214 	add.w	r2, r7, #20
 800f712:	4611      	mov	r1, r2
 800f714:	4618      	mov	r0, r3
 800f716:	f7ff fdb3 	bl	800f280 <validate>
 800f71a:	4603      	mov	r3, r0
 800f71c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f720:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f724:	2b00      	cmp	r3, #0
 800f726:	d107      	bne.n	800f738 <f_read+0x44>
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	7d5b      	ldrb	r3, [r3, #21]
 800f72c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f730:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f734:	2b00      	cmp	r3, #0
 800f736:	d002      	beq.n	800f73e <f_read+0x4a>
 800f738:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f73c:	e115      	b.n	800f96a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	7d1b      	ldrb	r3, [r3, #20]
 800f742:	f003 0301 	and.w	r3, r3, #1
 800f746:	2b00      	cmp	r3, #0
 800f748:	d101      	bne.n	800f74e <f_read+0x5a>
 800f74a:	2307      	movs	r3, #7
 800f74c:	e10d      	b.n	800f96a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	68da      	ldr	r2, [r3, #12]
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	699b      	ldr	r3, [r3, #24]
 800f756:	1ad3      	subs	r3, r2, r3
 800f758:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800f75a:	687a      	ldr	r2, [r7, #4]
 800f75c:	6a3b      	ldr	r3, [r7, #32]
 800f75e:	429a      	cmp	r2, r3
 800f760:	f240 80fe 	bls.w	800f960 <f_read+0x26c>
 800f764:	6a3b      	ldr	r3, [r7, #32]
 800f766:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800f768:	e0fa      	b.n	800f960 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	699b      	ldr	r3, [r3, #24]
 800f76e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f772:	2b00      	cmp	r3, #0
 800f774:	f040 80c6 	bne.w	800f904 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	699b      	ldr	r3, [r3, #24]
 800f77c:	0a5b      	lsrs	r3, r3, #9
 800f77e:	697a      	ldr	r2, [r7, #20]
 800f780:	8952      	ldrh	r2, [r2, #10]
 800f782:	3a01      	subs	r2, #1
 800f784:	4013      	ands	r3, r2
 800f786:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800f788:	69fb      	ldr	r3, [r7, #28]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d12f      	bne.n	800f7ee <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	699b      	ldr	r3, [r3, #24]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d103      	bne.n	800f79e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	689b      	ldr	r3, [r3, #8]
 800f79a:	633b      	str	r3, [r7, #48]	; 0x30
 800f79c:	e013      	b.n	800f7c6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d007      	beq.n	800f7b6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	699b      	ldr	r3, [r3, #24]
 800f7aa:	4619      	mov	r1, r3
 800f7ac:	68f8      	ldr	r0, [r7, #12]
 800f7ae:	f7fe f931 	bl	800da14 <clmt_clust>
 800f7b2:	6338      	str	r0, [r7, #48]	; 0x30
 800f7b4:	e007      	b.n	800f7c6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f7b6:	68fa      	ldr	r2, [r7, #12]
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	69db      	ldr	r3, [r3, #28]
 800f7bc:	4619      	mov	r1, r3
 800f7be:	4610      	mov	r0, r2
 800f7c0:	f7fd fe99 	bl	800d4f6 <get_fat>
 800f7c4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c8:	2b01      	cmp	r3, #1
 800f7ca:	d804      	bhi.n	800f7d6 <f_read+0xe2>
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	2202      	movs	r2, #2
 800f7d0:	755a      	strb	r2, [r3, #21]
 800f7d2:	2302      	movs	r3, #2
 800f7d4:	e0c9      	b.n	800f96a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7dc:	d104      	bne.n	800f7e8 <f_read+0xf4>
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	2201      	movs	r2, #1
 800f7e2:	755a      	strb	r2, [r3, #21]
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	e0c0      	b.n	800f96a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7ec:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f7ee:	697a      	ldr	r2, [r7, #20]
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	69db      	ldr	r3, [r3, #28]
 800f7f4:	4619      	mov	r1, r3
 800f7f6:	4610      	mov	r0, r2
 800f7f8:	f7fd fe5e 	bl	800d4b8 <clust2sect>
 800f7fc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f7fe:	69bb      	ldr	r3, [r7, #24]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d104      	bne.n	800f80e <f_read+0x11a>
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	2202      	movs	r2, #2
 800f808:	755a      	strb	r2, [r3, #21]
 800f80a:	2302      	movs	r3, #2
 800f80c:	e0ad      	b.n	800f96a <f_read+0x276>
			sect += csect;
 800f80e:	69ba      	ldr	r2, [r7, #24]
 800f810:	69fb      	ldr	r3, [r7, #28]
 800f812:	4413      	add	r3, r2
 800f814:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	0a5b      	lsrs	r3, r3, #9
 800f81a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d039      	beq.n	800f896 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f822:	69fa      	ldr	r2, [r7, #28]
 800f824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f826:	4413      	add	r3, r2
 800f828:	697a      	ldr	r2, [r7, #20]
 800f82a:	8952      	ldrh	r2, [r2, #10]
 800f82c:	4293      	cmp	r3, r2
 800f82e:	d905      	bls.n	800f83c <f_read+0x148>
					cc = fs->csize - csect;
 800f830:	697b      	ldr	r3, [r7, #20]
 800f832:	895b      	ldrh	r3, [r3, #10]
 800f834:	461a      	mov	r2, r3
 800f836:	69fb      	ldr	r3, [r7, #28]
 800f838:	1ad3      	subs	r3, r2, r3
 800f83a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f83c:	697b      	ldr	r3, [r7, #20]
 800f83e:	7858      	ldrb	r0, [r3, #1]
 800f840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f842:	69ba      	ldr	r2, [r7, #24]
 800f844:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f846:	f7fd fa8d 	bl	800cd64 <disk_read>
 800f84a:	4603      	mov	r3, r0
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d004      	beq.n	800f85a <f_read+0x166>
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	2201      	movs	r2, #1
 800f854:	755a      	strb	r2, [r3, #21]
 800f856:	2301      	movs	r3, #1
 800f858:	e087      	b.n	800f96a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	7d1b      	ldrb	r3, [r3, #20]
 800f85e:	b25b      	sxtb	r3, r3
 800f860:	2b00      	cmp	r3, #0
 800f862:	da14      	bge.n	800f88e <f_read+0x19a>
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	6a1a      	ldr	r2, [r3, #32]
 800f868:	69bb      	ldr	r3, [r7, #24]
 800f86a:	1ad3      	subs	r3, r2, r3
 800f86c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f86e:	429a      	cmp	r2, r3
 800f870:	d90d      	bls.n	800f88e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	6a1a      	ldr	r2, [r3, #32]
 800f876:	69bb      	ldr	r3, [r7, #24]
 800f878:	1ad3      	subs	r3, r2, r3
 800f87a:	025b      	lsls	r3, r3, #9
 800f87c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f87e:	18d0      	adds	r0, r2, r3
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	3330      	adds	r3, #48	; 0x30
 800f884:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f888:	4619      	mov	r1, r3
 800f88a:	f7fd fb4b 	bl	800cf24 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f890:	025b      	lsls	r3, r3, #9
 800f892:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800f894:	e050      	b.n	800f938 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	6a1b      	ldr	r3, [r3, #32]
 800f89a:	69ba      	ldr	r2, [r7, #24]
 800f89c:	429a      	cmp	r2, r3
 800f89e:	d02e      	beq.n	800f8fe <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	7d1b      	ldrb	r3, [r3, #20]
 800f8a4:	b25b      	sxtb	r3, r3
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	da18      	bge.n	800f8dc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f8aa:	697b      	ldr	r3, [r7, #20]
 800f8ac:	7858      	ldrb	r0, [r3, #1]
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	6a1a      	ldr	r2, [r3, #32]
 800f8b8:	2301      	movs	r3, #1
 800f8ba:	f7fd fa73 	bl	800cda4 <disk_write>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d004      	beq.n	800f8ce <f_read+0x1da>
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	2201      	movs	r2, #1
 800f8c8:	755a      	strb	r2, [r3, #21]
 800f8ca:	2301      	movs	r3, #1
 800f8cc:	e04d      	b.n	800f96a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	7d1b      	ldrb	r3, [r3, #20]
 800f8d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f8d6:	b2da      	uxtb	r2, r3
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	7858      	ldrb	r0, [r3, #1]
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f8e6:	2301      	movs	r3, #1
 800f8e8:	69ba      	ldr	r2, [r7, #24]
 800f8ea:	f7fd fa3b 	bl	800cd64 <disk_read>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d004      	beq.n	800f8fe <f_read+0x20a>
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	2201      	movs	r2, #1
 800f8f8:	755a      	strb	r2, [r3, #21]
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	e035      	b.n	800f96a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	69ba      	ldr	r2, [r7, #24]
 800f902:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	699b      	ldr	r3, [r3, #24]
 800f908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f90c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f910:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	429a      	cmp	r2, r3
 800f918:	d901      	bls.n	800f91e <f_read+0x22a>
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	699b      	ldr	r3, [r3, #24]
 800f928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f92c:	4413      	add	r3, r2
 800f92e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f930:	4619      	mov	r1, r3
 800f932:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f934:	f7fd faf6 	bl	800cf24 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f93c:	4413      	add	r3, r2
 800f93e:	627b      	str	r3, [r7, #36]	; 0x24
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	699a      	ldr	r2, [r3, #24]
 800f944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f946:	441a      	add	r2, r3
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	619a      	str	r2, [r3, #24]
 800f94c:	683b      	ldr	r3, [r7, #0]
 800f94e:	681a      	ldr	r2, [r3, #0]
 800f950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f952:	441a      	add	r2, r3
 800f954:	683b      	ldr	r3, [r7, #0]
 800f956:	601a      	str	r2, [r3, #0]
 800f958:	687a      	ldr	r2, [r7, #4]
 800f95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f95c:	1ad3      	subs	r3, r2, r3
 800f95e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2b00      	cmp	r3, #0
 800f964:	f47f af01 	bne.w	800f76a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800f968:	2300      	movs	r3, #0
}
 800f96a:	4618      	mov	r0, r3
 800f96c:	3738      	adds	r7, #56	; 0x38
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}

0800f972 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f972:	b580      	push	{r7, lr}
 800f974:	b086      	sub	sp, #24
 800f976:	af00      	add	r7, sp, #0
 800f978:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f107 0208 	add.w	r2, r7, #8
 800f980:	4611      	mov	r1, r2
 800f982:	4618      	mov	r0, r3
 800f984:	f7ff fc7c 	bl	800f280 <validate>
 800f988:	4603      	mov	r3, r0
 800f98a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f98c:	7dfb      	ldrb	r3, [r7, #23]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d168      	bne.n	800fa64 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	7d1b      	ldrb	r3, [r3, #20]
 800f996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d062      	beq.n	800fa64 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	7d1b      	ldrb	r3, [r3, #20]
 800f9a2:	b25b      	sxtb	r3, r3
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	da15      	bge.n	800f9d4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	7858      	ldrb	r0, [r3, #1]
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6a1a      	ldr	r2, [r3, #32]
 800f9b6:	2301      	movs	r3, #1
 800f9b8:	f7fd f9f4 	bl	800cda4 <disk_write>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d001      	beq.n	800f9c6 <f_sync+0x54>
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	e04f      	b.n	800fa66 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	7d1b      	ldrb	r3, [r3, #20]
 800f9ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f9ce:	b2da      	uxtb	r2, r3
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f9d4:	f7f9 ff68 	bl	80098a8 <get_fattime>
 800f9d8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f9da:	68ba      	ldr	r2, [r7, #8]
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9e0:	4619      	mov	r1, r3
 800f9e2:	4610      	mov	r0, r2
 800f9e4:	f7fd fccc 	bl	800d380 <move_window>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f9ec:	7dfb      	ldrb	r3, [r7, #23]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d138      	bne.n	800fa64 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9f6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	330b      	adds	r3, #11
 800f9fc:	781a      	ldrb	r2, [r3, #0]
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	330b      	adds	r3, #11
 800fa02:	f042 0220 	orr.w	r2, r2, #32
 800fa06:	b2d2      	uxtb	r2, r2
 800fa08:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	6818      	ldr	r0, [r3, #0]
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	689b      	ldr	r3, [r3, #8]
 800fa12:	461a      	mov	r2, r3
 800fa14:	68f9      	ldr	r1, [r7, #12]
 800fa16:	f7fe f9d7 	bl	800ddc8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	f103 021c 	add.w	r2, r3, #28
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	68db      	ldr	r3, [r3, #12]
 800fa24:	4619      	mov	r1, r3
 800fa26:	4610      	mov	r0, r2
 800fa28:	f7fd fa50 	bl	800cecc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	3316      	adds	r3, #22
 800fa30:	6939      	ldr	r1, [r7, #16]
 800fa32:	4618      	mov	r0, r3
 800fa34:	f7fd fa4a 	bl	800cecc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	3312      	adds	r3, #18
 800fa3c:	2100      	movs	r1, #0
 800fa3e:	4618      	mov	r0, r3
 800fa40:	f7fd fa29 	bl	800ce96 <st_word>
					fs->wflag = 1;
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	2201      	movs	r2, #1
 800fa48:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fa4a:	68bb      	ldr	r3, [r7, #8]
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	f7fd fcc5 	bl	800d3dc <sync_fs>
 800fa52:	4603      	mov	r3, r0
 800fa54:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	7d1b      	ldrb	r3, [r3, #20]
 800fa5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa5e:	b2da      	uxtb	r2, r3
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800fa64:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	3718      	adds	r7, #24
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}

0800fa6e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800fa6e:	b580      	push	{r7, lr}
 800fa70:	b084      	sub	sp, #16
 800fa72:	af00      	add	r7, sp, #0
 800fa74:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fa76:	6878      	ldr	r0, [r7, #4]
 800fa78:	f7ff ff7b 	bl	800f972 <f_sync>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800fa80:	7bfb      	ldrb	r3, [r7, #15]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d118      	bne.n	800fab8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	f107 0208 	add.w	r2, r7, #8
 800fa8c:	4611      	mov	r1, r2
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f7ff fbf6 	bl	800f280 <validate>
 800fa94:	4603      	mov	r3, r0
 800fa96:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fa98:	7bfb      	ldrb	r3, [r7, #15]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d10c      	bne.n	800fab8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	691b      	ldr	r3, [r3, #16]
 800faa2:	4618      	mov	r0, r3
 800faa4:	f7fd fbc8 	bl	800d238 <dec_lock>
 800faa8:	4603      	mov	r3, r0
 800faaa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800faac:	7bfb      	ldrb	r3, [r7, #15]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d102      	bne.n	800fab8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	2200      	movs	r2, #0
 800fab6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800fab8:	7bfb      	ldrb	r3, [r7, #15]
}
 800faba:	4618      	mov	r0, r3
 800fabc:	3710      	adds	r7, #16
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}

0800fac2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800fac2:	b580      	push	{r7, lr}
 800fac4:	b090      	sub	sp, #64	; 0x40
 800fac6:	af00      	add	r7, sp, #0
 800fac8:	6078      	str	r0, [r7, #4]
 800faca:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f107 0208 	add.w	r2, r7, #8
 800fad2:	4611      	mov	r1, r2
 800fad4:	4618      	mov	r0, r3
 800fad6:	f7ff fbd3 	bl	800f280 <validate>
 800fada:	4603      	mov	r3, r0
 800fadc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800fae0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d103      	bne.n	800faf0 <f_lseek+0x2e>
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	7d5b      	ldrb	r3, [r3, #21]
 800faec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800faf0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d002      	beq.n	800fafe <f_lseek+0x3c>
 800faf8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fafc:	e1e6      	b.n	800fecc <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	f000 80d1 	beq.w	800fcaa <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb0e:	d15a      	bne.n	800fbc6 <f_lseek+0x104>
			tbl = fp->cltbl;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb14:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800fb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb18:	1d1a      	adds	r2, r3, #4
 800fb1a:	627a      	str	r2, [r7, #36]	; 0x24
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	617b      	str	r3, [r7, #20]
 800fb20:	2302      	movs	r3, #2
 800fb22:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	689b      	ldr	r3, [r3, #8]
 800fb28:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800fb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d03a      	beq.n	800fba6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800fb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb32:	613b      	str	r3, [r7, #16]
 800fb34:	2300      	movs	r3, #0
 800fb36:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb3a:	3302      	adds	r3, #2
 800fb3c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800fb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb40:	60fb      	str	r3, [r7, #12]
 800fb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb44:	3301      	adds	r3, #1
 800fb46:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	f7fd fcd2 	bl	800d4f6 <get_fat>
 800fb52:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800fb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb56:	2b01      	cmp	r3, #1
 800fb58:	d804      	bhi.n	800fb64 <f_lseek+0xa2>
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	2202      	movs	r2, #2
 800fb5e:	755a      	strb	r2, [r3, #21]
 800fb60:	2302      	movs	r3, #2
 800fb62:	e1b3      	b.n	800fecc <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fb64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb6a:	d104      	bne.n	800fb76 <f_lseek+0xb4>
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2201      	movs	r2, #1
 800fb70:	755a      	strb	r2, [r3, #21]
 800fb72:	2301      	movs	r3, #1
 800fb74:	e1aa      	b.n	800fecc <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	3301      	adds	r3, #1
 800fb7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d0de      	beq.n	800fb3e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800fb80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb82:	697b      	ldr	r3, [r7, #20]
 800fb84:	429a      	cmp	r2, r3
 800fb86:	d809      	bhi.n	800fb9c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800fb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb8a:	1d1a      	adds	r2, r3, #4
 800fb8c:	627a      	str	r2, [r7, #36]	; 0x24
 800fb8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb90:	601a      	str	r2, [r3, #0]
 800fb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb94:	1d1a      	adds	r2, r3, #4
 800fb96:	627a      	str	r2, [r7, #36]	; 0x24
 800fb98:	693a      	ldr	r2, [r7, #16]
 800fb9a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800fb9c:	68bb      	ldr	r3, [r7, #8]
 800fb9e:	699b      	ldr	r3, [r3, #24]
 800fba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fba2:	429a      	cmp	r2, r3
 800fba4:	d3c4      	bcc.n	800fb30 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbac:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800fbae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbb0:	697b      	ldr	r3, [r7, #20]
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	d803      	bhi.n	800fbbe <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800fbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb8:	2200      	movs	r2, #0
 800fbba:	601a      	str	r2, [r3, #0]
 800fbbc:	e184      	b.n	800fec8 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800fbbe:	2311      	movs	r3, #17
 800fbc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fbc4:	e180      	b.n	800fec8 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	68db      	ldr	r3, [r3, #12]
 800fbca:	683a      	ldr	r2, [r7, #0]
 800fbcc:	429a      	cmp	r2, r3
 800fbce:	d902      	bls.n	800fbd6 <f_lseek+0x114>
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	68db      	ldr	r3, [r3, #12]
 800fbd4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	683a      	ldr	r2, [r7, #0]
 800fbda:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	f000 8172 	beq.w	800fec8 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	3b01      	subs	r3, #1
 800fbe8:	4619      	mov	r1, r3
 800fbea:	6878      	ldr	r0, [r7, #4]
 800fbec:	f7fd ff12 	bl	800da14 <clmt_clust>
 800fbf0:	4602      	mov	r2, r0
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800fbf6:	68ba      	ldr	r2, [r7, #8]
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	69db      	ldr	r3, [r3, #28]
 800fbfc:	4619      	mov	r1, r3
 800fbfe:	4610      	mov	r0, r2
 800fc00:	f7fd fc5a 	bl	800d4b8 <clust2sect>
 800fc04:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800fc06:	69bb      	ldr	r3, [r7, #24]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d104      	bne.n	800fc16 <f_lseek+0x154>
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2202      	movs	r2, #2
 800fc10:	755a      	strb	r2, [r3, #21]
 800fc12:	2302      	movs	r3, #2
 800fc14:	e15a      	b.n	800fecc <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	3b01      	subs	r3, #1
 800fc1a:	0a5b      	lsrs	r3, r3, #9
 800fc1c:	68ba      	ldr	r2, [r7, #8]
 800fc1e:	8952      	ldrh	r2, [r2, #10]
 800fc20:	3a01      	subs	r2, #1
 800fc22:	4013      	ands	r3, r2
 800fc24:	69ba      	ldr	r2, [r7, #24]
 800fc26:	4413      	add	r3, r2
 800fc28:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	699b      	ldr	r3, [r3, #24]
 800fc2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	f000 8148 	beq.w	800fec8 <f_lseek+0x406>
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	6a1b      	ldr	r3, [r3, #32]
 800fc3c:	69ba      	ldr	r2, [r7, #24]
 800fc3e:	429a      	cmp	r2, r3
 800fc40:	f000 8142 	beq.w	800fec8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	7d1b      	ldrb	r3, [r3, #20]
 800fc48:	b25b      	sxtb	r3, r3
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	da18      	bge.n	800fc80 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fc4e:	68bb      	ldr	r3, [r7, #8]
 800fc50:	7858      	ldrb	r0, [r3, #1]
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	6a1a      	ldr	r2, [r3, #32]
 800fc5c:	2301      	movs	r3, #1
 800fc5e:	f7fd f8a1 	bl	800cda4 <disk_write>
 800fc62:	4603      	mov	r3, r0
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d004      	beq.n	800fc72 <f_lseek+0x1b0>
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	2201      	movs	r2, #1
 800fc6c:	755a      	strb	r2, [r3, #21]
 800fc6e:	2301      	movs	r3, #1
 800fc70:	e12c      	b.n	800fecc <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	7d1b      	ldrb	r3, [r3, #20]
 800fc76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc7a:	b2da      	uxtb	r2, r3
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	7858      	ldrb	r0, [r3, #1]
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	69ba      	ldr	r2, [r7, #24]
 800fc8e:	f7fd f869 	bl	800cd64 <disk_read>
 800fc92:	4603      	mov	r3, r0
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d004      	beq.n	800fca2 <f_lseek+0x1e0>
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2201      	movs	r2, #1
 800fc9c:	755a      	strb	r2, [r3, #21]
 800fc9e:	2301      	movs	r3, #1
 800fca0:	e114      	b.n	800fecc <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	69ba      	ldr	r2, [r7, #24]
 800fca6:	621a      	str	r2, [r3, #32]
 800fca8:	e10e      	b.n	800fec8 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	68db      	ldr	r3, [r3, #12]
 800fcae:	683a      	ldr	r2, [r7, #0]
 800fcb0:	429a      	cmp	r2, r3
 800fcb2:	d908      	bls.n	800fcc6 <f_lseek+0x204>
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	7d1b      	ldrb	r3, [r3, #20]
 800fcb8:	f003 0302 	and.w	r3, r3, #2
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d102      	bne.n	800fcc6 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	68db      	ldr	r3, [r3, #12]
 800fcc4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	699b      	ldr	r3, [r3, #24]
 800fcca:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800fccc:	2300      	movs	r3, #0
 800fcce:	637b      	str	r3, [r7, #52]	; 0x34
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fcd4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	f000 80a7 	beq.w	800fe2c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	895b      	ldrh	r3, [r3, #10]
 800fce2:	025b      	lsls	r3, r3, #9
 800fce4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800fce6:	6a3b      	ldr	r3, [r7, #32]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d01b      	beq.n	800fd24 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	1e5a      	subs	r2, r3, #1
 800fcf0:	69fb      	ldr	r3, [r7, #28]
 800fcf2:	fbb2 f2f3 	udiv	r2, r2, r3
 800fcf6:	6a3b      	ldr	r3, [r7, #32]
 800fcf8:	1e59      	subs	r1, r3, #1
 800fcfa:	69fb      	ldr	r3, [r7, #28]
 800fcfc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d30f      	bcc.n	800fd24 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800fd04:	6a3b      	ldr	r3, [r7, #32]
 800fd06:	1e5a      	subs	r2, r3, #1
 800fd08:	69fb      	ldr	r3, [r7, #28]
 800fd0a:	425b      	negs	r3, r3
 800fd0c:	401a      	ands	r2, r3
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	699b      	ldr	r3, [r3, #24]
 800fd16:	683a      	ldr	r2, [r7, #0]
 800fd18:	1ad3      	subs	r3, r2, r3
 800fd1a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	69db      	ldr	r3, [r3, #28]
 800fd20:	63bb      	str	r3, [r7, #56]	; 0x38
 800fd22:	e022      	b.n	800fd6a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	689b      	ldr	r3, [r3, #8]
 800fd28:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800fd2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d119      	bne.n	800fd64 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2100      	movs	r1, #0
 800fd34:	4618      	mov	r0, r3
 800fd36:	f7fd fdd5 	bl	800d8e4 <create_chain>
 800fd3a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd3e:	2b01      	cmp	r3, #1
 800fd40:	d104      	bne.n	800fd4c <f_lseek+0x28a>
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	2202      	movs	r2, #2
 800fd46:	755a      	strb	r2, [r3, #21]
 800fd48:	2302      	movs	r3, #2
 800fd4a:	e0bf      	b.n	800fecc <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fd4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd52:	d104      	bne.n	800fd5e <f_lseek+0x29c>
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	2201      	movs	r2, #1
 800fd58:	755a      	strb	r2, [r3, #21]
 800fd5a:	2301      	movs	r3, #1
 800fd5c:	e0b6      	b.n	800fecc <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd62:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd68:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800fd6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d05d      	beq.n	800fe2c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800fd70:	e03a      	b.n	800fde8 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800fd72:	683a      	ldr	r2, [r7, #0]
 800fd74:	69fb      	ldr	r3, [r7, #28]
 800fd76:	1ad3      	subs	r3, r2, r3
 800fd78:	603b      	str	r3, [r7, #0]
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	699a      	ldr	r2, [r3, #24]
 800fd7e:	69fb      	ldr	r3, [r7, #28]
 800fd80:	441a      	add	r2, r3
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	7d1b      	ldrb	r3, [r3, #20]
 800fd8a:	f003 0302 	and.w	r3, r3, #2
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d00b      	beq.n	800fdaa <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fd96:	4618      	mov	r0, r3
 800fd98:	f7fd fda4 	bl	800d8e4 <create_chain>
 800fd9c:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800fd9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d108      	bne.n	800fdb6 <f_lseek+0x2f4>
							ofs = 0; break;
 800fda4:	2300      	movs	r3, #0
 800fda6:	603b      	str	r3, [r7, #0]
 800fda8:	e022      	b.n	800fdf0 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7fd fba1 	bl	800d4f6 <get_fat>
 800fdb4:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fdb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdbc:	d104      	bne.n	800fdc8 <f_lseek+0x306>
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	2201      	movs	r2, #1
 800fdc2:	755a      	strb	r2, [r3, #21]
 800fdc4:	2301      	movs	r3, #1
 800fdc6:	e081      	b.n	800fecc <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800fdc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdca:	2b01      	cmp	r3, #1
 800fdcc:	d904      	bls.n	800fdd8 <f_lseek+0x316>
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	699b      	ldr	r3, [r3, #24]
 800fdd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	d304      	bcc.n	800fde2 <f_lseek+0x320>
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2202      	movs	r2, #2
 800fddc:	755a      	strb	r2, [r3, #21]
 800fdde:	2302      	movs	r3, #2
 800fde0:	e074      	b.n	800fecc <f_lseek+0x40a>
					fp->clust = clst;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fde6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800fde8:	683a      	ldr	r2, [r7, #0]
 800fdea:	69fb      	ldr	r3, [r7, #28]
 800fdec:	429a      	cmp	r2, r3
 800fdee:	d8c0      	bhi.n	800fd72 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	699a      	ldr	r2, [r3, #24]
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	441a      	add	r2, r3
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800fdfc:	683b      	ldr	r3, [r7, #0]
 800fdfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d012      	beq.n	800fe2c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800fe06:	68bb      	ldr	r3, [r7, #8]
 800fe08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	f7fd fb54 	bl	800d4b8 <clust2sect>
 800fe10:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800fe12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d104      	bne.n	800fe22 <f_lseek+0x360>
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	2202      	movs	r2, #2
 800fe1c:	755a      	strb	r2, [r3, #21]
 800fe1e:	2302      	movs	r3, #2
 800fe20:	e054      	b.n	800fecc <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800fe22:	683b      	ldr	r3, [r7, #0]
 800fe24:	0a5b      	lsrs	r3, r3, #9
 800fe26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe28:	4413      	add	r3, r2
 800fe2a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	699a      	ldr	r2, [r3, #24]
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	68db      	ldr	r3, [r3, #12]
 800fe34:	429a      	cmp	r2, r3
 800fe36:	d90a      	bls.n	800fe4e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	699a      	ldr	r2, [r3, #24]
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	7d1b      	ldrb	r3, [r3, #20]
 800fe44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe48:	b2da      	uxtb	r2, r3
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	699b      	ldr	r3, [r3, #24]
 800fe52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d036      	beq.n	800fec8 <f_lseek+0x406>
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	6a1b      	ldr	r3, [r3, #32]
 800fe5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe60:	429a      	cmp	r2, r3
 800fe62:	d031      	beq.n	800fec8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	7d1b      	ldrb	r3, [r3, #20]
 800fe68:	b25b      	sxtb	r3, r3
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	da18      	bge.n	800fea0 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fe6e:	68bb      	ldr	r3, [r7, #8]
 800fe70:	7858      	ldrb	r0, [r3, #1]
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	6a1a      	ldr	r2, [r3, #32]
 800fe7c:	2301      	movs	r3, #1
 800fe7e:	f7fc ff91 	bl	800cda4 <disk_write>
 800fe82:	4603      	mov	r3, r0
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d004      	beq.n	800fe92 <f_lseek+0x3d0>
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	2201      	movs	r2, #1
 800fe8c:	755a      	strb	r2, [r3, #21]
 800fe8e:	2301      	movs	r3, #1
 800fe90:	e01c      	b.n	800fecc <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	7d1b      	ldrb	r3, [r3, #20]
 800fe96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe9a:	b2da      	uxtb	r2, r3
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800fea0:	68bb      	ldr	r3, [r7, #8]
 800fea2:	7858      	ldrb	r0, [r3, #1]
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800feaa:	2301      	movs	r3, #1
 800feac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800feae:	f7fc ff59 	bl	800cd64 <disk_read>
 800feb2:	4603      	mov	r3, r0
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d004      	beq.n	800fec2 <f_lseek+0x400>
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2201      	movs	r2, #1
 800febc:	755a      	strb	r2, [r3, #21]
 800febe:	2301      	movs	r3, #1
 800fec0:	e004      	b.n	800fecc <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fec6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800fec8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800fecc:	4618      	mov	r0, r3
 800fece:	3740      	adds	r7, #64	; 0x40
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}

0800fed4 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b086      	sub	sp, #24
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
 800fedc:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d101      	bne.n	800fee8 <f_opendir+0x14>
 800fee4:	2309      	movs	r3, #9
 800fee6:	e064      	b.n	800ffb2 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800feec:	f107 010c 	add.w	r1, r7, #12
 800fef0:	463b      	mov	r3, r7
 800fef2:	2200      	movs	r2, #0
 800fef4:	4618      	mov	r0, r3
 800fef6:	f7fe ff73 	bl	800ede0 <find_volume>
 800fefa:	4603      	mov	r3, r0
 800fefc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fefe:	7dfb      	ldrb	r3, [r7, #23]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d14f      	bne.n	800ffa4 <f_opendir+0xd0>
		obj->fs = fs;
 800ff04:	68fa      	ldr	r2, [r7, #12]
 800ff06:	693b      	ldr	r3, [r7, #16]
 800ff08:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	4619      	mov	r1, r3
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	f7fe fe5a 	bl	800ebc8 <follow_path>
 800ff14:	4603      	mov	r3, r0
 800ff16:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800ff18:	7dfb      	ldrb	r3, [r7, #23]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d13d      	bne.n	800ff9a <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ff24:	b25b      	sxtb	r3, r3
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	db12      	blt.n	800ff50 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800ff2a:	693b      	ldr	r3, [r7, #16]
 800ff2c:	799b      	ldrb	r3, [r3, #6]
 800ff2e:	f003 0310 	and.w	r3, r3, #16
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d00a      	beq.n	800ff4c <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800ff36:	68fa      	ldr	r2, [r7, #12]
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	6a1b      	ldr	r3, [r3, #32]
 800ff3c:	4619      	mov	r1, r3
 800ff3e:	4610      	mov	r0, r2
 800ff40:	f7fd ff23 	bl	800dd8a <ld_clust>
 800ff44:	4602      	mov	r2, r0
 800ff46:	693b      	ldr	r3, [r7, #16]
 800ff48:	609a      	str	r2, [r3, #8]
 800ff4a:	e001      	b.n	800ff50 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800ff4c:	2305      	movs	r3, #5
 800ff4e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800ff50:	7dfb      	ldrb	r3, [r7, #23]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d121      	bne.n	800ff9a <f_opendir+0xc6>
				obj->id = fs->id;
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	88da      	ldrh	r2, [r3, #6]
 800ff5a:	693b      	ldr	r3, [r7, #16]
 800ff5c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800ff5e:	2100      	movs	r1, #0
 800ff60:	6878      	ldr	r0, [r7, #4]
 800ff62:	f7fd fd8b 	bl	800da7c <dir_sdi>
 800ff66:	4603      	mov	r3, r0
 800ff68:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800ff6a:	7dfb      	ldrb	r3, [r7, #23]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d114      	bne.n	800ff9a <f_opendir+0xc6>
					if (obj->sclust) {
 800ff70:	693b      	ldr	r3, [r7, #16]
 800ff72:	689b      	ldr	r3, [r3, #8]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d00d      	beq.n	800ff94 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800ff78:	2100      	movs	r1, #0
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f7fd f8ce 	bl	800d11c <inc_lock>
 800ff80:	4602      	mov	r2, r0
 800ff82:	693b      	ldr	r3, [r7, #16]
 800ff84:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800ff86:	693b      	ldr	r3, [r7, #16]
 800ff88:	691b      	ldr	r3, [r3, #16]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d105      	bne.n	800ff9a <f_opendir+0xc6>
 800ff8e:	2312      	movs	r3, #18
 800ff90:	75fb      	strb	r3, [r7, #23]
 800ff92:	e002      	b.n	800ff9a <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800ff94:	693b      	ldr	r3, [r7, #16]
 800ff96:	2200      	movs	r2, #0
 800ff98:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800ff9a:	7dfb      	ldrb	r3, [r7, #23]
 800ff9c:	2b04      	cmp	r3, #4
 800ff9e:	d101      	bne.n	800ffa4 <f_opendir+0xd0>
 800ffa0:	2305      	movs	r3, #5
 800ffa2:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800ffa4:	7dfb      	ldrb	r3, [r7, #23]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d002      	beq.n	800ffb0 <f_opendir+0xdc>
 800ffaa:	693b      	ldr	r3, [r7, #16]
 800ffac:	2200      	movs	r2, #0
 800ffae:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ffb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	3718      	adds	r7, #24
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	bd80      	pop	{r7, pc}

0800ffba <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800ffba:	b580      	push	{r7, lr}
 800ffbc:	b084      	sub	sp, #16
 800ffbe:	af00      	add	r7, sp, #0
 800ffc0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	f107 0208 	add.w	r2, r7, #8
 800ffc8:	4611      	mov	r1, r2
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f7ff f958 	bl	800f280 <validate>
 800ffd0:	4603      	mov	r3, r0
 800ffd2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ffd4:	7bfb      	ldrb	r3, [r7, #15]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d110      	bne.n	800fffc <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	691b      	ldr	r3, [r3, #16]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d006      	beq.n	800fff0 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	691b      	ldr	r3, [r3, #16]
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	f7fd f926 	bl	800d238 <dec_lock>
 800ffec:	4603      	mov	r3, r0
 800ffee:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800fff0:	7bfb      	ldrb	r3, [r7, #15]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d102      	bne.n	800fffc <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	2200      	movs	r2, #0
 800fffa:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800fffc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fffe:	4618      	mov	r0, r3
 8010000:	3710      	adds	r7, #16
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}

08010006 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010006:	b580      	push	{r7, lr}
 8010008:	b084      	sub	sp, #16
 801000a:	af00      	add	r7, sp, #0
 801000c:	6078      	str	r0, [r7, #4]
 801000e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	f107 0208 	add.w	r2, r7, #8
 8010016:	4611      	mov	r1, r2
 8010018:	4618      	mov	r0, r3
 801001a:	f7ff f931 	bl	800f280 <validate>
 801001e:	4603      	mov	r3, r0
 8010020:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010022:	7bfb      	ldrb	r3, [r7, #15]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d126      	bne.n	8010076 <f_readdir+0x70>
		if (!fno) {
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d106      	bne.n	801003c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801002e:	2100      	movs	r1, #0
 8010030:	6878      	ldr	r0, [r7, #4]
 8010032:	f7fd fd23 	bl	800da7c <dir_sdi>
 8010036:	4603      	mov	r3, r0
 8010038:	73fb      	strb	r3, [r7, #15]
 801003a:	e01c      	b.n	8010076 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801003c:	2100      	movs	r1, #0
 801003e:	6878      	ldr	r0, [r7, #4]
 8010040:	f7fe f8cd 	bl	800e1de <dir_read>
 8010044:	4603      	mov	r3, r0
 8010046:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8010048:	7bfb      	ldrb	r3, [r7, #15]
 801004a:	2b04      	cmp	r3, #4
 801004c:	d101      	bne.n	8010052 <f_readdir+0x4c>
 801004e:	2300      	movs	r3, #0
 8010050:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8010052:	7bfb      	ldrb	r3, [r7, #15]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d10e      	bne.n	8010076 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8010058:	6839      	ldr	r1, [r7, #0]
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	f7fe fb1e 	bl	800e69c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8010060:	2100      	movs	r1, #0
 8010062:	6878      	ldr	r0, [r7, #4]
 8010064:	f7fd fd85 	bl	800db72 <dir_next>
 8010068:	4603      	mov	r3, r0
 801006a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801006c:	7bfb      	ldrb	r3, [r7, #15]
 801006e:	2b04      	cmp	r3, #4
 8010070:	d101      	bne.n	8010076 <f_readdir+0x70>
 8010072:	2300      	movs	r3, #0
 8010074:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8010076:	7bfb      	ldrb	r3, [r7, #15]
}
 8010078:	4618      	mov	r0, r3
 801007a:	3710      	adds	r7, #16
 801007c:	46bd      	mov	sp, r7
 801007e:	bd80      	pop	{r7, pc}

08010080 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010080:	b480      	push	{r7}
 8010082:	b087      	sub	sp, #28
 8010084:	af00      	add	r7, sp, #0
 8010086:	60f8      	str	r0, [r7, #12]
 8010088:	60b9      	str	r1, [r7, #8]
 801008a:	4613      	mov	r3, r2
 801008c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801008e:	2301      	movs	r3, #1
 8010090:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010092:	2300      	movs	r3, #0
 8010094:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010096:	4b1f      	ldr	r3, [pc, #124]	; (8010114 <FATFS_LinkDriverEx+0x94>)
 8010098:	7a5b      	ldrb	r3, [r3, #9]
 801009a:	b2db      	uxtb	r3, r3
 801009c:	2b00      	cmp	r3, #0
 801009e:	d131      	bne.n	8010104 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80100a0:	4b1c      	ldr	r3, [pc, #112]	; (8010114 <FATFS_LinkDriverEx+0x94>)
 80100a2:	7a5b      	ldrb	r3, [r3, #9]
 80100a4:	b2db      	uxtb	r3, r3
 80100a6:	461a      	mov	r2, r3
 80100a8:	4b1a      	ldr	r3, [pc, #104]	; (8010114 <FATFS_LinkDriverEx+0x94>)
 80100aa:	2100      	movs	r1, #0
 80100ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80100ae:	4b19      	ldr	r3, [pc, #100]	; (8010114 <FATFS_LinkDriverEx+0x94>)
 80100b0:	7a5b      	ldrb	r3, [r3, #9]
 80100b2:	b2db      	uxtb	r3, r3
 80100b4:	4a17      	ldr	r2, [pc, #92]	; (8010114 <FATFS_LinkDriverEx+0x94>)
 80100b6:	009b      	lsls	r3, r3, #2
 80100b8:	4413      	add	r3, r2
 80100ba:	68fa      	ldr	r2, [r7, #12]
 80100bc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80100be:	4b15      	ldr	r3, [pc, #84]	; (8010114 <FATFS_LinkDriverEx+0x94>)
 80100c0:	7a5b      	ldrb	r3, [r3, #9]
 80100c2:	b2db      	uxtb	r3, r3
 80100c4:	461a      	mov	r2, r3
 80100c6:	4b13      	ldr	r3, [pc, #76]	; (8010114 <FATFS_LinkDriverEx+0x94>)
 80100c8:	4413      	add	r3, r2
 80100ca:	79fa      	ldrb	r2, [r7, #7]
 80100cc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80100ce:	4b11      	ldr	r3, [pc, #68]	; (8010114 <FATFS_LinkDriverEx+0x94>)
 80100d0:	7a5b      	ldrb	r3, [r3, #9]
 80100d2:	b2db      	uxtb	r3, r3
 80100d4:	1c5a      	adds	r2, r3, #1
 80100d6:	b2d1      	uxtb	r1, r2
 80100d8:	4a0e      	ldr	r2, [pc, #56]	; (8010114 <FATFS_LinkDriverEx+0x94>)
 80100da:	7251      	strb	r1, [r2, #9]
 80100dc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80100de:	7dbb      	ldrb	r3, [r7, #22]
 80100e0:	3330      	adds	r3, #48	; 0x30
 80100e2:	b2da      	uxtb	r2, r3
 80100e4:	68bb      	ldr	r3, [r7, #8]
 80100e6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	3301      	adds	r3, #1
 80100ec:	223a      	movs	r2, #58	; 0x3a
 80100ee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	3302      	adds	r3, #2
 80100f4:	222f      	movs	r2, #47	; 0x2f
 80100f6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	3303      	adds	r3, #3
 80100fc:	2200      	movs	r2, #0
 80100fe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010100:	2300      	movs	r3, #0
 8010102:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010104:	7dfb      	ldrb	r3, [r7, #23]
}
 8010106:	4618      	mov	r0, r3
 8010108:	371c      	adds	r7, #28
 801010a:	46bd      	mov	sp, r7
 801010c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010110:	4770      	bx	lr
 8010112:	bf00      	nop
 8010114:	20002e88 	.word	0x20002e88

08010118 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b082      	sub	sp, #8
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
 8010120:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010122:	2200      	movs	r2, #0
 8010124:	6839      	ldr	r1, [r7, #0]
 8010126:	6878      	ldr	r0, [r7, #4]
 8010128:	f7ff ffaa 	bl	8010080 <FATFS_LinkDriverEx>
 801012c:	4603      	mov	r3, r0
}
 801012e:	4618      	mov	r0, r3
 8010130:	3708      	adds	r7, #8
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}
	...

08010138 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010138:	b480      	push	{r7}
 801013a:	b085      	sub	sp, #20
 801013c:	af00      	add	r7, sp, #0
 801013e:	4603      	mov	r3, r0
 8010140:	6039      	str	r1, [r7, #0]
 8010142:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010144:	88fb      	ldrh	r3, [r7, #6]
 8010146:	2b7f      	cmp	r3, #127	; 0x7f
 8010148:	d802      	bhi.n	8010150 <ff_convert+0x18>
		c = chr;
 801014a:	88fb      	ldrh	r3, [r7, #6]
 801014c:	81fb      	strh	r3, [r7, #14]
 801014e:	e025      	b.n	801019c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010150:	683b      	ldr	r3, [r7, #0]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d00b      	beq.n	801016e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010156:	88fb      	ldrh	r3, [r7, #6]
 8010158:	2bff      	cmp	r3, #255	; 0xff
 801015a:	d805      	bhi.n	8010168 <ff_convert+0x30>
 801015c:	88fb      	ldrh	r3, [r7, #6]
 801015e:	3b80      	subs	r3, #128	; 0x80
 8010160:	4a12      	ldr	r2, [pc, #72]	; (80101ac <ff_convert+0x74>)
 8010162:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010166:	e000      	b.n	801016a <ff_convert+0x32>
 8010168:	2300      	movs	r3, #0
 801016a:	81fb      	strh	r3, [r7, #14]
 801016c:	e016      	b.n	801019c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801016e:	2300      	movs	r3, #0
 8010170:	81fb      	strh	r3, [r7, #14]
 8010172:	e009      	b.n	8010188 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010174:	89fb      	ldrh	r3, [r7, #14]
 8010176:	4a0d      	ldr	r2, [pc, #52]	; (80101ac <ff_convert+0x74>)
 8010178:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801017c:	88fa      	ldrh	r2, [r7, #6]
 801017e:	429a      	cmp	r2, r3
 8010180:	d006      	beq.n	8010190 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010182:	89fb      	ldrh	r3, [r7, #14]
 8010184:	3301      	adds	r3, #1
 8010186:	81fb      	strh	r3, [r7, #14]
 8010188:	89fb      	ldrh	r3, [r7, #14]
 801018a:	2b7f      	cmp	r3, #127	; 0x7f
 801018c:	d9f2      	bls.n	8010174 <ff_convert+0x3c>
 801018e:	e000      	b.n	8010192 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010190:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010192:	89fb      	ldrh	r3, [r7, #14]
 8010194:	3380      	adds	r3, #128	; 0x80
 8010196:	b29b      	uxth	r3, r3
 8010198:	b2db      	uxtb	r3, r3
 801019a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801019c:	89fb      	ldrh	r3, [r7, #14]
}
 801019e:	4618      	mov	r0, r3
 80101a0:	3714      	adds	r7, #20
 80101a2:	46bd      	mov	sp, r7
 80101a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a8:	4770      	bx	lr
 80101aa:	bf00      	nop
 80101ac:	08010d68 	.word	0x08010d68

080101b0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80101b0:	b480      	push	{r7}
 80101b2:	b087      	sub	sp, #28
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	4603      	mov	r3, r0
 80101b8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80101ba:	88fb      	ldrh	r3, [r7, #6]
 80101bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80101c0:	d201      	bcs.n	80101c6 <ff_wtoupper+0x16>
 80101c2:	4b3e      	ldr	r3, [pc, #248]	; (80102bc <ff_wtoupper+0x10c>)
 80101c4:	e000      	b.n	80101c8 <ff_wtoupper+0x18>
 80101c6:	4b3e      	ldr	r3, [pc, #248]	; (80102c0 <ff_wtoupper+0x110>)
 80101c8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80101ca:	697b      	ldr	r3, [r7, #20]
 80101cc:	1c9a      	adds	r2, r3, #2
 80101ce:	617a      	str	r2, [r7, #20]
 80101d0:	881b      	ldrh	r3, [r3, #0]
 80101d2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80101d4:	8a7b      	ldrh	r3, [r7, #18]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d068      	beq.n	80102ac <ff_wtoupper+0xfc>
 80101da:	88fa      	ldrh	r2, [r7, #6]
 80101dc:	8a7b      	ldrh	r3, [r7, #18]
 80101de:	429a      	cmp	r2, r3
 80101e0:	d364      	bcc.n	80102ac <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80101e2:	697b      	ldr	r3, [r7, #20]
 80101e4:	1c9a      	adds	r2, r3, #2
 80101e6:	617a      	str	r2, [r7, #20]
 80101e8:	881b      	ldrh	r3, [r3, #0]
 80101ea:	823b      	strh	r3, [r7, #16]
 80101ec:	8a3b      	ldrh	r3, [r7, #16]
 80101ee:	0a1b      	lsrs	r3, r3, #8
 80101f0:	81fb      	strh	r3, [r7, #14]
 80101f2:	8a3b      	ldrh	r3, [r7, #16]
 80101f4:	b2db      	uxtb	r3, r3
 80101f6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80101f8:	88fa      	ldrh	r2, [r7, #6]
 80101fa:	8a79      	ldrh	r1, [r7, #18]
 80101fc:	8a3b      	ldrh	r3, [r7, #16]
 80101fe:	440b      	add	r3, r1
 8010200:	429a      	cmp	r2, r3
 8010202:	da49      	bge.n	8010298 <ff_wtoupper+0xe8>
			switch (cmd) {
 8010204:	89fb      	ldrh	r3, [r7, #14]
 8010206:	2b08      	cmp	r3, #8
 8010208:	d84f      	bhi.n	80102aa <ff_wtoupper+0xfa>
 801020a:	a201      	add	r2, pc, #4	; (adr r2, 8010210 <ff_wtoupper+0x60>)
 801020c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010210:	08010235 	.word	0x08010235
 8010214:	08010247 	.word	0x08010247
 8010218:	0801025d 	.word	0x0801025d
 801021c:	08010265 	.word	0x08010265
 8010220:	0801026d 	.word	0x0801026d
 8010224:	08010275 	.word	0x08010275
 8010228:	0801027d 	.word	0x0801027d
 801022c:	08010285 	.word	0x08010285
 8010230:	0801028d 	.word	0x0801028d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010234:	88fa      	ldrh	r2, [r7, #6]
 8010236:	8a7b      	ldrh	r3, [r7, #18]
 8010238:	1ad3      	subs	r3, r2, r3
 801023a:	005b      	lsls	r3, r3, #1
 801023c:	697a      	ldr	r2, [r7, #20]
 801023e:	4413      	add	r3, r2
 8010240:	881b      	ldrh	r3, [r3, #0]
 8010242:	80fb      	strh	r3, [r7, #6]
 8010244:	e027      	b.n	8010296 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010246:	88fa      	ldrh	r2, [r7, #6]
 8010248:	8a7b      	ldrh	r3, [r7, #18]
 801024a:	1ad3      	subs	r3, r2, r3
 801024c:	b29b      	uxth	r3, r3
 801024e:	f003 0301 	and.w	r3, r3, #1
 8010252:	b29b      	uxth	r3, r3
 8010254:	88fa      	ldrh	r2, [r7, #6]
 8010256:	1ad3      	subs	r3, r2, r3
 8010258:	80fb      	strh	r3, [r7, #6]
 801025a:	e01c      	b.n	8010296 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801025c:	88fb      	ldrh	r3, [r7, #6]
 801025e:	3b10      	subs	r3, #16
 8010260:	80fb      	strh	r3, [r7, #6]
 8010262:	e018      	b.n	8010296 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010264:	88fb      	ldrh	r3, [r7, #6]
 8010266:	3b20      	subs	r3, #32
 8010268:	80fb      	strh	r3, [r7, #6]
 801026a:	e014      	b.n	8010296 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801026c:	88fb      	ldrh	r3, [r7, #6]
 801026e:	3b30      	subs	r3, #48	; 0x30
 8010270:	80fb      	strh	r3, [r7, #6]
 8010272:	e010      	b.n	8010296 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010274:	88fb      	ldrh	r3, [r7, #6]
 8010276:	3b1a      	subs	r3, #26
 8010278:	80fb      	strh	r3, [r7, #6]
 801027a:	e00c      	b.n	8010296 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801027c:	88fb      	ldrh	r3, [r7, #6]
 801027e:	3308      	adds	r3, #8
 8010280:	80fb      	strh	r3, [r7, #6]
 8010282:	e008      	b.n	8010296 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010284:	88fb      	ldrh	r3, [r7, #6]
 8010286:	3b50      	subs	r3, #80	; 0x50
 8010288:	80fb      	strh	r3, [r7, #6]
 801028a:	e004      	b.n	8010296 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801028c:	88fb      	ldrh	r3, [r7, #6]
 801028e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010292:	80fb      	strh	r3, [r7, #6]
 8010294:	bf00      	nop
			}
			break;
 8010296:	e008      	b.n	80102aa <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010298:	89fb      	ldrh	r3, [r7, #14]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d195      	bne.n	80101ca <ff_wtoupper+0x1a>
 801029e:	8a3b      	ldrh	r3, [r7, #16]
 80102a0:	005b      	lsls	r3, r3, #1
 80102a2:	697a      	ldr	r2, [r7, #20]
 80102a4:	4413      	add	r3, r2
 80102a6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80102a8:	e78f      	b.n	80101ca <ff_wtoupper+0x1a>
			break;
 80102aa:	bf00      	nop
	}

	return chr;
 80102ac:	88fb      	ldrh	r3, [r7, #6]
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	371c      	adds	r7, #28
 80102b2:	46bd      	mov	sp, r7
 80102b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b8:	4770      	bx	lr
 80102ba:	bf00      	nop
 80102bc:	08010e68 	.word	0x08010e68
 80102c0:	0801105c 	.word	0x0801105c

080102c4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80102c8:	2201      	movs	r2, #1
 80102ca:	490e      	ldr	r1, [pc, #56]	; (8010304 <MX_USB_HOST_Init+0x40>)
 80102cc:	480e      	ldr	r0, [pc, #56]	; (8010308 <MX_USB_HOST_Init+0x44>)
 80102ce:	f7fb f815 	bl	800b2fc <USBH_Init>
 80102d2:	4603      	mov	r3, r0
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d001      	beq.n	80102dc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80102d8:	f7f0 fbe8 	bl	8000aac <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 80102dc:	490b      	ldr	r1, [pc, #44]	; (801030c <MX_USB_HOST_Init+0x48>)
 80102de:	480a      	ldr	r0, [pc, #40]	; (8010308 <MX_USB_HOST_Init+0x44>)
 80102e0:	f7fb f8b9 	bl	800b456 <USBH_RegisterClass>
 80102e4:	4603      	mov	r3, r0
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d001      	beq.n	80102ee <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80102ea:	f7f0 fbdf 	bl	8000aac <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80102ee:	4806      	ldr	r0, [pc, #24]	; (8010308 <MX_USB_HOST_Init+0x44>)
 80102f0:	f7fb f93d 	bl	800b56e <USBH_Start>
 80102f4:	4603      	mov	r3, r0
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d001      	beq.n	80102fe <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80102fa:	f7f0 fbd7 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80102fe:	bf00      	nop
 8010300:	bd80      	pop	{r7, pc}
 8010302:	bf00      	nop
 8010304:	08010325 	.word	0x08010325
 8010308:	20002e94 	.word	0x20002e94
 801030c:	20000044 	.word	0x20000044

08010310 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8010314:	4802      	ldr	r0, [pc, #8]	; (8010320 <MX_USB_HOST_Process+0x10>)
 8010316:	f7fb f93b 	bl	800b590 <USBH_Process>
}
 801031a:	bf00      	nop
 801031c:	bd80      	pop	{r7, pc}
 801031e:	bf00      	nop
 8010320:	20002e94 	.word	0x20002e94

08010324 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010324:	b480      	push	{r7}
 8010326:	b083      	sub	sp, #12
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
 801032c:	460b      	mov	r3, r1
 801032e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010330:	78fb      	ldrb	r3, [r7, #3]
 8010332:	3b01      	subs	r3, #1
 8010334:	2b04      	cmp	r3, #4
 8010336:	d819      	bhi.n	801036c <USBH_UserProcess+0x48>
 8010338:	a201      	add	r2, pc, #4	; (adr r2, 8010340 <USBH_UserProcess+0x1c>)
 801033a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801033e:	bf00      	nop
 8010340:	0801036d 	.word	0x0801036d
 8010344:	0801035d 	.word	0x0801035d
 8010348:	0801036d 	.word	0x0801036d
 801034c:	08010365 	.word	0x08010365
 8010350:	08010355 	.word	0x08010355
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010354:	4b09      	ldr	r3, [pc, #36]	; (801037c <USBH_UserProcess+0x58>)
 8010356:	2203      	movs	r2, #3
 8010358:	701a      	strb	r2, [r3, #0]
  break;
 801035a:	e008      	b.n	801036e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801035c:	4b07      	ldr	r3, [pc, #28]	; (801037c <USBH_UserProcess+0x58>)
 801035e:	2202      	movs	r2, #2
 8010360:	701a      	strb	r2, [r3, #0]
  break;
 8010362:	e004      	b.n	801036e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010364:	4b05      	ldr	r3, [pc, #20]	; (801037c <USBH_UserProcess+0x58>)
 8010366:	2201      	movs	r2, #1
 8010368:	701a      	strb	r2, [r3, #0]
  break;
 801036a:	e000      	b.n	801036e <USBH_UserProcess+0x4a>

  default:
  break;
 801036c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801036e:	bf00      	nop
 8010370:	370c      	adds	r7, #12
 8010372:	46bd      	mov	sp, r7
 8010374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010378:	4770      	bx	lr
 801037a:	bf00      	nop
 801037c:	2000326c 	.word	0x2000326c

08010380 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b08a      	sub	sp, #40	; 0x28
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010388:	f107 0314 	add.w	r3, r7, #20
 801038c:	2200      	movs	r2, #0
 801038e:	601a      	str	r2, [r3, #0]
 8010390:	605a      	str	r2, [r3, #4]
 8010392:	609a      	str	r2, [r3, #8]
 8010394:	60da      	str	r2, [r3, #12]
 8010396:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80103a0:	d149      	bne.n	8010436 <HAL_HCD_MspInit+0xb6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80103a2:	4b27      	ldr	r3, [pc, #156]	; (8010440 <HAL_HCD_MspInit+0xc0>)
 80103a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103a6:	4a26      	ldr	r2, [pc, #152]	; (8010440 <HAL_HCD_MspInit+0xc0>)
 80103a8:	f043 0301 	orr.w	r3, r3, #1
 80103ac:	6313      	str	r3, [r2, #48]	; 0x30
 80103ae:	4b24      	ldr	r3, [pc, #144]	; (8010440 <HAL_HCD_MspInit+0xc0>)
 80103b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103b2:	f003 0301 	and.w	r3, r3, #1
 80103b6:	613b      	str	r3, [r7, #16]
 80103b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 80103ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80103be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80103c0:	2302      	movs	r3, #2
 80103c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80103c4:	2300      	movs	r3, #0
 80103c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80103c8:	2302      	movs	r3, #2
 80103ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80103cc:	230a      	movs	r3, #10
 80103ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80103d0:	f107 0314 	add.w	r3, r7, #20
 80103d4:	4619      	mov	r1, r3
 80103d6:	481b      	ldr	r0, [pc, #108]	; (8010444 <HAL_HCD_MspInit+0xc4>)
 80103d8:	f7f3 fd0c 	bl	8003df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80103dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80103e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80103e2:	2300      	movs	r3, #0
 80103e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80103e6:	2300      	movs	r3, #0
 80103e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80103ea:	f107 0314 	add.w	r3, r7, #20
 80103ee:	4619      	mov	r1, r3
 80103f0:	4814      	ldr	r0, [pc, #80]	; (8010444 <HAL_HCD_MspInit+0xc4>)
 80103f2:	f7f3 fcff 	bl	8003df4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80103f6:	4b12      	ldr	r3, [pc, #72]	; (8010440 <HAL_HCD_MspInit+0xc0>)
 80103f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103fa:	4a11      	ldr	r2, [pc, #68]	; (8010440 <HAL_HCD_MspInit+0xc0>)
 80103fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010400:	6353      	str	r3, [r2, #52]	; 0x34
 8010402:	4b0f      	ldr	r3, [pc, #60]	; (8010440 <HAL_HCD_MspInit+0xc0>)
 8010404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801040a:	60fb      	str	r3, [r7, #12]
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	4b0c      	ldr	r3, [pc, #48]	; (8010440 <HAL_HCD_MspInit+0xc0>)
 8010410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010412:	4a0b      	ldr	r2, [pc, #44]	; (8010440 <HAL_HCD_MspInit+0xc0>)
 8010414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010418:	6453      	str	r3, [r2, #68]	; 0x44
 801041a:	4b09      	ldr	r3, [pc, #36]	; (8010440 <HAL_HCD_MspInit+0xc0>)
 801041c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801041e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010422:	60bb      	str	r3, [r7, #8]
 8010424:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8010426:	2200      	movs	r2, #0
 8010428:	2106      	movs	r1, #6
 801042a:	2043      	movs	r0, #67	; 0x43
 801042c:	f7f3 f865 	bl	80034fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010430:	2043      	movs	r0, #67	; 0x43
 8010432:	f7f3 f87e 	bl	8003532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010436:	bf00      	nop
 8010438:	3728      	adds	r7, #40	; 0x28
 801043a:	46bd      	mov	sp, r7
 801043c:	bd80      	pop	{r7, pc}
 801043e:	bf00      	nop
 8010440:	40023800 	.word	0x40023800
 8010444:	40020000 	.word	0x40020000

08010448 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b082      	sub	sp, #8
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010456:	4618      	mov	r0, r3
 8010458:	f7fb fc79 	bl	800bd4e <USBH_LL_IncTimer>
}
 801045c:	bf00      	nop
 801045e:	3708      	adds	r7, #8
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}

08010464 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b082      	sub	sp, #8
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010472:	4618      	mov	r0, r3
 8010474:	f7fb fcb1 	bl	800bdda <USBH_LL_Connect>
}
 8010478:	bf00      	nop
 801047a:	3708      	adds	r7, #8
 801047c:	46bd      	mov	sp, r7
 801047e:	bd80      	pop	{r7, pc}

08010480 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b082      	sub	sp, #8
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801048e:	4618      	mov	r0, r3
 8010490:	f7fb fcba 	bl	800be08 <USBH_LL_Disconnect>
}
 8010494:	bf00      	nop
 8010496:	3708      	adds	r7, #8
 8010498:	46bd      	mov	sp, r7
 801049a:	bd80      	pop	{r7, pc}

0801049c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801049c:	b480      	push	{r7}
 801049e:	b083      	sub	sp, #12
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
 80104a4:	460b      	mov	r3, r1
 80104a6:	70fb      	strb	r3, [r7, #3]
 80104a8:	4613      	mov	r3, r2
 80104aa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80104ac:	bf00      	nop
 80104ae:	370c      	adds	r7, #12
 80104b0:	46bd      	mov	sp, r7
 80104b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b6:	4770      	bx	lr

080104b8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b082      	sub	sp, #8
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80104c6:	4618      	mov	r0, r3
 80104c8:	f7fb fc6b 	bl	800bda2 <USBH_LL_PortEnabled>
}
 80104cc:	bf00      	nop
 80104ce:	3708      	adds	r7, #8
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd80      	pop	{r7, pc}

080104d4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b082      	sub	sp, #8
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80104e2:	4618      	mov	r0, r3
 80104e4:	f7fb fc6b 	bl	800bdbe <USBH_LL_PortDisabled>
}
 80104e8:	bf00      	nop
 80104ea:	3708      	adds	r7, #8
 80104ec:	46bd      	mov	sp, r7
 80104ee:	bd80      	pop	{r7, pc}

080104f0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b082      	sub	sp, #8
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80104fe:	2b01      	cmp	r3, #1
 8010500:	d12a      	bne.n	8010558 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010502:	4a18      	ldr	r2, [pc, #96]	; (8010564 <USBH_LL_Init+0x74>)
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	4a15      	ldr	r2, [pc, #84]	; (8010564 <USBH_LL_Init+0x74>)
 801050e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010512:	4b14      	ldr	r3, [pc, #80]	; (8010564 <USBH_LL_Init+0x74>)
 8010514:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010518:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801051a:	4b12      	ldr	r3, [pc, #72]	; (8010564 <USBH_LL_Init+0x74>)
 801051c:	2208      	movs	r2, #8
 801051e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010520:	4b10      	ldr	r3, [pc, #64]	; (8010564 <USBH_LL_Init+0x74>)
 8010522:	2201      	movs	r2, #1
 8010524:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010526:	4b0f      	ldr	r3, [pc, #60]	; (8010564 <USBH_LL_Init+0x74>)
 8010528:	2200      	movs	r2, #0
 801052a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801052c:	4b0d      	ldr	r3, [pc, #52]	; (8010564 <USBH_LL_Init+0x74>)
 801052e:	2202      	movs	r2, #2
 8010530:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010532:	4b0c      	ldr	r3, [pc, #48]	; (8010564 <USBH_LL_Init+0x74>)
 8010534:	2200      	movs	r2, #0
 8010536:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010538:	480a      	ldr	r0, [pc, #40]	; (8010564 <USBH_LL_Init+0x74>)
 801053a:	f7f3 ff50 	bl	80043de <HAL_HCD_Init>
 801053e:	4603      	mov	r3, r0
 8010540:	2b00      	cmp	r3, #0
 8010542:	d001      	beq.n	8010548 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010544:	f7f0 fab2 	bl	8000aac <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010548:	4806      	ldr	r0, [pc, #24]	; (8010564 <USBH_LL_Init+0x74>)
 801054a:	f7f4 fb34 	bl	8004bb6 <HAL_HCD_GetCurrentFrame>
 801054e:	4603      	mov	r3, r0
 8010550:	4619      	mov	r1, r3
 8010552:	6878      	ldr	r0, [r7, #4]
 8010554:	f7fb fbec 	bl	800bd30 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010558:	2300      	movs	r3, #0
}
 801055a:	4618      	mov	r0, r3
 801055c:	3708      	adds	r7, #8
 801055e:	46bd      	mov	sp, r7
 8010560:	bd80      	pop	{r7, pc}
 8010562:	bf00      	nop
 8010564:	20003270 	.word	0x20003270

08010568 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b084      	sub	sp, #16
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010570:	2300      	movs	r3, #0
 8010572:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010574:	2300      	movs	r3, #0
 8010576:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801057e:	4618      	mov	r0, r3
 8010580:	f7f4 faa3 	bl	8004aca <HAL_HCD_Start>
 8010584:	4603      	mov	r3, r0
 8010586:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010588:	7bfb      	ldrb	r3, [r7, #15]
 801058a:	4618      	mov	r0, r3
 801058c:	f000 f98c 	bl	80108a8 <USBH_Get_USB_Status>
 8010590:	4603      	mov	r3, r0
 8010592:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010594:	7bbb      	ldrb	r3, [r7, #14]
}
 8010596:	4618      	mov	r0, r3
 8010598:	3710      	adds	r7, #16
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}

0801059e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801059e:	b580      	push	{r7, lr}
 80105a0:	b084      	sub	sp, #16
 80105a2:	af00      	add	r7, sp, #0
 80105a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105a6:	2300      	movs	r3, #0
 80105a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80105aa:	2300      	movs	r3, #0
 80105ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80105b4:	4618      	mov	r0, r3
 80105b6:	f7f4 faab 	bl	8004b10 <HAL_HCD_Stop>
 80105ba:	4603      	mov	r3, r0
 80105bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80105be:	7bfb      	ldrb	r3, [r7, #15]
 80105c0:	4618      	mov	r0, r3
 80105c2:	f000 f971 	bl	80108a8 <USBH_Get_USB_Status>
 80105c6:	4603      	mov	r3, r0
 80105c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80105cc:	4618      	mov	r0, r3
 80105ce:	3710      	adds	r7, #16
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd80      	pop	{r7, pc}

080105d4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b084      	sub	sp, #16
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80105dc:	2301      	movs	r3, #1
 80105de:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80105e6:	4618      	mov	r0, r3
 80105e8:	f7f4 faf3 	bl	8004bd2 <HAL_HCD_GetCurrentSpeed>
 80105ec:	4603      	mov	r3, r0
 80105ee:	2b02      	cmp	r3, #2
 80105f0:	d00c      	beq.n	801060c <USBH_LL_GetSpeed+0x38>
 80105f2:	2b02      	cmp	r3, #2
 80105f4:	d80d      	bhi.n	8010612 <USBH_LL_GetSpeed+0x3e>
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d002      	beq.n	8010600 <USBH_LL_GetSpeed+0x2c>
 80105fa:	2b01      	cmp	r3, #1
 80105fc:	d003      	beq.n	8010606 <USBH_LL_GetSpeed+0x32>
 80105fe:	e008      	b.n	8010612 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010600:	2300      	movs	r3, #0
 8010602:	73fb      	strb	r3, [r7, #15]
    break;
 8010604:	e008      	b.n	8010618 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010606:	2301      	movs	r3, #1
 8010608:	73fb      	strb	r3, [r7, #15]
    break;
 801060a:	e005      	b.n	8010618 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 801060c:	2302      	movs	r3, #2
 801060e:	73fb      	strb	r3, [r7, #15]
    break;
 8010610:	e002      	b.n	8010618 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010612:	2301      	movs	r3, #1
 8010614:	73fb      	strb	r3, [r7, #15]
    break;
 8010616:	bf00      	nop
  }
  return  speed;
 8010618:	7bfb      	ldrb	r3, [r7, #15]
}
 801061a:	4618      	mov	r0, r3
 801061c:	3710      	adds	r7, #16
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}

08010622 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010622:	b580      	push	{r7, lr}
 8010624:	b084      	sub	sp, #16
 8010626:	af00      	add	r7, sp, #0
 8010628:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801062a:	2300      	movs	r3, #0
 801062c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801062e:	2300      	movs	r3, #0
 8010630:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010638:	4618      	mov	r0, r3
 801063a:	f7f4 fa86 	bl	8004b4a <HAL_HCD_ResetPort>
 801063e:	4603      	mov	r3, r0
 8010640:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010642:	7bfb      	ldrb	r3, [r7, #15]
 8010644:	4618      	mov	r0, r3
 8010646:	f000 f92f 	bl	80108a8 <USBH_Get_USB_Status>
 801064a:	4603      	mov	r3, r0
 801064c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801064e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010650:	4618      	mov	r0, r3
 8010652:	3710      	adds	r7, #16
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}

08010658 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b082      	sub	sp, #8
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
 8010660:	460b      	mov	r3, r1
 8010662:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801066a:	78fa      	ldrb	r2, [r7, #3]
 801066c:	4611      	mov	r1, r2
 801066e:	4618      	mov	r0, r3
 8010670:	f7f4 fa8d 	bl	8004b8e <HAL_HCD_HC_GetXferCount>
 8010674:	4603      	mov	r3, r0
}
 8010676:	4618      	mov	r0, r3
 8010678:	3708      	adds	r7, #8
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}

0801067e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801067e:	b590      	push	{r4, r7, lr}
 8010680:	b089      	sub	sp, #36	; 0x24
 8010682:	af04      	add	r7, sp, #16
 8010684:	6078      	str	r0, [r7, #4]
 8010686:	4608      	mov	r0, r1
 8010688:	4611      	mov	r1, r2
 801068a:	461a      	mov	r2, r3
 801068c:	4603      	mov	r3, r0
 801068e:	70fb      	strb	r3, [r7, #3]
 8010690:	460b      	mov	r3, r1
 8010692:	70bb      	strb	r3, [r7, #2]
 8010694:	4613      	mov	r3, r2
 8010696:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010698:	2300      	movs	r3, #0
 801069a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801069c:	2300      	movs	r3, #0
 801069e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80106a6:	787c      	ldrb	r4, [r7, #1]
 80106a8:	78ba      	ldrb	r2, [r7, #2]
 80106aa:	78f9      	ldrb	r1, [r7, #3]
 80106ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80106ae:	9302      	str	r3, [sp, #8]
 80106b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80106b4:	9301      	str	r3, [sp, #4]
 80106b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80106ba:	9300      	str	r3, [sp, #0]
 80106bc:	4623      	mov	r3, r4
 80106be:	f7f3 fef0 	bl	80044a2 <HAL_HCD_HC_Init>
 80106c2:	4603      	mov	r3, r0
 80106c4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80106c6:	7bfb      	ldrb	r3, [r7, #15]
 80106c8:	4618      	mov	r0, r3
 80106ca:	f000 f8ed 	bl	80108a8 <USBH_Get_USB_Status>
 80106ce:	4603      	mov	r3, r0
 80106d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80106d4:	4618      	mov	r0, r3
 80106d6:	3714      	adds	r7, #20
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd90      	pop	{r4, r7, pc}

080106dc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b084      	sub	sp, #16
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
 80106e4:	460b      	mov	r3, r1
 80106e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106e8:	2300      	movs	r3, #0
 80106ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80106ec:	2300      	movs	r3, #0
 80106ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80106f6:	78fa      	ldrb	r2, [r7, #3]
 80106f8:	4611      	mov	r1, r2
 80106fa:	4618      	mov	r0, r3
 80106fc:	f7f3 ff60 	bl	80045c0 <HAL_HCD_HC_Halt>
 8010700:	4603      	mov	r3, r0
 8010702:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010704:	7bfb      	ldrb	r3, [r7, #15]
 8010706:	4618      	mov	r0, r3
 8010708:	f000 f8ce 	bl	80108a8 <USBH_Get_USB_Status>
 801070c:	4603      	mov	r3, r0
 801070e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010710:	7bbb      	ldrb	r3, [r7, #14]
}
 8010712:	4618      	mov	r0, r3
 8010714:	3710      	adds	r7, #16
 8010716:	46bd      	mov	sp, r7
 8010718:	bd80      	pop	{r7, pc}

0801071a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801071a:	b590      	push	{r4, r7, lr}
 801071c:	b089      	sub	sp, #36	; 0x24
 801071e:	af04      	add	r7, sp, #16
 8010720:	6078      	str	r0, [r7, #4]
 8010722:	4608      	mov	r0, r1
 8010724:	4611      	mov	r1, r2
 8010726:	461a      	mov	r2, r3
 8010728:	4603      	mov	r3, r0
 801072a:	70fb      	strb	r3, [r7, #3]
 801072c:	460b      	mov	r3, r1
 801072e:	70bb      	strb	r3, [r7, #2]
 8010730:	4613      	mov	r3, r2
 8010732:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010734:	2300      	movs	r3, #0
 8010736:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010738:	2300      	movs	r3, #0
 801073a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010742:	787c      	ldrb	r4, [r7, #1]
 8010744:	78ba      	ldrb	r2, [r7, #2]
 8010746:	78f9      	ldrb	r1, [r7, #3]
 8010748:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801074c:	9303      	str	r3, [sp, #12]
 801074e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010750:	9302      	str	r3, [sp, #8]
 8010752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010754:	9301      	str	r3, [sp, #4]
 8010756:	f897 3020 	ldrb.w	r3, [r7, #32]
 801075a:	9300      	str	r3, [sp, #0]
 801075c:	4623      	mov	r3, r4
 801075e:	f7f3 ff53 	bl	8004608 <HAL_HCD_HC_SubmitRequest>
 8010762:	4603      	mov	r3, r0
 8010764:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010766:	7bfb      	ldrb	r3, [r7, #15]
 8010768:	4618      	mov	r0, r3
 801076a:	f000 f89d 	bl	80108a8 <USBH_Get_USB_Status>
 801076e:	4603      	mov	r3, r0
 8010770:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010772:	7bbb      	ldrb	r3, [r7, #14]
}
 8010774:	4618      	mov	r0, r3
 8010776:	3714      	adds	r7, #20
 8010778:	46bd      	mov	sp, r7
 801077a:	bd90      	pop	{r4, r7, pc}

0801077c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b082      	sub	sp, #8
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
 8010784:	460b      	mov	r3, r1
 8010786:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801078e:	78fa      	ldrb	r2, [r7, #3]
 8010790:	4611      	mov	r1, r2
 8010792:	4618      	mov	r0, r3
 8010794:	f7f4 f9e7 	bl	8004b66 <HAL_HCD_HC_GetURBState>
 8010798:	4603      	mov	r3, r0
}
 801079a:	4618      	mov	r0, r3
 801079c:	3708      	adds	r7, #8
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd80      	pop	{r7, pc}

080107a2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80107a2:	b580      	push	{r7, lr}
 80107a4:	b082      	sub	sp, #8
 80107a6:	af00      	add	r7, sp, #0
 80107a8:	6078      	str	r0, [r7, #4]
 80107aa:	460b      	mov	r3, r1
 80107ac:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80107b4:	2b01      	cmp	r3, #1
 80107b6:	d103      	bne.n	80107c0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80107b8:	78fb      	ldrb	r3, [r7, #3]
 80107ba:	4618      	mov	r0, r3
 80107bc:	f000 f8a0 	bl	8010900 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80107c0:	20c8      	movs	r0, #200	; 0xc8
 80107c2:	f7f2 fd9b 	bl	80032fc <HAL_Delay>
  return USBH_OK;
 80107c6:	2300      	movs	r3, #0
}
 80107c8:	4618      	mov	r0, r3
 80107ca:	3708      	adds	r7, #8
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd80      	pop	{r7, pc}

080107d0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80107d0:	b480      	push	{r7}
 80107d2:	b085      	sub	sp, #20
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
 80107d8:	460b      	mov	r3, r1
 80107da:	70fb      	strb	r3, [r7, #3]
 80107dc:	4613      	mov	r3, r2
 80107de:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80107e6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80107e8:	78fb      	ldrb	r3, [r7, #3]
 80107ea:	68fa      	ldr	r2, [r7, #12]
 80107ec:	212c      	movs	r1, #44	; 0x2c
 80107ee:	fb01 f303 	mul.w	r3, r1, r3
 80107f2:	4413      	add	r3, r2
 80107f4:	333b      	adds	r3, #59	; 0x3b
 80107f6:	781b      	ldrb	r3, [r3, #0]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d009      	beq.n	8010810 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80107fc:	78fb      	ldrb	r3, [r7, #3]
 80107fe:	68fa      	ldr	r2, [r7, #12]
 8010800:	212c      	movs	r1, #44	; 0x2c
 8010802:	fb01 f303 	mul.w	r3, r1, r3
 8010806:	4413      	add	r3, r2
 8010808:	3354      	adds	r3, #84	; 0x54
 801080a:	78ba      	ldrb	r2, [r7, #2]
 801080c:	701a      	strb	r2, [r3, #0]
 801080e:	e008      	b.n	8010822 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010810:	78fb      	ldrb	r3, [r7, #3]
 8010812:	68fa      	ldr	r2, [r7, #12]
 8010814:	212c      	movs	r1, #44	; 0x2c
 8010816:	fb01 f303 	mul.w	r3, r1, r3
 801081a:	4413      	add	r3, r2
 801081c:	3355      	adds	r3, #85	; 0x55
 801081e:	78ba      	ldrb	r2, [r7, #2]
 8010820:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010822:	2300      	movs	r3, #0
}
 8010824:	4618      	mov	r0, r3
 8010826:	3714      	adds	r7, #20
 8010828:	46bd      	mov	sp, r7
 801082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082e:	4770      	bx	lr

08010830 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010830:	b480      	push	{r7}
 8010832:	b085      	sub	sp, #20
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
 8010838:	460b      	mov	r3, r1
 801083a:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 801083c:	2300      	movs	r3, #0
 801083e:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010846:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8010848:	78fb      	ldrb	r3, [r7, #3]
 801084a:	68ba      	ldr	r2, [r7, #8]
 801084c:	212c      	movs	r1, #44	; 0x2c
 801084e:	fb01 f303 	mul.w	r3, r1, r3
 8010852:	4413      	add	r3, r2
 8010854:	333b      	adds	r3, #59	; 0x3b
 8010856:	781b      	ldrb	r3, [r3, #0]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d009      	beq.n	8010870 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 801085c:	78fb      	ldrb	r3, [r7, #3]
 801085e:	68ba      	ldr	r2, [r7, #8]
 8010860:	212c      	movs	r1, #44	; 0x2c
 8010862:	fb01 f303 	mul.w	r3, r1, r3
 8010866:	4413      	add	r3, r2
 8010868:	3354      	adds	r3, #84	; 0x54
 801086a:	781b      	ldrb	r3, [r3, #0]
 801086c:	73fb      	strb	r3, [r7, #15]
 801086e:	e008      	b.n	8010882 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8010870:	78fb      	ldrb	r3, [r7, #3]
 8010872:	68ba      	ldr	r2, [r7, #8]
 8010874:	212c      	movs	r1, #44	; 0x2c
 8010876:	fb01 f303 	mul.w	r3, r1, r3
 801087a:	4413      	add	r3, r2
 801087c:	3355      	adds	r3, #85	; 0x55
 801087e:	781b      	ldrb	r3, [r3, #0]
 8010880:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8010882:	7bfb      	ldrb	r3, [r7, #15]
}
 8010884:	4618      	mov	r0, r3
 8010886:	3714      	adds	r7, #20
 8010888:	46bd      	mov	sp, r7
 801088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088e:	4770      	bx	lr

08010890 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b082      	sub	sp, #8
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010898:	6878      	ldr	r0, [r7, #4]
 801089a:	f7f2 fd2f 	bl	80032fc <HAL_Delay>
}
 801089e:	bf00      	nop
 80108a0:	3708      	adds	r7, #8
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bd80      	pop	{r7, pc}
	...

080108a8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80108a8:	b480      	push	{r7}
 80108aa:	b085      	sub	sp, #20
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	4603      	mov	r3, r0
 80108b0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80108b2:	2300      	movs	r3, #0
 80108b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80108b6:	79fb      	ldrb	r3, [r7, #7]
 80108b8:	2b03      	cmp	r3, #3
 80108ba:	d817      	bhi.n	80108ec <USBH_Get_USB_Status+0x44>
 80108bc:	a201      	add	r2, pc, #4	; (adr r2, 80108c4 <USBH_Get_USB_Status+0x1c>)
 80108be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108c2:	bf00      	nop
 80108c4:	080108d5 	.word	0x080108d5
 80108c8:	080108db 	.word	0x080108db
 80108cc:	080108e1 	.word	0x080108e1
 80108d0:	080108e7 	.word	0x080108e7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80108d4:	2300      	movs	r3, #0
 80108d6:	73fb      	strb	r3, [r7, #15]
    break;
 80108d8:	e00b      	b.n	80108f2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80108da:	2302      	movs	r3, #2
 80108dc:	73fb      	strb	r3, [r7, #15]
    break;
 80108de:	e008      	b.n	80108f2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80108e0:	2301      	movs	r3, #1
 80108e2:	73fb      	strb	r3, [r7, #15]
    break;
 80108e4:	e005      	b.n	80108f2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80108e6:	2302      	movs	r3, #2
 80108e8:	73fb      	strb	r3, [r7, #15]
    break;
 80108ea:	e002      	b.n	80108f2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80108ec:	2302      	movs	r3, #2
 80108ee:	73fb      	strb	r3, [r7, #15]
    break;
 80108f0:	bf00      	nop
  }
  return usb_status;
 80108f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	3714      	adds	r7, #20
 80108f8:	46bd      	mov	sp, r7
 80108fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fe:	4770      	bx	lr

08010900 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b084      	sub	sp, #16
 8010904:	af00      	add	r7, sp, #0
 8010906:	4603      	mov	r3, r0
 8010908:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801090a:	79fb      	ldrb	r3, [r7, #7]
 801090c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801090e:	79fb      	ldrb	r3, [r7, #7]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d102      	bne.n	801091a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8010914:	2301      	movs	r3, #1
 8010916:	73fb      	strb	r3, [r7, #15]
 8010918:	e001      	b.n	801091e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801091a:	2300      	movs	r3, #0
 801091c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801091e:	7bfb      	ldrb	r3, [r7, #15]
 8010920:	461a      	mov	r2, r3
 8010922:	2120      	movs	r1, #32
 8010924:	4803      	ldr	r0, [pc, #12]	; (8010934 <MX_DriverVbusFS+0x34>)
 8010926:	f7f3 fd1d 	bl	8004364 <HAL_GPIO_WritePin>
}
 801092a:	bf00      	nop
 801092c:	3710      	adds	r7, #16
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}
 8010932:	bf00      	nop
 8010934:	40020c00 	.word	0x40020c00

08010938 <malloc>:
 8010938:	4b02      	ldr	r3, [pc, #8]	; (8010944 <malloc+0xc>)
 801093a:	4601      	mov	r1, r0
 801093c:	6818      	ldr	r0, [r3, #0]
 801093e:	f000 b82b 	b.w	8010998 <_malloc_r>
 8010942:	bf00      	nop
 8010944:	200000b0 	.word	0x200000b0

08010948 <free>:
 8010948:	4b02      	ldr	r3, [pc, #8]	; (8010954 <free+0xc>)
 801094a:	4601      	mov	r1, r0
 801094c:	6818      	ldr	r0, [r3, #0]
 801094e:	f000 b92b 	b.w	8010ba8 <_free_r>
 8010952:	bf00      	nop
 8010954:	200000b0 	.word	0x200000b0

08010958 <sbrk_aligned>:
 8010958:	b570      	push	{r4, r5, r6, lr}
 801095a:	4e0e      	ldr	r6, [pc, #56]	; (8010994 <sbrk_aligned+0x3c>)
 801095c:	460c      	mov	r4, r1
 801095e:	6831      	ldr	r1, [r6, #0]
 8010960:	4605      	mov	r5, r0
 8010962:	b911      	cbnz	r1, 801096a <sbrk_aligned+0x12>
 8010964:	f000 f8d6 	bl	8010b14 <_sbrk_r>
 8010968:	6030      	str	r0, [r6, #0]
 801096a:	4621      	mov	r1, r4
 801096c:	4628      	mov	r0, r5
 801096e:	f000 f8d1 	bl	8010b14 <_sbrk_r>
 8010972:	1c43      	adds	r3, r0, #1
 8010974:	d00a      	beq.n	801098c <sbrk_aligned+0x34>
 8010976:	1cc4      	adds	r4, r0, #3
 8010978:	f024 0403 	bic.w	r4, r4, #3
 801097c:	42a0      	cmp	r0, r4
 801097e:	d007      	beq.n	8010990 <sbrk_aligned+0x38>
 8010980:	1a21      	subs	r1, r4, r0
 8010982:	4628      	mov	r0, r5
 8010984:	f000 f8c6 	bl	8010b14 <_sbrk_r>
 8010988:	3001      	adds	r0, #1
 801098a:	d101      	bne.n	8010990 <sbrk_aligned+0x38>
 801098c:	f04f 34ff 	mov.w	r4, #4294967295
 8010990:	4620      	mov	r0, r4
 8010992:	bd70      	pop	{r4, r5, r6, pc}
 8010994:	20003578 	.word	0x20003578

08010998 <_malloc_r>:
 8010998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801099c:	1ccd      	adds	r5, r1, #3
 801099e:	f025 0503 	bic.w	r5, r5, #3
 80109a2:	3508      	adds	r5, #8
 80109a4:	2d0c      	cmp	r5, #12
 80109a6:	bf38      	it	cc
 80109a8:	250c      	movcc	r5, #12
 80109aa:	2d00      	cmp	r5, #0
 80109ac:	4607      	mov	r7, r0
 80109ae:	db01      	blt.n	80109b4 <_malloc_r+0x1c>
 80109b0:	42a9      	cmp	r1, r5
 80109b2:	d905      	bls.n	80109c0 <_malloc_r+0x28>
 80109b4:	230c      	movs	r3, #12
 80109b6:	603b      	str	r3, [r7, #0]
 80109b8:	2600      	movs	r6, #0
 80109ba:	4630      	mov	r0, r6
 80109bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010a94 <_malloc_r+0xfc>
 80109c4:	f000 f868 	bl	8010a98 <__malloc_lock>
 80109c8:	f8d8 3000 	ldr.w	r3, [r8]
 80109cc:	461c      	mov	r4, r3
 80109ce:	bb5c      	cbnz	r4, 8010a28 <_malloc_r+0x90>
 80109d0:	4629      	mov	r1, r5
 80109d2:	4638      	mov	r0, r7
 80109d4:	f7ff ffc0 	bl	8010958 <sbrk_aligned>
 80109d8:	1c43      	adds	r3, r0, #1
 80109da:	4604      	mov	r4, r0
 80109dc:	d155      	bne.n	8010a8a <_malloc_r+0xf2>
 80109de:	f8d8 4000 	ldr.w	r4, [r8]
 80109e2:	4626      	mov	r6, r4
 80109e4:	2e00      	cmp	r6, #0
 80109e6:	d145      	bne.n	8010a74 <_malloc_r+0xdc>
 80109e8:	2c00      	cmp	r4, #0
 80109ea:	d048      	beq.n	8010a7e <_malloc_r+0xe6>
 80109ec:	6823      	ldr	r3, [r4, #0]
 80109ee:	4631      	mov	r1, r6
 80109f0:	4638      	mov	r0, r7
 80109f2:	eb04 0903 	add.w	r9, r4, r3
 80109f6:	f000 f88d 	bl	8010b14 <_sbrk_r>
 80109fa:	4581      	cmp	r9, r0
 80109fc:	d13f      	bne.n	8010a7e <_malloc_r+0xe6>
 80109fe:	6821      	ldr	r1, [r4, #0]
 8010a00:	1a6d      	subs	r5, r5, r1
 8010a02:	4629      	mov	r1, r5
 8010a04:	4638      	mov	r0, r7
 8010a06:	f7ff ffa7 	bl	8010958 <sbrk_aligned>
 8010a0a:	3001      	adds	r0, #1
 8010a0c:	d037      	beq.n	8010a7e <_malloc_r+0xe6>
 8010a0e:	6823      	ldr	r3, [r4, #0]
 8010a10:	442b      	add	r3, r5
 8010a12:	6023      	str	r3, [r4, #0]
 8010a14:	f8d8 3000 	ldr.w	r3, [r8]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d038      	beq.n	8010a8e <_malloc_r+0xf6>
 8010a1c:	685a      	ldr	r2, [r3, #4]
 8010a1e:	42a2      	cmp	r2, r4
 8010a20:	d12b      	bne.n	8010a7a <_malloc_r+0xe2>
 8010a22:	2200      	movs	r2, #0
 8010a24:	605a      	str	r2, [r3, #4]
 8010a26:	e00f      	b.n	8010a48 <_malloc_r+0xb0>
 8010a28:	6822      	ldr	r2, [r4, #0]
 8010a2a:	1b52      	subs	r2, r2, r5
 8010a2c:	d41f      	bmi.n	8010a6e <_malloc_r+0xd6>
 8010a2e:	2a0b      	cmp	r2, #11
 8010a30:	d917      	bls.n	8010a62 <_malloc_r+0xca>
 8010a32:	1961      	adds	r1, r4, r5
 8010a34:	42a3      	cmp	r3, r4
 8010a36:	6025      	str	r5, [r4, #0]
 8010a38:	bf18      	it	ne
 8010a3a:	6059      	strne	r1, [r3, #4]
 8010a3c:	6863      	ldr	r3, [r4, #4]
 8010a3e:	bf08      	it	eq
 8010a40:	f8c8 1000 	streq.w	r1, [r8]
 8010a44:	5162      	str	r2, [r4, r5]
 8010a46:	604b      	str	r3, [r1, #4]
 8010a48:	4638      	mov	r0, r7
 8010a4a:	f104 060b 	add.w	r6, r4, #11
 8010a4e:	f000 f829 	bl	8010aa4 <__malloc_unlock>
 8010a52:	f026 0607 	bic.w	r6, r6, #7
 8010a56:	1d23      	adds	r3, r4, #4
 8010a58:	1af2      	subs	r2, r6, r3
 8010a5a:	d0ae      	beq.n	80109ba <_malloc_r+0x22>
 8010a5c:	1b9b      	subs	r3, r3, r6
 8010a5e:	50a3      	str	r3, [r4, r2]
 8010a60:	e7ab      	b.n	80109ba <_malloc_r+0x22>
 8010a62:	42a3      	cmp	r3, r4
 8010a64:	6862      	ldr	r2, [r4, #4]
 8010a66:	d1dd      	bne.n	8010a24 <_malloc_r+0x8c>
 8010a68:	f8c8 2000 	str.w	r2, [r8]
 8010a6c:	e7ec      	b.n	8010a48 <_malloc_r+0xb0>
 8010a6e:	4623      	mov	r3, r4
 8010a70:	6864      	ldr	r4, [r4, #4]
 8010a72:	e7ac      	b.n	80109ce <_malloc_r+0x36>
 8010a74:	4634      	mov	r4, r6
 8010a76:	6876      	ldr	r6, [r6, #4]
 8010a78:	e7b4      	b.n	80109e4 <_malloc_r+0x4c>
 8010a7a:	4613      	mov	r3, r2
 8010a7c:	e7cc      	b.n	8010a18 <_malloc_r+0x80>
 8010a7e:	230c      	movs	r3, #12
 8010a80:	603b      	str	r3, [r7, #0]
 8010a82:	4638      	mov	r0, r7
 8010a84:	f000 f80e 	bl	8010aa4 <__malloc_unlock>
 8010a88:	e797      	b.n	80109ba <_malloc_r+0x22>
 8010a8a:	6025      	str	r5, [r4, #0]
 8010a8c:	e7dc      	b.n	8010a48 <_malloc_r+0xb0>
 8010a8e:	605b      	str	r3, [r3, #4]
 8010a90:	deff      	udf	#255	; 0xff
 8010a92:	bf00      	nop
 8010a94:	20003574 	.word	0x20003574

08010a98 <__malloc_lock>:
 8010a98:	4801      	ldr	r0, [pc, #4]	; (8010aa0 <__malloc_lock+0x8>)
 8010a9a:	f000 b875 	b.w	8010b88 <__retarget_lock_acquire_recursive>
 8010a9e:	bf00      	nop
 8010aa0:	200036b8 	.word	0x200036b8

08010aa4 <__malloc_unlock>:
 8010aa4:	4801      	ldr	r0, [pc, #4]	; (8010aac <__malloc_unlock+0x8>)
 8010aa6:	f000 b870 	b.w	8010b8a <__retarget_lock_release_recursive>
 8010aaa:	bf00      	nop
 8010aac:	200036b8 	.word	0x200036b8

08010ab0 <memset>:
 8010ab0:	4402      	add	r2, r0
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	4293      	cmp	r3, r2
 8010ab6:	d100      	bne.n	8010aba <memset+0xa>
 8010ab8:	4770      	bx	lr
 8010aba:	f803 1b01 	strb.w	r1, [r3], #1
 8010abe:	e7f9      	b.n	8010ab4 <memset+0x4>

08010ac0 <strncpy>:
 8010ac0:	b510      	push	{r4, lr}
 8010ac2:	3901      	subs	r1, #1
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	b132      	cbz	r2, 8010ad6 <strncpy+0x16>
 8010ac8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010acc:	f803 4b01 	strb.w	r4, [r3], #1
 8010ad0:	3a01      	subs	r2, #1
 8010ad2:	2c00      	cmp	r4, #0
 8010ad4:	d1f7      	bne.n	8010ac6 <strncpy+0x6>
 8010ad6:	441a      	add	r2, r3
 8010ad8:	2100      	movs	r1, #0
 8010ada:	4293      	cmp	r3, r2
 8010adc:	d100      	bne.n	8010ae0 <strncpy+0x20>
 8010ade:	bd10      	pop	{r4, pc}
 8010ae0:	f803 1b01 	strb.w	r1, [r3], #1
 8010ae4:	e7f9      	b.n	8010ada <strncpy+0x1a>

08010ae6 <strstr>:
 8010ae6:	780a      	ldrb	r2, [r1, #0]
 8010ae8:	b570      	push	{r4, r5, r6, lr}
 8010aea:	b96a      	cbnz	r2, 8010b08 <strstr+0x22>
 8010aec:	bd70      	pop	{r4, r5, r6, pc}
 8010aee:	429a      	cmp	r2, r3
 8010af0:	d109      	bne.n	8010b06 <strstr+0x20>
 8010af2:	460c      	mov	r4, r1
 8010af4:	4605      	mov	r5, r0
 8010af6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d0f6      	beq.n	8010aec <strstr+0x6>
 8010afe:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8010b02:	429e      	cmp	r6, r3
 8010b04:	d0f7      	beq.n	8010af6 <strstr+0x10>
 8010b06:	3001      	adds	r0, #1
 8010b08:	7803      	ldrb	r3, [r0, #0]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d1ef      	bne.n	8010aee <strstr+0x8>
 8010b0e:	4618      	mov	r0, r3
 8010b10:	e7ec      	b.n	8010aec <strstr+0x6>
	...

08010b14 <_sbrk_r>:
 8010b14:	b538      	push	{r3, r4, r5, lr}
 8010b16:	4d06      	ldr	r5, [pc, #24]	; (8010b30 <_sbrk_r+0x1c>)
 8010b18:	2300      	movs	r3, #0
 8010b1a:	4604      	mov	r4, r0
 8010b1c:	4608      	mov	r0, r1
 8010b1e:	602b      	str	r3, [r5, #0]
 8010b20:	f7f0 f944 	bl	8000dac <_sbrk>
 8010b24:	1c43      	adds	r3, r0, #1
 8010b26:	d102      	bne.n	8010b2e <_sbrk_r+0x1a>
 8010b28:	682b      	ldr	r3, [r5, #0]
 8010b2a:	b103      	cbz	r3, 8010b2e <_sbrk_r+0x1a>
 8010b2c:	6023      	str	r3, [r4, #0]
 8010b2e:	bd38      	pop	{r3, r4, r5, pc}
 8010b30:	200036b4 	.word	0x200036b4

08010b34 <__errno>:
 8010b34:	4b01      	ldr	r3, [pc, #4]	; (8010b3c <__errno+0x8>)
 8010b36:	6818      	ldr	r0, [r3, #0]
 8010b38:	4770      	bx	lr
 8010b3a:	bf00      	nop
 8010b3c:	200000b0 	.word	0x200000b0

08010b40 <__libc_init_array>:
 8010b40:	b570      	push	{r4, r5, r6, lr}
 8010b42:	4d0d      	ldr	r5, [pc, #52]	; (8010b78 <__libc_init_array+0x38>)
 8010b44:	4c0d      	ldr	r4, [pc, #52]	; (8010b7c <__libc_init_array+0x3c>)
 8010b46:	1b64      	subs	r4, r4, r5
 8010b48:	10a4      	asrs	r4, r4, #2
 8010b4a:	2600      	movs	r6, #0
 8010b4c:	42a6      	cmp	r6, r4
 8010b4e:	d109      	bne.n	8010b64 <__libc_init_array+0x24>
 8010b50:	4d0b      	ldr	r5, [pc, #44]	; (8010b80 <__libc_init_array+0x40>)
 8010b52:	4c0c      	ldr	r4, [pc, #48]	; (8010b84 <__libc_init_array+0x44>)
 8010b54:	f000 f874 	bl	8010c40 <_init>
 8010b58:	1b64      	subs	r4, r4, r5
 8010b5a:	10a4      	asrs	r4, r4, #2
 8010b5c:	2600      	movs	r6, #0
 8010b5e:	42a6      	cmp	r6, r4
 8010b60:	d105      	bne.n	8010b6e <__libc_init_array+0x2e>
 8010b62:	bd70      	pop	{r4, r5, r6, pc}
 8010b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b68:	4798      	blx	r3
 8010b6a:	3601      	adds	r6, #1
 8010b6c:	e7ee      	b.n	8010b4c <__libc_init_array+0xc>
 8010b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b72:	4798      	blx	r3
 8010b74:	3601      	adds	r6, #1
 8010b76:	e7f2      	b.n	8010b5e <__libc_init_array+0x1e>
 8010b78:	08011120 	.word	0x08011120
 8010b7c:	08011120 	.word	0x08011120
 8010b80:	08011120 	.word	0x08011120
 8010b84:	08011124 	.word	0x08011124

08010b88 <__retarget_lock_acquire_recursive>:
 8010b88:	4770      	bx	lr

08010b8a <__retarget_lock_release_recursive>:
 8010b8a:	4770      	bx	lr

08010b8c <memcpy>:
 8010b8c:	440a      	add	r2, r1
 8010b8e:	4291      	cmp	r1, r2
 8010b90:	f100 33ff 	add.w	r3, r0, #4294967295
 8010b94:	d100      	bne.n	8010b98 <memcpy+0xc>
 8010b96:	4770      	bx	lr
 8010b98:	b510      	push	{r4, lr}
 8010b9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010ba2:	4291      	cmp	r1, r2
 8010ba4:	d1f9      	bne.n	8010b9a <memcpy+0xe>
 8010ba6:	bd10      	pop	{r4, pc}

08010ba8 <_free_r>:
 8010ba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010baa:	2900      	cmp	r1, #0
 8010bac:	d044      	beq.n	8010c38 <_free_r+0x90>
 8010bae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010bb2:	9001      	str	r0, [sp, #4]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	f1a1 0404 	sub.w	r4, r1, #4
 8010bba:	bfb8      	it	lt
 8010bbc:	18e4      	addlt	r4, r4, r3
 8010bbe:	f7ff ff6b 	bl	8010a98 <__malloc_lock>
 8010bc2:	4a1e      	ldr	r2, [pc, #120]	; (8010c3c <_free_r+0x94>)
 8010bc4:	9801      	ldr	r0, [sp, #4]
 8010bc6:	6813      	ldr	r3, [r2, #0]
 8010bc8:	b933      	cbnz	r3, 8010bd8 <_free_r+0x30>
 8010bca:	6063      	str	r3, [r4, #4]
 8010bcc:	6014      	str	r4, [r2, #0]
 8010bce:	b003      	add	sp, #12
 8010bd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010bd4:	f7ff bf66 	b.w	8010aa4 <__malloc_unlock>
 8010bd8:	42a3      	cmp	r3, r4
 8010bda:	d908      	bls.n	8010bee <_free_r+0x46>
 8010bdc:	6825      	ldr	r5, [r4, #0]
 8010bde:	1961      	adds	r1, r4, r5
 8010be0:	428b      	cmp	r3, r1
 8010be2:	bf01      	itttt	eq
 8010be4:	6819      	ldreq	r1, [r3, #0]
 8010be6:	685b      	ldreq	r3, [r3, #4]
 8010be8:	1949      	addeq	r1, r1, r5
 8010bea:	6021      	streq	r1, [r4, #0]
 8010bec:	e7ed      	b.n	8010bca <_free_r+0x22>
 8010bee:	461a      	mov	r2, r3
 8010bf0:	685b      	ldr	r3, [r3, #4]
 8010bf2:	b10b      	cbz	r3, 8010bf8 <_free_r+0x50>
 8010bf4:	42a3      	cmp	r3, r4
 8010bf6:	d9fa      	bls.n	8010bee <_free_r+0x46>
 8010bf8:	6811      	ldr	r1, [r2, #0]
 8010bfa:	1855      	adds	r5, r2, r1
 8010bfc:	42a5      	cmp	r5, r4
 8010bfe:	d10b      	bne.n	8010c18 <_free_r+0x70>
 8010c00:	6824      	ldr	r4, [r4, #0]
 8010c02:	4421      	add	r1, r4
 8010c04:	1854      	adds	r4, r2, r1
 8010c06:	42a3      	cmp	r3, r4
 8010c08:	6011      	str	r1, [r2, #0]
 8010c0a:	d1e0      	bne.n	8010bce <_free_r+0x26>
 8010c0c:	681c      	ldr	r4, [r3, #0]
 8010c0e:	685b      	ldr	r3, [r3, #4]
 8010c10:	6053      	str	r3, [r2, #4]
 8010c12:	440c      	add	r4, r1
 8010c14:	6014      	str	r4, [r2, #0]
 8010c16:	e7da      	b.n	8010bce <_free_r+0x26>
 8010c18:	d902      	bls.n	8010c20 <_free_r+0x78>
 8010c1a:	230c      	movs	r3, #12
 8010c1c:	6003      	str	r3, [r0, #0]
 8010c1e:	e7d6      	b.n	8010bce <_free_r+0x26>
 8010c20:	6825      	ldr	r5, [r4, #0]
 8010c22:	1961      	adds	r1, r4, r5
 8010c24:	428b      	cmp	r3, r1
 8010c26:	bf04      	itt	eq
 8010c28:	6819      	ldreq	r1, [r3, #0]
 8010c2a:	685b      	ldreq	r3, [r3, #4]
 8010c2c:	6063      	str	r3, [r4, #4]
 8010c2e:	bf04      	itt	eq
 8010c30:	1949      	addeq	r1, r1, r5
 8010c32:	6021      	streq	r1, [r4, #0]
 8010c34:	6054      	str	r4, [r2, #4]
 8010c36:	e7ca      	b.n	8010bce <_free_r+0x26>
 8010c38:	b003      	add	sp, #12
 8010c3a:	bd30      	pop	{r4, r5, pc}
 8010c3c:	20003574 	.word	0x20003574

08010c40 <_init>:
 8010c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c42:	bf00      	nop
 8010c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c46:	bc08      	pop	{r3}
 8010c48:	469e      	mov	lr, r3
 8010c4a:	4770      	bx	lr

08010c4c <_fini>:
 8010c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c4e:	bf00      	nop
 8010c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c52:	bc08      	pop	{r3}
 8010c54:	469e      	mov	lr, r3
 8010c56:	4770      	bx	lr
